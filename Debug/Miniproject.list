
Miniproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fab8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c64  0800fc68  0800fc68  0001fc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080118cc  080118cc  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  080118cc  080118cc  000218cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080118d4  080118d4  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118d4  080118d4  000218d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080118d8  080118d8  000218d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080118dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301d8  2**0
                  CONTENTS
 10 .bss          000060c8  200001d8  200001d8  000301d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200062a0  200062a0  000301d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00027d02  00000000  00000000  0003024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006306  00000000  00000000  00057f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002290  00000000  00000000  0005e258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a5d  00000000  00000000  000604e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002be80  00000000  00000000  00061f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002cc1d  00000000  00000000  0008ddc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f4a94  00000000  00000000  000ba9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000095c0  00000000  00000000  001af478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001b8a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fc50 	.word	0x0800fc50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	0800fc50 	.word	0x0800fc50

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2f>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000874:	bf24      	itt	cs
 8000876:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800087a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800087e:	d90d      	bls.n	800089c <__aeabi_d2f+0x30>
 8000880:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000884:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000888:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800088c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000890:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000894:	bf08      	it	eq
 8000896:	f020 0001 	biceq.w	r0, r0, #1
 800089a:	4770      	bx	lr
 800089c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008a0:	d121      	bne.n	80008e6 <__aeabi_d2f+0x7a>
 80008a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008a6:	bfbc      	itt	lt
 80008a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ac:	4770      	bxlt	lr
 80008ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008b6:	f1c2 0218 	rsb	r2, r2, #24
 80008ba:	f1c2 0c20 	rsb	ip, r2, #32
 80008be:	fa10 f30c 	lsls.w	r3, r0, ip
 80008c2:	fa20 f002 	lsr.w	r0, r0, r2
 80008c6:	bf18      	it	ne
 80008c8:	f040 0001 	orrne.w	r0, r0, #1
 80008cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d8:	ea40 000c 	orr.w	r0, r0, ip
 80008dc:	fa23 f302 	lsr.w	r3, r3, r2
 80008e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008e4:	e7cc      	b.n	8000880 <__aeabi_d2f+0x14>
 80008e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ea:	d107      	bne.n	80008fc <__aeabi_d2f+0x90>
 80008ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f0:	bf1e      	ittt	ne
 80008f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008fa:	4770      	bxne	lr
 80008fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000900:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295
 800091c:	f04f 30ff 	movne.w	r0, #4294967295
 8000920:	f000 b970 	b.w	8000c04 <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9e08      	ldr	r6, [sp, #32]
 8000942:	460d      	mov	r5, r1
 8000944:	4604      	mov	r4, r0
 8000946:	460f      	mov	r7, r1
 8000948:	2b00      	cmp	r3, #0
 800094a:	d14a      	bne.n	80009e2 <__udivmoddi4+0xa6>
 800094c:	428a      	cmp	r2, r1
 800094e:	4694      	mov	ip, r2
 8000950:	d965      	bls.n	8000a1e <__udivmoddi4+0xe2>
 8000952:	fab2 f382 	clz	r3, r2
 8000956:	b143      	cbz	r3, 800096a <__udivmoddi4+0x2e>
 8000958:	fa02 fc03 	lsl.w	ip, r2, r3
 800095c:	f1c3 0220 	rsb	r2, r3, #32
 8000960:	409f      	lsls	r7, r3
 8000962:	fa20 f202 	lsr.w	r2, r0, r2
 8000966:	4317      	orrs	r7, r2
 8000968:	409c      	lsls	r4, r3
 800096a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800096e:	fa1f f58c 	uxth.w	r5, ip
 8000972:	fbb7 f1fe 	udiv	r1, r7, lr
 8000976:	0c22      	lsrs	r2, r4, #16
 8000978:	fb0e 7711 	mls	r7, lr, r1, r7
 800097c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000980:	fb01 f005 	mul.w	r0, r1, r5
 8000984:	4290      	cmp	r0, r2
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x62>
 8000988:	eb1c 0202 	adds.w	r2, ip, r2
 800098c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000990:	f080 811c 	bcs.w	8000bcc <__udivmoddi4+0x290>
 8000994:	4290      	cmp	r0, r2
 8000996:	f240 8119 	bls.w	8000bcc <__udivmoddi4+0x290>
 800099a:	3902      	subs	r1, #2
 800099c:	4462      	add	r2, ip
 800099e:	1a12      	subs	r2, r2, r0
 80009a0:	b2a4      	uxth	r4, r4
 80009a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009ae:	fb00 f505 	mul.w	r5, r0, r5
 80009b2:	42a5      	cmp	r5, r4
 80009b4:	d90a      	bls.n	80009cc <__udivmoddi4+0x90>
 80009b6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80009be:	f080 8107 	bcs.w	8000bd0 <__udivmoddi4+0x294>
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	f240 8104 	bls.w	8000bd0 <__udivmoddi4+0x294>
 80009c8:	4464      	add	r4, ip
 80009ca:	3802      	subs	r0, #2
 80009cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009d0:	1b64      	subs	r4, r4, r5
 80009d2:	2100      	movs	r1, #0
 80009d4:	b11e      	cbz	r6, 80009de <__udivmoddi4+0xa2>
 80009d6:	40dc      	lsrs	r4, r3
 80009d8:	2300      	movs	r3, #0
 80009da:	e9c6 4300 	strd	r4, r3, [r6]
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0xbc>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	f000 80ed 	beq.w	8000bc6 <__udivmoddi4+0x28a>
 80009ec:	2100      	movs	r1, #0
 80009ee:	e9c6 0500 	strd	r0, r5, [r6]
 80009f2:	4608      	mov	r0, r1
 80009f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f8:	fab3 f183 	clz	r1, r3
 80009fc:	2900      	cmp	r1, #0
 80009fe:	d149      	bne.n	8000a94 <__udivmoddi4+0x158>
 8000a00:	42ab      	cmp	r3, r5
 8000a02:	d302      	bcc.n	8000a0a <__udivmoddi4+0xce>
 8000a04:	4282      	cmp	r2, r0
 8000a06:	f200 80f8 	bhi.w	8000bfa <__udivmoddi4+0x2be>
 8000a0a:	1a84      	subs	r4, r0, r2
 8000a0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a10:	2001      	movs	r0, #1
 8000a12:	4617      	mov	r7, r2
 8000a14:	2e00      	cmp	r6, #0
 8000a16:	d0e2      	beq.n	80009de <__udivmoddi4+0xa2>
 8000a18:	e9c6 4700 	strd	r4, r7, [r6]
 8000a1c:	e7df      	b.n	80009de <__udivmoddi4+0xa2>
 8000a1e:	b902      	cbnz	r2, 8000a22 <__udivmoddi4+0xe6>
 8000a20:	deff      	udf	#255	; 0xff
 8000a22:	fab2 f382 	clz	r3, r2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f040 8090 	bne.w	8000b4c <__udivmoddi4+0x210>
 8000a2c:	1a8a      	subs	r2, r1, r2
 8000a2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a32:	fa1f fe8c 	uxth.w	lr, ip
 8000a36:	2101      	movs	r1, #1
 8000a38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a40:	0c22      	lsrs	r2, r4, #16
 8000a42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a46:	fb0e f005 	mul.w	r0, lr, r5
 8000a4a:	4290      	cmp	r0, r2
 8000a4c:	d908      	bls.n	8000a60 <__udivmoddi4+0x124>
 8000a4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a56:	d202      	bcs.n	8000a5e <__udivmoddi4+0x122>
 8000a58:	4290      	cmp	r0, r2
 8000a5a:	f200 80cb 	bhi.w	8000bf4 <__udivmoddi4+0x2b8>
 8000a5e:	4645      	mov	r5, r8
 8000a60:	1a12      	subs	r2, r2, r0
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a68:	fb07 2210 	mls	r2, r7, r0, r2
 8000a6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a70:	fb0e fe00 	mul.w	lr, lr, r0
 8000a74:	45a6      	cmp	lr, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x14e>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a80:	d202      	bcs.n	8000a88 <__udivmoddi4+0x14c>
 8000a82:	45a6      	cmp	lr, r4
 8000a84:	f200 80bb 	bhi.w	8000bfe <__udivmoddi4+0x2c2>
 8000a88:	4610      	mov	r0, r2
 8000a8a:	eba4 040e 	sub.w	r4, r4, lr
 8000a8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a92:	e79f      	b.n	80009d4 <__udivmoddi4+0x98>
 8000a94:	f1c1 0720 	rsb	r7, r1, #32
 8000a98:	408b      	lsls	r3, r1
 8000a9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aa2:	fa05 f401 	lsl.w	r4, r5, r1
 8000aa6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aaa:	40fd      	lsrs	r5, r7
 8000aac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ab6:	fa1f fe8c 	uxth.w	lr, ip
 8000aba:	fb09 5518 	mls	r5, r9, r8, r5
 8000abe:	0c1c      	lsrs	r4, r3, #16
 8000ac0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ac4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ac8:	42a5      	cmp	r5, r4
 8000aca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ace:	fa00 f001 	lsl.w	r0, r0, r1
 8000ad2:	d90b      	bls.n	8000aec <__udivmoddi4+0x1b0>
 8000ad4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000adc:	f080 8088 	bcs.w	8000bf0 <__udivmoddi4+0x2b4>
 8000ae0:	42a5      	cmp	r5, r4
 8000ae2:	f240 8085 	bls.w	8000bf0 <__udivmoddi4+0x2b4>
 8000ae6:	f1a8 0802 	sub.w	r8, r8, #2
 8000aea:	4464      	add	r4, ip
 8000aec:	1b64      	subs	r4, r4, r5
 8000aee:	b29d      	uxth	r5, r3
 8000af0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000af4:	fb09 4413 	mls	r4, r9, r3, r4
 8000af8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000afc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d908      	bls.n	8000b16 <__udivmoddi4+0x1da>
 8000b04:	eb1c 0404 	adds.w	r4, ip, r4
 8000b08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b0c:	d26c      	bcs.n	8000be8 <__udivmoddi4+0x2ac>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	d96a      	bls.n	8000be8 <__udivmoddi4+0x2ac>
 8000b12:	3b02      	subs	r3, #2
 8000b14:	4464      	add	r4, ip
 8000b16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b1e:	eba4 040e 	sub.w	r4, r4, lr
 8000b22:	42ac      	cmp	r4, r5
 8000b24:	46c8      	mov	r8, r9
 8000b26:	46ae      	mov	lr, r5
 8000b28:	d356      	bcc.n	8000bd8 <__udivmoddi4+0x29c>
 8000b2a:	d053      	beq.n	8000bd4 <__udivmoddi4+0x298>
 8000b2c:	b156      	cbz	r6, 8000b44 <__udivmoddi4+0x208>
 8000b2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b32:	eb64 040e 	sbc.w	r4, r4, lr
 8000b36:	fa04 f707 	lsl.w	r7, r4, r7
 8000b3a:	40ca      	lsrs	r2, r1
 8000b3c:	40cc      	lsrs	r4, r1
 8000b3e:	4317      	orrs	r7, r2
 8000b40:	e9c6 7400 	strd	r7, r4, [r6]
 8000b44:	4618      	mov	r0, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4c:	f1c3 0120 	rsb	r1, r3, #32
 8000b50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b54:	fa20 f201 	lsr.w	r2, r0, r1
 8000b58:	fa25 f101 	lsr.w	r1, r5, r1
 8000b5c:	409d      	lsls	r5, r3
 8000b5e:	432a      	orrs	r2, r5
 8000b60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b64:	fa1f fe8c 	uxth.w	lr, ip
 8000b68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b70:	0c11      	lsrs	r1, r2, #16
 8000b72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b76:	fb00 f50e 	mul.w	r5, r0, lr
 8000b7a:	428d      	cmp	r5, r1
 8000b7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b80:	d908      	bls.n	8000b94 <__udivmoddi4+0x258>
 8000b82:	eb1c 0101 	adds.w	r1, ip, r1
 8000b86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b8a:	d22f      	bcs.n	8000bec <__udivmoddi4+0x2b0>
 8000b8c:	428d      	cmp	r5, r1
 8000b8e:	d92d      	bls.n	8000bec <__udivmoddi4+0x2b0>
 8000b90:	3802      	subs	r0, #2
 8000b92:	4461      	add	r1, ip
 8000b94:	1b49      	subs	r1, r1, r5
 8000b96:	b292      	uxth	r2, r2
 8000b98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ba0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ba4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ba8:	4291      	cmp	r1, r2
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x282>
 8000bac:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bb4:	d216      	bcs.n	8000be4 <__udivmoddi4+0x2a8>
 8000bb6:	4291      	cmp	r1, r2
 8000bb8:	d914      	bls.n	8000be4 <__udivmoddi4+0x2a8>
 8000bba:	3d02      	subs	r5, #2
 8000bbc:	4462      	add	r2, ip
 8000bbe:	1a52      	subs	r2, r2, r1
 8000bc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bc4:	e738      	b.n	8000a38 <__udivmoddi4+0xfc>
 8000bc6:	4631      	mov	r1, r6
 8000bc8:	4630      	mov	r0, r6
 8000bca:	e708      	b.n	80009de <__udivmoddi4+0xa2>
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e6e6      	b.n	800099e <__udivmoddi4+0x62>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	e6fb      	b.n	80009cc <__udivmoddi4+0x90>
 8000bd4:	4548      	cmp	r0, r9
 8000bd6:	d2a9      	bcs.n	8000b2c <__udivmoddi4+0x1f0>
 8000bd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000be0:	3b01      	subs	r3, #1
 8000be2:	e7a3      	b.n	8000b2c <__udivmoddi4+0x1f0>
 8000be4:	4645      	mov	r5, r8
 8000be6:	e7ea      	b.n	8000bbe <__udivmoddi4+0x282>
 8000be8:	462b      	mov	r3, r5
 8000bea:	e794      	b.n	8000b16 <__udivmoddi4+0x1da>
 8000bec:	4640      	mov	r0, r8
 8000bee:	e7d1      	b.n	8000b94 <__udivmoddi4+0x258>
 8000bf0:	46d0      	mov	r8, sl
 8000bf2:	e77b      	b.n	8000aec <__udivmoddi4+0x1b0>
 8000bf4:	3d02      	subs	r5, #2
 8000bf6:	4462      	add	r2, ip
 8000bf8:	e732      	b.n	8000a60 <__udivmoddi4+0x124>
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	e70a      	b.n	8000a14 <__udivmoddi4+0xd8>
 8000bfe:	4464      	add	r4, ip
 8000c00:	3802      	subs	r0, #2
 8000c02:	e742      	b.n	8000a8a <__udivmoddi4+0x14e>

08000c04 <__aeabi_idiv0>:
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <vApplicationGetIdleTaskMemory+0x30>)
 8000c1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200001f4 	.word	0x200001f4
 8000c38:	20000294 	.word	0x20000294

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b5b0      	push	{r4, r5, r7, lr}
 8000c3e:	b0b0      	sub	sp, #192	; 0xc0
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c42:	f002 fd45 	bl	80036d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c46:	f000 f8c7 	bl	8000dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4a:	f000 f965 	bl	8000f18 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000c4e:	f000 f92d 	bl	8000eac <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000c52:	f001 fd13 	bl	800267c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000c56:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f001 fd90 	bl	8002780 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8000c60:	2001      	movs	r0, #1
 8000c62:	f001 fdf1 	bl	8002848 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8000c66:	f002 f96b 	bl	8002f40 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_DARKGREEN);
 8000c6a:	484b      	ldr	r0, [pc, #300]	; (8000d98 <main+0x15c>)
 8000c6c:	f001 fe5e 	bl	800292c <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_DARKGREEN);
 8000c70:	4849      	ldr	r0, [pc, #292]	; (8000d98 <main+0x15c>)
 8000c72:	f001 fe11 	bl	8002898 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000c76:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000c7a:	f001 fdf5 	bl	8002868 <BSP_LCD_SetTextColor>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMessageQDef(Queue01, 16, GYRO_DATA_T);
 8000c7e:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <main+0x160>)
 8000c80:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8000c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue01Handle = osMessageCreate(osMessageQ(Queue01), NULL);
 8000c8a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f009 f95f 	bl	8009f54 <osMessageCreate>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a41      	ldr	r2, [pc, #260]	; (8000da0 <main+0x164>)
 8000c9a:	6013      	str	r3, [r2, #0]

  osMessageQDef(Queue02, 16, uint16_t);
 8000c9c:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <main+0x168>)
 8000c9e:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue02Handle = osMessageCreate(osMessageQ(Queue02), NULL);
 8000ca8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f009 f950 	bl	8009f54 <osMessageCreate>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4a3c      	ldr	r2, [pc, #240]	; (8000da8 <main+0x16c>)
 8000cb8:	6013      	str	r3, [r2, #0]

  osMessageQDef(Queue03, 16, uint16_t);
 8000cba:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <main+0x168>)
 8000cbc:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000cc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue03Handle = osMessageCreate(osMessageQ(Queue03), NULL);
 8000cc6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f009 f941 	bl	8009f54 <osMessageCreate>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a35      	ldr	r2, [pc, #212]	; (8000dac <main+0x170>)
 8000cd6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 128);
 8000cd8:	4b35      	ldr	r3, [pc, #212]	; (8000db0 <main+0x174>)
 8000cda:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000cde:	461d      	mov	r5, r3
 8000ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 8000cec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f009 f836 	bl	8009d64 <osThreadCreate>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a2e      	ldr	r2, [pc, #184]	; (8000db4 <main+0x178>)
 8000cfc:	6013      	str	r3, [r2, #0]

  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 8000cfe:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <main+0x17c>)
 8000d00:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000d04:	461d      	mov	r5, r3
 8000d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000d12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f009 f823 	bl	8009d64 <osThreadCreate>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a26      	ldr	r2, [pc, #152]	; (8000dbc <main+0x180>)
 8000d22:	6013      	str	r3, [r2, #0]

  osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 128);
 8000d24:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <main+0x184>)
 8000d26:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000d2a:	461d      	mov	r5, r3
 8000d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 8000d38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f009 f810 	bl	8009d64 <osThreadCreate>
 8000d44:	4603      	mov	r3, r0
 8000d46:	4a1f      	ldr	r2, [pc, #124]	; (8000dc4 <main+0x188>)
 8000d48:	6013      	str	r3, [r2, #0]

  osThreadDef(Task04, StartTask04, osPriorityNormal, 0, 256);
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <main+0x18c>)
 8000d4c:	f107 0420 	add.w	r4, r7, #32
 8000d50:	461d      	mov	r5, r3
 8000d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task04Handle = osThreadCreate(osThread(Task04), NULL);
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f008 fffd 	bl	8009d64 <osThreadCreate>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <main+0x190>)
 8000d6e:	6013      	str	r3, [r2, #0]

  osThreadDef(Task05, StartTask05, osPriorityIdle, 0, 128);
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <main+0x194>)
 8000d72:	1d3c      	adds	r4, r7, #4
 8000d74:	461d      	mov	r5, r3
 8000d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task05Handle = osThreadCreate(osThread(Task05), NULL);
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f008 ffec 	bl	8009d64 <osThreadCreate>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <main+0x198>)
 8000d90:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d92:	f008 ffe0 	bl	8009d56 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <main+0x15a>
 8000d98:	ff008000 	.word	0xff008000
 8000d9c:	0800fc68 	.word	0x0800fc68
 8000da0:	20000500 	.word	0x20000500
 8000da4:	0800fc78 	.word	0x0800fc78
 8000da8:	20000504 	.word	0x20000504
 8000dac:	20000508 	.word	0x20000508
 8000db0:	0800fc90 	.word	0x0800fc90
 8000db4:	200004ec 	.word	0x200004ec
 8000db8:	0800fcb4 	.word	0x0800fcb4
 8000dbc:	200004f0 	.word	0x200004f0
 8000dc0:	0800fcd8 	.word	0x0800fcd8
 8000dc4:	200004f4 	.word	0x200004f4
 8000dc8:	0800fcfc 	.word	0x0800fcfc
 8000dcc:	200004f8 	.word	0x200004f8
 8000dd0:	0800fd20 	.word	0x0800fd20
 8000dd4:	200004fc 	.word	0x200004fc

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	; 0x50
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	2230      	movs	r2, #48	; 0x30
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f00e fa58 	bl	800f29c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0c:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <SystemClock_Config+0xd0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e34:	2301      	movs	r3, #1
 8000e36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e52:	2302      	movs	r3, #2
 8000e54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e56:	2307      	movs	r3, #7
 8000e58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f005 fa22 	bl	80062a8 <HAL_RCC_OscConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e6a:	f000 fb9f 	bl	80015ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6e:	230f      	movs	r3, #15
 8000e70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e72:	2302      	movs	r3, #2
 8000e74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000e80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f005 fc83 	bl	8006798 <HAL_RCC_ClockConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e98:	f000 fb88 	bl	80015ac <Error_Handler>
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	3750      	adds	r7, #80	; 0x50
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40007000 	.word	0x40007000

08000eac <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_SPI5_Init+0x64>)
 8000eb2:	4a18      	ldr	r2, [pc, #96]	; (8000f14 <MX_SPI5_Init+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_SPI5_Init+0x64>)
 8000eb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ebc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_SPI5_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_SPI5_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_SPI5_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_SPI5_Init+0x64>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_SPI5_Init+0x64>)
 8000ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000edc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_SPI5_Init+0x64>)
 8000ee0:	2218      	movs	r2, #24
 8000ee2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <MX_SPI5_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_SPI5_Init+0x64>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <MX_SPI5_Init+0x64>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_SPI5_Init+0x64>)
 8000ef8:	220a      	movs	r2, #10
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_SPI5_Init+0x64>)
 8000efe:	f006 f8e4 	bl	80070ca <HAL_SPI_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000f08:	f000 fb50 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000494 	.word	0x20000494
 8000f14:	40015000 	.word	0x40015000

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a2d      	ldr	r2, [pc, #180]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000f38:	f043 0320 	orr.w	r3, r3, #32
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0320 	and.w	r3, r3, #32
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b27      	ldr	r3, [pc, #156]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a26      	ldr	r2, [pc, #152]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b24      	ldr	r3, [pc, #144]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a1f      	ldr	r2, [pc, #124]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a18      	ldr	r2, [pc, #96]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a11      	ldr	r2, [pc, #68]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_GPIO_Init+0xd4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000fc0:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <MX_GPIO_Init+0xd8>)
 8000fc2:	f003 fc2d 	bl	8004820 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000fc6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_GPIO_Init+0xd8>)
 8000fe0:	f003 f966 	bl	80042b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40021800 	.word	0x40021800
 8000ff4:	00000000 	.word	0x00000000

08000ff8 <GYRO_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void GYRO_Task(void)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
	BSP_GYRO_Init();
 8000ffe:	f001 fac3 	bl	8002588 <BSP_GYRO_Init>
	GYRO_DATA_T gyro_data;
	osSignalWait(0x1, osWaitForever);
 8001002:	463b      	mov	r3, r7
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	2101      	movs	r1, #1
 800100a:	4618      	mov	r0, r3
 800100c:	f008 ff56 	bl	8009ebc <osSignalWait>
	for (;;)
	  {
		BSP_GYRO_GetXYZ(val);
 8001010:	4895      	ldr	r0, [pc, #596]	; (8001268 <GYRO_Task+0x270>)
 8001012:	f001 fb1f 	bl	8002654 <BSP_GYRO_GetXYZ>

		rate_gyr_x = val[0]  * G_GAIN;
 8001016:	4b94      	ldr	r3, [pc, #592]	; (8001268 <GYRO_Task+0x270>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fbce 	bl	80007bc <__aeabi_f2d>
 8001020:	a38d      	add	r3, pc, #564	; (adr r3, 8001258 <GYRO_Task+0x260>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff f93b 	bl	80002a0 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff fc1b 	bl	800086c <__aeabi_d2f>
 8001036:	4603      	mov	r3, r0
 8001038:	4a8c      	ldr	r2, [pc, #560]	; (800126c <GYRO_Task+0x274>)
 800103a:	6013      	str	r3, [r2, #0]
		rate_gyr_y = val[1]  * G_GAIN;
 800103c:	4b8a      	ldr	r3, [pc, #552]	; (8001268 <GYRO_Task+0x270>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fbbb 	bl	80007bc <__aeabi_f2d>
 8001046:	a384      	add	r3, pc, #528	; (adr r3, 8001258 <GYRO_Task+0x260>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff f928 	bl	80002a0 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fc08 	bl	800086c <__aeabi_d2f>
 800105c:	4603      	mov	r3, r0
 800105e:	4a84      	ldr	r2, [pc, #528]	; (8001270 <GYRO_Task+0x278>)
 8001060:	6013      	str	r3, [r2, #0]
		rate_gyr_z = val[2]  * G_GAIN;
 8001062:	4b81      	ldr	r3, [pc, #516]	; (8001268 <GYRO_Task+0x270>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fba8 	bl	80007bc <__aeabi_f2d>
 800106c:	a37a      	add	r3, pc, #488	; (adr r3, 8001258 <GYRO_Task+0x260>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	f7ff f915 	bl	80002a0 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fbf5 	bl	800086c <__aeabi_d2f>
 8001082:	4603      	mov	r3, r0
 8001084:	4a7b      	ldr	r2, [pc, #492]	; (8001274 <GYRO_Task+0x27c>)
 8001086:	6013      	str	r3, [r2, #0]
		//BSP_LCD_FillTriangle(120,95,145,10,50,50);
		gyro_data.x_ang_rate+=rate_gyr_x*DT;
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fb96 	bl	80007bc <__aeabi_f2d>
 8001090:	4604      	mov	r4, r0
 8001092:	460d      	mov	r5, r1
 8001094:	4b75      	ldr	r3, [pc, #468]	; (800126c <GYRO_Task+0x274>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fb8f 	bl	80007bc <__aeabi_f2d>
 800109e:	a370      	add	r3, pc, #448	; (adr r3, 8001260 <GYRO_Task+0x268>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	f7ff f8fc 	bl	80002a0 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4620      	mov	r0, r4
 80010ae:	4629      	mov	r1, r5
 80010b0:	f7ff fa26 	bl	8000500 <__adddf3>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fbd6 	bl	800086c <__aeabi_d2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	61fb      	str	r3, [r7, #28]
		gyro_data.y_ang_rate+=rate_gyr_y*DT;
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fb78 	bl	80007bc <__aeabi_f2d>
 80010cc:	4604      	mov	r4, r0
 80010ce:	460d      	mov	r5, r1
 80010d0:	4b67      	ldr	r3, [pc, #412]	; (8001270 <GYRO_Task+0x278>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fb71 	bl	80007bc <__aeabi_f2d>
 80010da:	a361      	add	r3, pc, #388	; (adr r3, 8001260 <GYRO_Task+0x268>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff f8de 	bl	80002a0 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4620      	mov	r0, r4
 80010ea:	4629      	mov	r1, r5
 80010ec:	f7ff fa08 	bl	8000500 <__adddf3>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fbb8 	bl	800086c <__aeabi_d2f>
 80010fc:	4603      	mov	r3, r0
 80010fe:	623b      	str	r3, [r7, #32]
		gyro_data.z_ang_rate+=rate_gyr_z*DT;
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fb5a 	bl	80007bc <__aeabi_f2d>
 8001108:	4604      	mov	r4, r0
 800110a:	460d      	mov	r5, r1
 800110c:	4b59      	ldr	r3, [pc, #356]	; (8001274 <GYRO_Task+0x27c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fb53 	bl	80007bc <__aeabi_f2d>
 8001116:	a352      	add	r3, pc, #328	; (adr r3, 8001260 <GYRO_Task+0x268>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff f8c0 	bl	80002a0 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4620      	mov	r0, r4
 8001126:	4629      	mov	r1, r5
 8001128:	f7ff f9ea 	bl	8000500 <__adddf3>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fb9a 	bl	800086c <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
		if (gyro_data.x_ang_rate > 360){
 800113c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001140:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001278 <GYRO_Task+0x280>
 8001144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	dd01      	ble.n	8001152 <GYRO_Task+0x15a>
			gyro_data.x_ang_rate = 360;
 800114e:	4b4b      	ldr	r3, [pc, #300]	; (800127c <GYRO_Task+0x284>)
 8001150:	61fb      	str	r3, [r7, #28]
		}
		tmpY = tmpX;
 8001152:	4b4b      	ldr	r3, [pc, #300]	; (8001280 <GYRO_Task+0x288>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a4b      	ldr	r2, [pc, #300]	; (8001284 <GYRO_Task+0x28c>)
 8001158:	6013      	str	r3, [r2, #0]
		osMessagePut(Queue01Handle, (uint32_t)&gyro_data, 0);
 800115a:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <GYRO_Task+0x290>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f107 011c 	add.w	r1, r7, #28
 8001162:	2200      	movs	r2, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f008 ff1d 	bl	8009fa4 <osMessagePut>
	    osEvent event1 = osMessageGet(Queue02Handle, osWaitForever);
 800116a:	4b48      	ldr	r3, [pc, #288]	; (800128c <GYRO_Task+0x294>)
 800116c:	6819      	ldr	r1, [r3, #0]
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	f04f 32ff 	mov.w	r2, #4294967295
 8001176:	4618      	mov	r0, r3
 8001178:	f008 ff54 	bl	800a024 <osMessageGet>
	    h = event1.value.p;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b43      	ldr	r3, [pc, #268]	; (8001290 <GYRO_Task+0x298>)
 8001182:	801a      	strh	r2, [r3, #0]
	    if ((gyro_data.x_ang_rate-tmpX)>=10 && h<70 && h>50 && RX>110 && RX<140 && RY>160 && RY<190 && inc == 0){
 8001184:	ed97 7a07 	vldr	s14, [r7, #28]
 8001188:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <GYRO_Task+0x288>)
 800118a:	edd3 7a00 	vldr	s15, [r3]
 800118e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001192:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	db42      	blt.n	8001226 <GYRO_Task+0x22e>
 80011a0:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <GYRO_Task+0x298>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	2b45      	cmp	r3, #69	; 0x45
 80011a6:	d83e      	bhi.n	8001226 <GYRO_Task+0x22e>
 80011a8:	4b39      	ldr	r3, [pc, #228]	; (8001290 <GYRO_Task+0x298>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	2b32      	cmp	r3, #50	; 0x32
 80011ae:	d93a      	bls.n	8001226 <GYRO_Task+0x22e>
 80011b0:	4b38      	ldr	r3, [pc, #224]	; (8001294 <GYRO_Task+0x29c>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	2b6e      	cmp	r3, #110	; 0x6e
 80011b6:	d936      	bls.n	8001226 <GYRO_Task+0x22e>
 80011b8:	4b36      	ldr	r3, [pc, #216]	; (8001294 <GYRO_Task+0x29c>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	2b8b      	cmp	r3, #139	; 0x8b
 80011be:	d832      	bhi.n	8001226 <GYRO_Task+0x22e>
 80011c0:	4b35      	ldr	r3, [pc, #212]	; (8001298 <GYRO_Task+0x2a0>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	2ba0      	cmp	r3, #160	; 0xa0
 80011c6:	d92e      	bls.n	8001226 <GYRO_Task+0x22e>
 80011c8:	4b33      	ldr	r3, [pc, #204]	; (8001298 <GYRO_Task+0x2a0>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	2bbd      	cmp	r3, #189	; 0xbd
 80011ce:	d82a      	bhi.n	8001226 <GYRO_Task+0x22e>
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <GYRO_Task+0x2a4>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d126      	bne.n	8001226 <GYRO_Task+0x22e>
	    	high = 60;
 80011d8:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <GYRO_Task+0x2a8>)
 80011da:	223c      	movs	r2, #60	; 0x3c
 80011dc:	801a      	strh	r2, [r3, #0]
	    	RY = 170;
 80011de:	4b2e      	ldr	r3, [pc, #184]	; (8001298 <GYRO_Task+0x2a0>)
 80011e0:	22aa      	movs	r2, #170	; 0xaa
 80011e2:	801a      	strh	r2, [r3, #0]
	    	RX = 120;
 80011e4:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <GYRO_Task+0x29c>)
 80011e6:	2278      	movs	r2, #120	; 0x78
 80011e8:	801a      	strh	r2, [r3, #0]
	    	if ((gyro_data.x_ang_rate-tmpX)>=50){
 80011ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80011ee:	4b24      	ldr	r3, [pc, #144]	; (8001280 <GYRO_Task+0x288>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80012a4 <GYRO_Task+0x2ac>
 80011fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001204:	db02      	blt.n	800120c <GYRO_Task+0x214>
	    		mode = 1;
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <GYRO_Task+0x2b0>)
 8001208:	2201      	movs	r2, #1
 800120a:	801a      	strh	r2, [r3, #0]
	    	}
//	    	else{
//	    		mode = 2;
//	    	}
	    	ponk = 1;
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <GYRO_Task+0x2b4>)
 800120e:	2201      	movs	r2, #1
 8001210:	801a      	strh	r2, [r3, #0]
	    	osDelay(100);
 8001212:	2064      	movs	r0, #100	; 0x64
 8001214:	f008 fdfe 	bl	8009e14 <osDelay>
	    	ponk = 0;
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <GYRO_Task+0x2b4>)
 800121a:	2200      	movs	r2, #0
 800121c:	801a      	strh	r2, [r3, #0]
	    	flag = 0;
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <GYRO_Task+0x2b8>)
 8001220:	2200      	movs	r2, #0
 8001222:	801a      	strh	r2, [r3, #0]
 8001224:	e00e      	b.n	8001244 <GYRO_Task+0x24c>
	    }
	    else if (h == 30 || RY == 190 || RX == 140){
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <GYRO_Task+0x298>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	2b1e      	cmp	r3, #30
 800122c:	d007      	beq.n	800123e <GYRO_Task+0x246>
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <GYRO_Task+0x2a0>)
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	2bbe      	cmp	r3, #190	; 0xbe
 8001234:	d003      	beq.n	800123e <GYRO_Task+0x246>
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <GYRO_Task+0x29c>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	2b8c      	cmp	r3, #140	; 0x8c
 800123c:	d102      	bne.n	8001244 <GYRO_Task+0x24c>
	    	loose = 1;
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <GYRO_Task+0x2bc>)
 8001240:	2201      	movs	r2, #1
 8001242:	801a      	strh	r2, [r3, #0]
	    }
	    	  tmpX = gyro_data.x_ang_rate;
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <GYRO_Task+0x288>)
 8001248:	6013      	str	r3, [r2, #0]
	    	  osDelay(100);
 800124a:	2064      	movs	r0, #100	; 0x64
 800124c:	f008 fde2 	bl	8009e14 <osDelay>
	    	  gyro_data.x_ang_rate = 0;
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
	  {
 8001256:	e6db      	b.n	8001010 <GYRO_Task+0x18>
 8001258:	1eb851ec 	.word	0x1eb851ec
 800125c:	3fb1eb85 	.word	0x3fb1eb85
 8001260:	47ae147b 	.word	0x47ae147b
 8001264:	3f847ae1 	.word	0x3f847ae1
 8001268:	2000050c 	.word	0x2000050c
 800126c:	2000055c 	.word	0x2000055c
 8001270:	20000558 	.word	0x20000558
 8001274:	20000560 	.word	0x20000560
 8001278:	43b40000 	.word	0x43b40000
 800127c:	43b40000 	.word	0x43b40000
 8001280:	20000564 	.word	0x20000564
 8001284:	20000568 	.word	0x20000568
 8001288:	20000500 	.word	0x20000500
 800128c:	20000504 	.word	0x20000504
 8001290:	20000574 	.word	0x20000574
 8001294:	20000002 	.word	0x20000002
 8001298:	20000004 	.word	0x20000004
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000000 	.word	0x20000000
 80012a4:	42480000 	.word	0x42480000
 80012a8:	2000000a 	.word	0x2000000a
 80012ac:	2000056e 	.word	0x2000056e
 80012b0:	2000056c 	.word	0x2000056c
 80012b4:	20000572 	.word	0x20000572

080012b8 <SCORE_Task>:
	  }
}
void SCORE_Task(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	for(;;){
		if (ponk == 1){
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <SCORE_Task+0x60>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d119      	bne.n	80012f8 <SCORE_Task+0x40>
			score = score + 1;
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <SCORE_Task+0x64>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <SCORE_Task+0x64>)
 80012ce:	801a      	strh	r2, [r3, #0]
			osDelay(2000);
 80012d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012d4:	f008 fd9e 	bl	8009e14 <osDelay>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012de:	4810      	ldr	r0, [pc, #64]	; (8001320 <SCORE_Task+0x68>)
 80012e0:	f003 fa9e 	bl	8004820 <HAL_GPIO_WritePin>
			osDelay(2000);
 80012e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012e8:	f008 fd94 	bl	8009e14 <osDelay>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f2:	480b      	ldr	r0, [pc, #44]	; (8001320 <SCORE_Task+0x68>)
 80012f4:	f003 fa94 	bl	8004820 <HAL_GPIO_WritePin>
		}
		if (loose == 1){
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <SCORE_Task+0x6c>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d1dd      	bne.n	80012bc <SCORE_Task+0x4>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <SCORE_Task+0x68>)
 8001308:	f003 fa8a 	bl	8004820 <HAL_GPIO_WritePin>
			gameoverFlag = 1;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <SCORE_Task+0x70>)
 800130e:	2201      	movs	r2, #1
 8001310:	801a      	strh	r2, [r3, #0]
			GameOver();
 8001312:	f000 f8cb 	bl	80014ac <GameOver>
		if (ponk == 1){
 8001316:	e7d1      	b.n	80012bc <SCORE_Task+0x4>
 8001318:	2000056e 	.word	0x2000056e
 800131c:	20000570 	.word	0x20000570
 8001320:	40021800 	.word	0x40021800
 8001324:	20000572 	.word	0x20000572
 8001328:	20000576 	.word	0x20000576

0800132c <LCD_Task>:

		}
	}
}
void LCD_Task(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	for (;;)
	{
		    if (mode == 1){
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <LCD_Task+0x4c>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d1fb      	bne.n	8001330 <LCD_Task+0x4>
		    	BSP_LCD_Clear(LCD_COLOR_DARKBLUE);
 8001338:	4810      	ldr	r0, [pc, #64]	; (800137c <LCD_Task+0x50>)
 800133a:	f001 faf7 	bl	800292c <BSP_LCD_Clear>
		    	BSP_LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 800133e:	480f      	ldr	r0, [pc, #60]	; (800137c <LCD_Task+0x50>)
 8001340:	f001 faaa 	bl	8002898 <BSP_LCD_SetBackColor>
		    	sprintf (LCD_send,"score = %d",score,h);
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <LCD_Task+0x54>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <LCD_Task+0x58>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	490e      	ldr	r1, [pc, #56]	; (8001388 <LCD_Task+0x5c>)
 8001350:	480e      	ldr	r0, [pc, #56]	; (800138c <LCD_Task+0x60>)
 8001352:	f00d ff83 	bl	800f25c <siprintf>
		    	BSP_LCD_DisplayStringAtLine(1,LCD_send);
 8001356:	490d      	ldr	r1, [pc, #52]	; (800138c <LCD_Task+0x60>)
 8001358:	2001      	movs	r0, #1
 800135a:	f001 fc11 	bl	8002b80 <BSP_LCD_DisplayStringAtLine>
		    	BSP_LCD_FillCircle(RX,RY,high);
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <LCD_Task+0x64>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <LCD_Task+0x68>)
 8001364:	8811      	ldrh	r1, [r2, #0]
 8001366:	4a0c      	ldr	r2, [pc, #48]	; (8001398 <LCD_Task+0x6c>)
 8001368:	8812      	ldrh	r2, [r2, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fd48 	bl	8002e00 <BSP_LCD_FillCircle>
		    	Mode1();
 8001370:	f000 f814 	bl	800139c <Mode1>
		    if (mode == 1){
 8001374:	e7dc      	b.n	8001330 <LCD_Task+0x4>
 8001376:	bf00      	nop
 8001378:	2000000a 	.word	0x2000000a
 800137c:	ff000080 	.word	0xff000080
 8001380:	20000570 	.word	0x20000570
 8001384:	20000574 	.word	0x20000574
 8001388:	0800fd3c 	.word	0x0800fd3c
 800138c:	20000518 	.word	0x20000518
 8001390:	20000002 	.word	0x20000002
 8001394:	20000004 	.word	0x20000004
 8001398:	20000000 	.word	0x20000000

0800139c <Mode1>:
//		    	Mode2();
//		    }
	}
}
void Mode1(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	if (flag == 0){
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <Mode1+0x7c>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d112      	bne.n	80013ce <Mode1+0x32>
		high= high + x;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <Mode1+0x80>)
 80013aa:	881a      	ldrh	r2, [r3, #0]
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <Mode1+0x84>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <Mode1+0x80>)
 80013b6:	801a      	strh	r2, [r3, #0]
		inc = 1;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <Mode1+0x88>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	801a      	strh	r2, [r3, #0]
		if (high == 120){
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <Mode1+0x80>)
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	2b78      	cmp	r3, #120	; 0x78
 80013c4:	d119      	bne.n	80013fa <Mode1+0x5e>
			flag = 1;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <Mode1+0x7c>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	801a      	strh	r2, [r3, #0]
 80013cc:	e015      	b.n	80013fa <Mode1+0x5e>
		}
	}
	else if (flag == 1){
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <Mode1+0x7c>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d111      	bne.n	80013fa <Mode1+0x5e>
		high = high - x;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <Mode1+0x80>)
 80013d8:	881a      	ldrh	r2, [r3, #0]
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <Mode1+0x84>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <Mode1+0x80>)
 80013e4:	801a      	strh	r2, [r3, #0]
		inc = 0;
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <Mode1+0x88>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	801a      	strh	r2, [r3, #0]
		if (high == 20){
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <Mode1+0x80>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	2b14      	cmp	r3, #20
 80013f2:	d102      	bne.n	80013fa <Mode1+0x5e>
			flag = 0;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <Mode1+0x7c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	801a      	strh	r2, [r3, #0]
		}
	}
	osMessagePut(Queue02Handle, high, 0);
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <Mode1+0x8c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a07      	ldr	r2, [pc, #28]	; (800141c <Mode1+0x80>)
 8001400:	8812      	ldrh	r2, [r2, #0]
 8001402:	4611      	mov	r1, r2
 8001404:	2200      	movs	r2, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f008 fdcc 	bl	8009fa4 <osMessagePut>
	osDelay(100);
 800140c:	2064      	movs	r0, #100	; 0x64
 800140e:	f008 fd01 	bl	8009e14 <osDelay>
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000056c 	.word	0x2000056c
 800141c:	20000000 	.word	0x20000000
 8001420:	20000006 	.word	0x20000006
 8001424:	20000008 	.word	0x20000008
 8001428:	20000504 	.word	0x20000504

0800142c <USB_Task>:
	osMessagePut(Queue02Handle, high, 0);
	osDelay(100);
}

void USB_Task(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
	osSignalWait(0x1, 400);
 8001432:	463b      	mov	r3, r7
 8001434:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001438:	2101      	movs	r1, #1
 800143a:	4618      	mov	r0, r3
 800143c:	f008 fd3e 	bl	8009ebc <osSignalWait>

	osSignalSet(Task02Handle, 0x1);
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <USB_Task+0x68>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	4618      	mov	r0, r3
 8001448:	f008 fcf8 	bl	8009e3c <osSignalSet>
	for (;;)
	{

		if (mode == 1){
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <USB_Task+0x6c>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d107      	bne.n	8001464 <USB_Task+0x38>
			sprintf(USB_send,"high = %d\n",h);
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <USB_Task+0x70>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4911      	ldr	r1, [pc, #68]	; (80014a0 <USB_Task+0x74>)
 800145c:	4811      	ldr	r0, [pc, #68]	; (80014a4 <USB_Task+0x78>)
 800145e:	f00d fefd 	bl	800f25c <siprintf>
 8001462:	e00a      	b.n	800147a <USB_Task+0x4e>
		}
		else if (mode == 2){
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <USB_Task+0x6c>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d106      	bne.n	800147a <USB_Task+0x4e>
			sprintf(USB_send,"high = %d\n",RY);
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <USB_Task+0x7c>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	490b      	ldr	r1, [pc, #44]	; (80014a0 <USB_Task+0x74>)
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <USB_Task+0x78>)
 8001476:	f00d fef1 	bl	800f25c <siprintf>
		}
		CDC_Transmit_HS(USB_send,strlen(USB_send));
 800147a:	480a      	ldr	r0, [pc, #40]	; (80014a4 <USB_Task+0x78>)
 800147c:	f7fe feb8 	bl	80001f0 <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	b29b      	uxth	r3, r3
 8001484:	4619      	mov	r1, r3
 8001486:	4807      	ldr	r0, [pc, #28]	; (80014a4 <USB_Task+0x78>)
 8001488:	f00d fa8a 	bl	800e9a0 <CDC_Transmit_HS>
		osDelay(100);
 800148c:	2064      	movs	r0, #100	; 0x64
 800148e:	f008 fcc1 	bl	8009e14 <osDelay>
		if (mode == 1){
 8001492:	e7db      	b.n	800144c <USB_Task+0x20>
 8001494:	200004f0 	.word	0x200004f0
 8001498:	2000000a 	.word	0x2000000a
 800149c:	20000574 	.word	0x20000574
 80014a0:	0800fd48 	.word	0x0800fd48
 80014a4:	20000538 	.word	0x20000538
 80014a8:	20000004 	.word	0x20000004

080014ac <GameOver>:
	}
}

void GameOver(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
	char scoreText[20];
	sprintf(scoreText,"Your score:%d", score);
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <GameOver+0x60>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4915      	ldr	r1, [pc, #84]	; (8001510 <GameOver+0x64>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f00d fecd 	bl	800f25c <siprintf>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c8:	4812      	ldr	r0, [pc, #72]	; (8001514 <GameOver+0x68>)
 80014ca:	f003 f9a9 	bl	8004820 <HAL_GPIO_WritePin>
    BSP_LCD_Clear(LCD_COLOR_RED);
 80014ce:	4812      	ldr	r0, [pc, #72]	; (8001518 <GameOver+0x6c>)
 80014d0:	f001 fa2c 	bl	800292c <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80014d4:	4810      	ldr	r0, [pc, #64]	; (8001518 <GameOver+0x6c>)
 80014d6:	f001 f9df 	bl	8002898 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80014da:	f04f 30ff 	mov.w	r0, #4294967295
 80014de:	f001 f9c3 	bl	8002868 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(5,130, "GAME OVER", CENTER_MODE);
 80014e2:	2301      	movs	r3, #1
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <GameOver+0x70>)
 80014e6:	2182      	movs	r1, #130	; 0x82
 80014e8:	2005      	movs	r0, #5
 80014ea:	f001 fa8b 	bl	8002a04 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0,50,scoreText , CENTER_MODE);
 80014ee:	1d3a      	adds	r2, r7, #4
 80014f0:	2301      	movs	r3, #1
 80014f2:	2132      	movs	r1, #50	; 0x32
 80014f4:	2000      	movs	r0, #0
 80014f6:	f001 fa85 	bl	8002a04 <BSP_LCD_DisplayStringAt>
    osThreadTerminate(Task01Handle);
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <GameOver+0x74>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f008 fc7c 	bl	8009dfc <osThreadTerminate>
}
 8001504:	bf00      	nop
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000570 	.word	0x20000570
 8001510:	0800fd54 	.word	0x0800fd54
 8001514:	40021800 	.word	0x40021800
 8001518:	ffff0000 	.word	0xffff0000
 800151c:	0800fd64 	.word	0x0800fd64
 8001520:	200004ec 	.word	0x200004ec

08001524 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	LCD_Task();
 800152c:	f7ff fefe 	bl	800132c <LCD_Task>
  for(;;)
  {
    osDelay(1);
 8001530:	2001      	movs	r0, #1
 8001532:	f008 fc6f 	bl	8009e14 <osDelay>
 8001536:	e7fb      	b.n	8001530 <StartTask01+0xc>

08001538 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	GYRO_Task();
 8001540:	f7ff fd5a 	bl	8000ff8 <GYRO_Task>
  for(;;)
  {
    osDelay(1);
 8001544:	2001      	movs	r0, #1
 8001546:	f008 fc65 	bl	8009e14 <osDelay>
 800154a:	e7fb      	b.n	8001544 <StartTask02+0xc>

0800154c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	SCORE_Task();
 8001554:	f7ff feb0 	bl	80012b8 <SCORE_Task>
  for(;;)
  {
    osDelay(1);
 8001558:	2001      	movs	r0, #1
 800155a:	f008 fc5b 	bl	8009e14 <osDelay>
 800155e:	e7fb      	b.n	8001558 <StartTask03+0xc>

08001560 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	MX_USB_DEVICE_Init();
 8001568:	f00d f956 	bl	800e818 <MX_USB_DEVICE_Init>
	USB_Task();
 800156c:	f7ff ff5e 	bl	800142c <USB_Task>
  for(;;)
  {
    osDelay(1);
 8001570:	2001      	movs	r0, #1
 8001572:	f008 fc4f 	bl	8009e14 <osDelay>
 8001576:	e7fb      	b.n	8001570 <StartTask04+0x10>

08001578 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 8001580:	2001      	movs	r0, #1
 8001582:	f008 fc47 	bl	8009e14 <osDelay>
 8001586:	e7fb      	b.n	8001580 <StartTask05+0x8>

08001588 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d101      	bne.n	800159e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800159a:	f002 f8bb 	bl	8003714 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40001000 	.word	0x40001000

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <Error_Handler+0x8>
	...

080015b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_MspInit+0x54>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	4a11      	ldr	r2, [pc, #68]	; (800160c <HAL_MspInit+0x54>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015cc:	6453      	str	r3, [r2, #68]	; 0x44
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_MspInit+0x54>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_MspInit+0x54>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_MspInit+0x54>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_MspInit+0x54>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	210f      	movs	r1, #15
 80015fa:	f06f 0001 	mvn.w	r0, #1
 80015fe:	f002 f9a9 	bl	8003954 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800

08001610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <HAL_SPI_MspInit+0x94>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d134      	bne.n	800169c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <HAL_SPI_MspInit+0x98>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a1b      	ldr	r2, [pc, #108]	; (80016a8 <HAL_SPI_MspInit+0x98>)
 800163c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_SPI_MspInit+0x98>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_SPI_MspInit+0x98>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <HAL_SPI_MspInit+0x98>)
 8001658:	f043 0320 	orr.w	r3, r3, #32
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_SPI_MspInit+0x98>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800166a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800166e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800167c:	2305      	movs	r3, #5
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4809      	ldr	r0, [pc, #36]	; (80016ac <HAL_SPI_MspInit+0x9c>)
 8001688:	f002 fe12 	bl	80042b0 <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 5, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2105      	movs	r1, #5
 8001690:	2055      	movs	r0, #85	; 0x55
 8001692:	f002 f95f 	bl	8003954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8001696:	2055      	movs	r0, #85	; 0x55
 8001698:	f002 f978 	bl	800398c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40015000 	.word	0x40015000
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40021400 	.word	0x40021400

080016b0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_SPI_MspDeInit+0x38>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10d      	bne.n	80016de <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_SPI_MspDeInit+0x3c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <HAL_SPI_MspDeInit+0x3c>)
 80016c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80016ce:	f44f 7160 	mov.w	r1, #896	; 0x380
 80016d2:	4807      	ldr	r0, [pc, #28]	; (80016f0 <HAL_SPI_MspDeInit+0x40>)
 80016d4:	f002 ff98 	bl	8004608 <HAL_GPIO_DeInit>

    /* SPI5 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI5_IRQn);
 80016d8:	2055      	movs	r0, #85	; 0x55
 80016da:	f002 f965 	bl	80039a8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40015000 	.word	0x40015000
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40021400 	.word	0x40021400

080016f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08e      	sub	sp, #56	; 0x38
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <HAL_InitTick+0xe4>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	4a32      	ldr	r2, [pc, #200]	; (80017d8 <HAL_InitTick+0xe4>)
 800170e:	f043 0310 	orr.w	r3, r3, #16
 8001712:	6413      	str	r3, [r2, #64]	; 0x40
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <HAL_InitTick+0xe4>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001720:	f107 0210 	add.w	r2, r7, #16
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f005 fa40 	bl	8006bb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800173a:	f005 fa25 	bl	8006b88 <HAL_RCC_GetPCLK1Freq>
 800173e:	6378      	str	r0, [r7, #52]	; 0x34
 8001740:	e004      	b.n	800174c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001742:	f005 fa21 	bl	8006b88 <HAL_RCC_GetPCLK1Freq>
 8001746:	4603      	mov	r3, r0
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174e:	4a23      	ldr	r2, [pc, #140]	; (80017dc <HAL_InitTick+0xe8>)
 8001750:	fba2 2303 	umull	r2, r3, r2, r3
 8001754:	0c9b      	lsrs	r3, r3, #18
 8001756:	3b01      	subs	r3, #1
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800175a:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_InitTick+0xec>)
 800175c:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <HAL_InitTick+0xf0>)
 800175e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_InitTick+0xec>)
 8001762:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001766:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001768:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <HAL_InitTick+0xec>)
 800176a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_InitTick+0xec>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_InitTick+0xec>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_InitTick+0xec>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001780:	4817      	ldr	r0, [pc, #92]	; (80017e0 <HAL_InitTick+0xec>)
 8001782:	f006 fbc1 	bl	8007f08 <HAL_TIM_Base_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800178c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001790:	2b00      	cmp	r3, #0
 8001792:	d11b      	bne.n	80017cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001794:	4812      	ldr	r0, [pc, #72]	; (80017e0 <HAL_InitTick+0xec>)
 8001796:	f006 fc11 	bl	8007fbc <HAL_TIM_Base_Start_IT>
 800179a:	4603      	mov	r3, r0
 800179c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80017a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d111      	bne.n	80017cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017a8:	2036      	movs	r0, #54	; 0x36
 80017aa:	f002 f8ef 	bl	800398c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d808      	bhi.n	80017c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	2036      	movs	r0, #54	; 0x36
 80017ba:	f002 f8cb 	bl	8003954 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_InitTick+0xf4>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	e002      	b.n	80017cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3738      	adds	r7, #56	; 0x38
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40023800 	.word	0x40023800
 80017dc:	431bde83 	.word	0x431bde83
 80017e0:	20000578 	.word	0x20000578
 80017e4:	40001000 	.word	0x40001000
 80017e8:	2000008c 	.word	0x2000008c

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <NMI_Handler+0x4>

080017f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <MemManage_Handler+0x4>

080017fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <UsageFault_Handler+0x4>

0800180a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <TIM6_DAC_IRQHandler+0x10>)
 800181e:	f006 fc3d 	bl	800809c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000578 	.word	0x20000578

0800182c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <OTG_HS_IRQHandler+0x10>)
 8001832:	f003 fc2c 	bl	800508e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20005a54 	.word	0x20005a54

08001840 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <SPI5_IRQHandler+0x10>)
 8001846:	f006 f8fd 	bl	8007a44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000494 	.word	0x20000494

08001854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800185c:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <_sbrk+0x5c>)
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <_sbrk+0x60>)
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <_sbrk+0x64>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <_sbrk+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	429a      	cmp	r2, r3
 8001882:	d207      	bcs.n	8001894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001884:	f00d fd68 	bl	800f358 <__errno>
 8001888:	4603      	mov	r3, r0
 800188a:	220c      	movs	r2, #12
 800188c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	e009      	b.n	80018a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <_sbrk+0x64>)
 80018a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20030000 	.word	0x20030000
 80018b4:	00000400 	.word	0x00000400
 80018b8:	200005c0 	.word	0x200005c0
 80018bc:	200062a0 	.word	0x200062a0

080018c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <SystemInit+0x20>)
 80018c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <SystemInit+0x20>)
 80018cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800191c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018e8:	f7ff ffea 	bl	80018c0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018ec:	480c      	ldr	r0, [pc, #48]	; (8001920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ee:	490d      	ldr	r1, [pc, #52]	; (8001924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f0:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001904:	4c0a      	ldr	r4, [pc, #40]	; (8001930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001912:	f00d fd27 	bl	800f364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001916:	f7ff f991 	bl	8000c3c <main>
  bx  lr    
 800191a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800191c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001924:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001928:	080118dc 	.word	0x080118dc
  ldr r2, =_sbss
 800192c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001930:	200062a0 	.word	0x200062a0

08001934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC_IRQHandler>

08001936 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800193a:	f000 fc73 	bl	8002224 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800193e:	20ca      	movs	r0, #202	; 0xca
 8001940:	f000 f95d 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001944:	20c3      	movs	r0, #195	; 0xc3
 8001946:	f000 f967 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800194a:	2008      	movs	r0, #8
 800194c:	f000 f964 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001950:	2050      	movs	r0, #80	; 0x50
 8001952:	f000 f961 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001956:	20cf      	movs	r0, #207	; 0xcf
 8001958:	f000 f951 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800195c:	2000      	movs	r0, #0
 800195e:	f000 f95b 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001962:	20c1      	movs	r0, #193	; 0xc1
 8001964:	f000 f958 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001968:	2030      	movs	r0, #48	; 0x30
 800196a:	f000 f955 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800196e:	20ed      	movs	r0, #237	; 0xed
 8001970:	f000 f945 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001974:	2064      	movs	r0, #100	; 0x64
 8001976:	f000 f94f 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800197a:	2003      	movs	r0, #3
 800197c:	f000 f94c 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001980:	2012      	movs	r0, #18
 8001982:	f000 f949 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001986:	2081      	movs	r0, #129	; 0x81
 8001988:	f000 f946 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800198c:	20e8      	movs	r0, #232	; 0xe8
 800198e:	f000 f936 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001992:	2085      	movs	r0, #133	; 0x85
 8001994:	f000 f940 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001998:	2000      	movs	r0, #0
 800199a:	f000 f93d 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800199e:	2078      	movs	r0, #120	; 0x78
 80019a0:	f000 f93a 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80019a4:	20cb      	movs	r0, #203	; 0xcb
 80019a6:	f000 f92a 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80019aa:	2039      	movs	r0, #57	; 0x39
 80019ac:	f000 f934 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80019b0:	202c      	movs	r0, #44	; 0x2c
 80019b2:	f000 f931 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f000 f92e 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80019bc:	2034      	movs	r0, #52	; 0x34
 80019be:	f000 f92b 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80019c2:	2002      	movs	r0, #2
 80019c4:	f000 f928 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80019c8:	20f7      	movs	r0, #247	; 0xf7
 80019ca:	f000 f918 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80019ce:	2020      	movs	r0, #32
 80019d0:	f000 f922 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80019d4:	20ea      	movs	r0, #234	; 0xea
 80019d6:	f000 f912 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019da:	2000      	movs	r0, #0
 80019dc:	f000 f91c 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019e0:	2000      	movs	r0, #0
 80019e2:	f000 f919 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80019e6:	20b1      	movs	r0, #177	; 0xb1
 80019e8:	f000 f909 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f000 f913 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80019f2:	201b      	movs	r0, #27
 80019f4:	f000 f910 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80019f8:	20b6      	movs	r0, #182	; 0xb6
 80019fa:	f000 f900 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80019fe:	200a      	movs	r0, #10
 8001a00:	f000 f90a 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001a04:	20a2      	movs	r0, #162	; 0xa2
 8001a06:	f000 f907 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001a0a:	20c0      	movs	r0, #192	; 0xc0
 8001a0c:	f000 f8f7 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001a10:	2010      	movs	r0, #16
 8001a12:	f000 f901 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001a16:	20c1      	movs	r0, #193	; 0xc1
 8001a18:	f000 f8f1 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001a1c:	2010      	movs	r0, #16
 8001a1e:	f000 f8fb 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001a22:	20c5      	movs	r0, #197	; 0xc5
 8001a24:	f000 f8eb 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001a28:	2045      	movs	r0, #69	; 0x45
 8001a2a:	f000 f8f5 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001a2e:	2015      	movs	r0, #21
 8001a30:	f000 f8f2 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001a34:	20c7      	movs	r0, #199	; 0xc7
 8001a36:	f000 f8e2 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001a3a:	2090      	movs	r0, #144	; 0x90
 8001a3c:	f000 f8ec 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001a40:	2036      	movs	r0, #54	; 0x36
 8001a42:	f000 f8dc 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001a46:	20c8      	movs	r0, #200	; 0xc8
 8001a48:	f000 f8e6 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001a4c:	20f2      	movs	r0, #242	; 0xf2
 8001a4e:	f000 f8d6 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 f8e0 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001a58:	20b0      	movs	r0, #176	; 0xb0
 8001a5a:	f000 f8d0 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001a5e:	20c2      	movs	r0, #194	; 0xc2
 8001a60:	f000 f8da 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001a64:	20b6      	movs	r0, #182	; 0xb6
 8001a66:	f000 f8ca 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001a6a:	200a      	movs	r0, #10
 8001a6c:	f000 f8d4 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001a70:	20a7      	movs	r0, #167	; 0xa7
 8001a72:	f000 f8d1 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001a76:	2027      	movs	r0, #39	; 0x27
 8001a78:	f000 f8ce 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001a7c:	2004      	movs	r0, #4
 8001a7e:	f000 f8cb 	bl	8001c18 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001a82:	202a      	movs	r0, #42	; 0x2a
 8001a84:	f000 f8bb 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f000 f8c5 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f8c2 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f000 f8bf 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001a9a:	20ef      	movs	r0, #239	; 0xef
 8001a9c:	f000 f8bc 	bl	8001c18 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001aa0:	202b      	movs	r0, #43	; 0x2b
 8001aa2:	f000 f8ac 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f000 f8b6 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001aac:	2000      	movs	r0, #0
 8001aae:	f000 f8b3 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f000 f8b0 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001ab8:	203f      	movs	r0, #63	; 0x3f
 8001aba:	f000 f8ad 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001abe:	20f6      	movs	r0, #246	; 0xf6
 8001ac0:	f000 f89d 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f000 f8a7 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f000 f8a4 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001ad0:	2006      	movs	r0, #6
 8001ad2:	f000 f8a1 	bl	8001c18 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001ad6:	202c      	movs	r0, #44	; 0x2c
 8001ad8:	f000 f891 	bl	8001bfe <ili9341_WriteReg>
  LCD_Delay(200);
 8001adc:	20c8      	movs	r0, #200	; 0xc8
 8001ade:	f000 fc8f 	bl	8002400 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001ae2:	2026      	movs	r0, #38	; 0x26
 8001ae4:	f000 f88b 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f000 f895 	bl	8001c18 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001aee:	20e0      	movs	r0, #224	; 0xe0
 8001af0:	f000 f885 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001af4:	200f      	movs	r0, #15
 8001af6:	f000 f88f 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001afa:	2029      	movs	r0, #41	; 0x29
 8001afc:	f000 f88c 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001b00:	2024      	movs	r0, #36	; 0x24
 8001b02:	f000 f889 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001b06:	200c      	movs	r0, #12
 8001b08:	f000 f886 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001b0c:	200e      	movs	r0, #14
 8001b0e:	f000 f883 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001b12:	2009      	movs	r0, #9
 8001b14:	f000 f880 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001b18:	204e      	movs	r0, #78	; 0x4e
 8001b1a:	f000 f87d 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001b1e:	2078      	movs	r0, #120	; 0x78
 8001b20:	f000 f87a 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001b24:	203c      	movs	r0, #60	; 0x3c
 8001b26:	f000 f877 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001b2a:	2009      	movs	r0, #9
 8001b2c:	f000 f874 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001b30:	2013      	movs	r0, #19
 8001b32:	f000 f871 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001b36:	2005      	movs	r0, #5
 8001b38:	f000 f86e 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001b3c:	2017      	movs	r0, #23
 8001b3e:	f000 f86b 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001b42:	2011      	movs	r0, #17
 8001b44:	f000 f868 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f000 f865 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001b4e:	20e1      	movs	r0, #225	; 0xe1
 8001b50:	f000 f855 	bl	8001bfe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b54:	2000      	movs	r0, #0
 8001b56:	f000 f85f 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001b5a:	2016      	movs	r0, #22
 8001b5c:	f000 f85c 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001b60:	201b      	movs	r0, #27
 8001b62:	f000 f859 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001b66:	2004      	movs	r0, #4
 8001b68:	f000 f856 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001b6c:	2011      	movs	r0, #17
 8001b6e:	f000 f853 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001b72:	2007      	movs	r0, #7
 8001b74:	f000 f850 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001b78:	2031      	movs	r0, #49	; 0x31
 8001b7a:	f000 f84d 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001b7e:	2033      	movs	r0, #51	; 0x33
 8001b80:	f000 f84a 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001b84:	2042      	movs	r0, #66	; 0x42
 8001b86:	f000 f847 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001b8a:	2005      	movs	r0, #5
 8001b8c:	f000 f844 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001b90:	200c      	movs	r0, #12
 8001b92:	f000 f841 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001b96:	200a      	movs	r0, #10
 8001b98:	f000 f83e 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001b9c:	2028      	movs	r0, #40	; 0x28
 8001b9e:	f000 f83b 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001ba2:	202f      	movs	r0, #47	; 0x2f
 8001ba4:	f000 f838 	bl	8001c18 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001ba8:	200f      	movs	r0, #15
 8001baa:	f000 f835 	bl	8001c18 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001bae:	2011      	movs	r0, #17
 8001bb0:	f000 f825 	bl	8001bfe <ili9341_WriteReg>
  LCD_Delay(200);
 8001bb4:	20c8      	movs	r0, #200	; 0xc8
 8001bb6:	f000 fc23 	bl	8002400 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001bba:	2029      	movs	r0, #41	; 0x29
 8001bbc:	f000 f81f 	bl	8001bfe <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001bc0:	202c      	movs	r0, #44	; 0x2c
 8001bc2:	f000 f81c 	bl	8001bfe <ili9341_WriteReg>
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001bce:	f000 fb29 	bl	8002224 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	20d3      	movs	r0, #211	; 0xd3
 8001bd6:	f000 f82c 	bl	8001c32 <ili9341_ReadData>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b29b      	uxth	r3, r3
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001be6:	2029      	movs	r0, #41	; 0x29
 8001be8:	f000 f809 	bl	8001bfe <ili9341_WriteReg>
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001bf4:	2028      	movs	r0, #40	; 0x28
 8001bf6:	f000 f802 	bl	8001bfe <ili9341_WriteReg>
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fba4 	bl	8002358 <LCD_IO_WriteReg>
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fb75 	bl	8002314 <LCD_IO_WriteData>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	460a      	mov	r2, r1
 8001c3c:	80fb      	strh	r3, [r7, #6]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001c42:	797a      	ldrb	r2, [r7, #5]
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fba7 	bl	800239c <LCD_IO_ReadData>
 8001c4e:	4603      	mov	r3, r0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001c5c:	23f0      	movs	r3, #240	; 0xf0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001c6c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001c88:	f000 fbc6 	bl	8002418 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001c92:	f107 030f 	add.w	r3, r7, #15
 8001c96:	2201      	movs	r2, #1
 8001c98:	2120      	movs	r1, #32
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fc08 	bl	80024b0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	0a1b      	lsrs	r3, r3, #8
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001caa:	f107 030f 	add.w	r3, r7, #15
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2123      	movs	r1, #35	; 0x23
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fbfc 	bl	80024b0 <GYRO_IO_Write>
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001cd4:	f000 fba0 	bl	8002418 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001cd8:	1dfb      	adds	r3, r7, #7
 8001cda:	2201      	movs	r2, #1
 8001cdc:	210f      	movs	r1, #15
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fc18 	bl	8002514 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001cf4:	1dfb      	adds	r3, r7, #7
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2124      	movs	r1, #36	; 0x24
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fc0a 	bl	8002514 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	2124      	movs	r1, #36	; 0x24
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fbcd 	bl	80024b0 <GYRO_IO_Write>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001d32:	f107 030f 	add.w	r3, r7, #15
 8001d36:	2201      	movs	r2, #1
 8001d38:	2120      	movs	r1, #32
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 fbb8 	bl	80024b0 <GYRO_IO_Write>
}
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
 8001d56:	2300      	movs	r3, #0
 8001d58:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001d5a:	f107 030f 	add.w	r3, r7, #15
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2130      	movs	r1, #48	; 0x30
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 fbd6 	bl	8002514 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001d68:	f107 030e 	add.w	r3, r7, #14
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2122      	movs	r1, #34	; 0x22
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fbcf 	bl	8002514 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	121b      	asrs	r3, r3, #8
 8001d86:	b25a      	sxtb	r2, r3
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	f023 0320 	bic.w	r3, r3, #32
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	7bbb      	ldrb	r3, [r7, #14]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001daa:	f107 030f 	add.w	r3, r7, #15
 8001dae:	2201      	movs	r2, #1
 8001db0:	2130      	movs	r1, #48	; 0x30
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fb7c 	bl	80024b0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001db8:	f107 030e 	add.w	r3, r7, #14
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2122      	movs	r1, #34	; 0x22
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fb75 	bl	80024b0 <GYRO_IO_Write>
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b084      	sub	sp, #16
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001dd8:	f107 030f 	add.w	r3, r7, #15
 8001ddc:	2201      	movs	r2, #1
 8001dde:	2122      	movs	r1, #34	; 0x22
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fb97 	bl	8002514 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10a      	bne.n	8001e02 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e00c      	b.n	8001e1c <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d109      	bne.n	8001e1c <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	f023 0308 	bic.w	r3, r3, #8
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	f043 0308 	orr.w	r3, r3, #8
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001e1c:	f107 030f 	add.w	r3, r7, #15
 8001e20:	2201      	movs	r2, #1
 8001e22:	2122      	movs	r1, #34	; 0x22
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 fb43 	bl	80024b0 <GYRO_IO_Write>
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001e3c:	f107 030f 	add.w	r3, r7, #15
 8001e40:	2201      	movs	r2, #1
 8001e42:	2122      	movs	r1, #34	; 0x22
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 fb65 	bl	8002514 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d107      	bne.n	8001e60 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e009      	b.n	8001e74 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d106      	bne.n	8001e74 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	f023 0308 	bic.w	r3, r3, #8
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001e74:	f107 030f 	add.w	r3, r7, #15
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2122      	movs	r1, #34	; 0x22
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fb17 	bl	80024b0 <GYRO_IO_Write>
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001e94:	f107 030f 	add.w	r3, r7, #15
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2121      	movs	r1, #33	; 0x21
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 fb39 	bl	8002514 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001eb6:	f107 030f 	add.w	r3, r7, #15
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2121      	movs	r1, #33	; 0x21
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 faf6 	bl	80024b0 <GYRO_IO_Write>
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001ed6:	f107 030f 	add.w	r3, r7, #15
 8001eda:	2201      	movs	r2, #1
 8001edc:	2124      	movs	r1, #36	; 0x24
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 fb18 	bl	8002514 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	f023 0310 	bic.w	r3, r3, #16
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001ef8:	f107 030f 	add.w	r3, r7, #15
 8001efc:	2201      	movs	r2, #1
 8001efe:	2124      	movs	r1, #36	; 0x24
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fad5 	bl	80024b0 <GYRO_IO_Write>
}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001f38:	f107 030f 	add.w	r3, r7, #15
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2123      	movs	r1, #35	; 0x23
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fae7 	bl	8002514 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001f46:	f107 0318 	add.w	r3, r7, #24
 8001f4a:	2206      	movs	r2, #6
 8001f4c:	2128      	movs	r1, #40	; 0x28
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fae0 	bl	8002514 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d123      	bne.n	8001fa6 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
 8001f62:	e01c      	b.n	8001f9e <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	3301      	adds	r3, #1
 8001f6a:	3328      	adds	r3, #40	; 0x28
 8001f6c:	443b      	add	r3, r7
 8001f6e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	3328      	adds	r3, #40	; 0x28
 8001f7e:	443b      	add	r3, r7
 8001f80:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	b21a      	sxth	r2, r3
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	3328      	adds	r3, #40	; 0x28
 8001f92:	443b      	add	r3, r7
 8001f94:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	623b      	str	r3, [r7, #32]
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	dddf      	ble.n	8001f64 <L3GD20_ReadXYZAngRate+0x54>
 8001fa4:	e022      	b.n	8001fec <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]
 8001faa:	e01c      	b.n	8001fe6 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	3328      	adds	r3, #40	; 0x28
 8001fb2:	443b      	add	r3, r7
 8001fb4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	3328      	adds	r3, #40	; 0x28
 8001fc6:	443b      	add	r3, r7
 8001fc8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	3328      	adds	r3, #40	; 0x28
 8001fda:	443b      	add	r3, r7
 8001fdc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	623b      	str	r3, [r7, #32]
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	dddf      	ble.n	8001fac <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	d00c      	beq.n	8002010 <L3GD20_ReadXYZAngRate+0x100>
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	dc0d      	bgt.n	8002016 <L3GD20_ReadXYZAngRate+0x106>
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <L3GD20_ReadXYZAngRate+0xf4>
 8001ffe:	2b10      	cmp	r3, #16
 8002000:	d003      	beq.n	800200a <L3GD20_ReadXYZAngRate+0xfa>
 8002002:	e008      	b.n	8002016 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <L3GD20_ReadXYZAngRate+0x14c>)
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002008:	e005      	b.n	8002016 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <L3GD20_ReadXYZAngRate+0x150>)
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800200e:	e002      	b.n	8002016 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <L3GD20_ReadXYZAngRate+0x154>)
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002014:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
 800201a:	e016      	b.n	800204a <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	3328      	adds	r3, #40	; 0x28
 8002022:	443b      	add	r3, r7
 8002024:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8002028:	ee07 3a90 	vmov	s15, r3
 800202c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800203c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002040:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	3301      	adds	r3, #1
 8002048:	623b      	str	r3, [r7, #32]
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	2b02      	cmp	r3, #2
 800204e:	dde5      	ble.n	800201c <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3728      	adds	r7, #40	; 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	410c0000 	.word	0x410c0000
 8002060:	418c0000 	.word	0x418c0000
 8002064:	428c0000 	.word	0x428c0000

08002068 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800206c:	4819      	ldr	r0, [pc, #100]	; (80020d4 <SPIx_Init+0x6c>)
 800206e:	f005 fde7 	bl	8007c40 <HAL_SPI_GetState>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d12b      	bne.n	80020d0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <SPIx_Init+0x6c>)
 800207a:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <SPIx_Init+0x70>)
 800207c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <SPIx_Init+0x6c>)
 8002080:	2218      	movs	r2, #24
 8002082:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <SPIx_Init+0x6c>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800208a:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <SPIx_Init+0x6c>)
 800208c:	2200      	movs	r2, #0
 800208e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <SPIx_Init+0x6c>)
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <SPIx_Init+0x6c>)
 8002098:	2200      	movs	r2, #0
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <SPIx_Init+0x6c>)
 800209e:	2207      	movs	r2, #7
 80020a0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <SPIx_Init+0x6c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <SPIx_Init+0x6c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <SPIx_Init+0x6c>)
 80020b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <SPIx_Init+0x6c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <SPIx_Init+0x6c>)
 80020be:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020c2:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <SPIx_Init+0x6c>)
 80020c6:	f000 f873 	bl	80021b0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80020ca:	4802      	ldr	r0, [pc, #8]	; (80020d4 <SPIx_Init+0x6c>)
 80020cc:	f004 fffd 	bl	80070ca <HAL_SPI_Init>
  }
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200005c4 	.word	0x200005c4
 80020d8:	40015000 	.word	0x40015000

080020dc <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <SPIx_Read+0x38>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f107 0108 	add.w	r1, r7, #8
 80020f6:	4808      	ldr	r0, [pc, #32]	; (8002118 <SPIx_Read+0x3c>)
 80020f8:	f005 f9db 	bl	80074b2 <HAL_SPI_Receive>
 80020fc:	4603      	mov	r3, r0
 80020fe:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002106:	f000 f847 	bl	8002198 <SPIx_Error>
  }

  return readvalue;
 800210a:	68bb      	ldr	r3, [r7, #8]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	2000007c 	.word	0x2000007c
 8002118:	200005c4 	.word	0x200005c4

0800211c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <SPIx_Write+0x34>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	1db9      	adds	r1, r7, #6
 8002130:	2201      	movs	r2, #1
 8002132:	4808      	ldr	r0, [pc, #32]	; (8002154 <SPIx_Write+0x38>)
 8002134:	f005 f87a 	bl	800722c <HAL_SPI_Transmit>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002142:	f000 f829 	bl	8002198 <SPIx_Error>
  }
}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000007c 	.word	0x2000007c
 8002154:	200005c4 	.word	0x200005c4

08002158 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af02      	add	r7, sp, #8
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]

  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *) &Byte, (uint8_t *) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8002166:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <SPIx_WriteRead+0x38>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f107 020f 	add.w	r2, r7, #15
 800216e:	1df9      	adds	r1, r7, #7
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2301      	movs	r3, #1
 8002174:	4807      	ldr	r0, [pc, #28]	; (8002194 <SPIx_WriteRead+0x3c>)
 8002176:	f005 fab4 	bl	80076e2 <HAL_SPI_TransmitReceive>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002180:	f000 f80a 	bl	8002198 <SPIx_Error>
  }

  return receivedbyte;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2000007c 	.word	0x2000007c
 8002194:	200005c4 	.word	0x200005c4

08002198 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800219c:	4803      	ldr	r0, [pc, #12]	; (80021ac <SPIx_Error+0x14>)
 800219e:	f005 f81d 	bl	80071dc <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80021a2:	f7ff ff61 	bl	8002068 <SPIx_Init>
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200005c4 	.word	0x200005c4

080021b0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08a      	sub	sp, #40	; 0x28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	4b17      	ldr	r3, [pc, #92]	; (800221c <SPIx_MspInit+0x6c>)
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	4a16      	ldr	r2, [pc, #88]	; (800221c <SPIx_MspInit+0x6c>)
 80021c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c6:	6453      	str	r3, [r2, #68]	; 0x44
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <SPIx_MspInit+0x6c>)
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <SPIx_MspInit+0x6c>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	4a0f      	ldr	r2, [pc, #60]	; (800221c <SPIx_MspInit+0x6c>)
 80021de:	f043 0320 	orr.w	r3, r3, #32
 80021e2:	6313      	str	r3, [r2, #48]	; 0x30
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <SPIx_MspInit+0x6c>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80021f0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80021f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80021fa:	2302      	movs	r3, #2
 80021fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80021fe:	2301      	movs	r3, #1
 8002200:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002202:	2305      	movs	r3, #5
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	4804      	ldr	r0, [pc, #16]	; (8002220 <SPIx_MspInit+0x70>)
 800220e:	f002 f84f 	bl	80042b0 <HAL_GPIO_Init>
}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40021400 	.word	0x40021400

08002224 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 800222a:	4b36      	ldr	r3, [pc, #216]	; (8002304 <LCD_IO_Init+0xe0>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d164      	bne.n	80022fc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002232:	4b34      	ldr	r3, [pc, #208]	; (8002304 <LCD_IO_Init+0xe0>)
 8002234:	2201      	movs	r2, #1
 8002236:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	4b32      	ldr	r3, [pc, #200]	; (8002308 <LCD_IO_Init+0xe4>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	4a31      	ldr	r2, [pc, #196]	; (8002308 <LCD_IO_Init+0xe4>)
 8002242:	f043 0308 	orr.w	r3, r3, #8
 8002246:	6313      	str	r3, [r2, #48]	; 0x30
 8002248:	4b2f      	ldr	r3, [pc, #188]	; (8002308 <LCD_IO_Init+0xe4>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002258:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800225a:	2301      	movs	r3, #1
 800225c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002262:	2302      	movs	r3, #2
 8002264:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	4619      	mov	r1, r3
 800226c:	4827      	ldr	r0, [pc, #156]	; (800230c <LCD_IO_Init+0xe8>)
 800226e:	f002 f81f 	bl	80042b0 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <LCD_IO_Init+0xe4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a23      	ldr	r2, [pc, #140]	; (8002308 <LCD_IO_Init+0xe4>)
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b21      	ldr	r3, [pc, #132]	; (8002308 <LCD_IO_Init+0xe4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800228e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002292:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002294:	2301      	movs	r3, #1
 8002296:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800229c:	2302      	movs	r3, #2
 800229e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	4619      	mov	r1, r3
 80022a6:	4819      	ldr	r0, [pc, #100]	; (800230c <LCD_IO_Init+0xe8>)
 80022a8:	f002 f802 	bl	80042b0 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80022ac:	2300      	movs	r3, #0
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <LCD_IO_Init+0xe4>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	4a14      	ldr	r2, [pc, #80]	; (8002308 <LCD_IO_Init+0xe4>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6313      	str	r3, [r2, #48]	; 0x30
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <LCD_IO_Init+0xe4>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80022c8:	2304      	movs	r3, #4
 80022ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80022cc:	2301      	movs	r3, #1
 80022ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80022d4:	2302      	movs	r3, #2
 80022d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80022d8:	f107 030c 	add.w	r3, r7, #12
 80022dc:	4619      	mov	r1, r3
 80022de:	480c      	ldr	r0, [pc, #48]	; (8002310 <LCD_IO_Init+0xec>)
 80022e0:	f001 ffe6 	bl	80042b0 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80022e4:	2200      	movs	r2, #0
 80022e6:	2104      	movs	r1, #4
 80022e8:	4809      	ldr	r0, [pc, #36]	; (8002310 <LCD_IO_Init+0xec>)
 80022ea:	f002 fa99 	bl	8004820 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80022ee:	2201      	movs	r2, #1
 80022f0:	2104      	movs	r1, #4
 80022f2:	4807      	ldr	r0, [pc, #28]	; (8002310 <LCD_IO_Init+0xec>)
 80022f4:	f002 fa94 	bl	8004820 <HAL_GPIO_WritePin>

    SPIx_Init();
 80022f8:	f7ff feb6 	bl	8002068 <SPIx_Init>
  }
}
 80022fc:	bf00      	nop
 80022fe:	3720      	adds	r7, #32
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	2000061c 	.word	0x2000061c
 8002308:	40023800 	.word	0x40023800
 800230c:	40020c00 	.word	0x40020c00
 8002310:	40020800 	.word	0x40020800

08002314 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800231e:	2201      	movs	r2, #1
 8002320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002324:	480a      	ldr	r0, [pc, #40]	; (8002350 <LCD_IO_WriteData+0x3c>)
 8002326:	f002 fa7b 	bl	8004820 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800232a:	2200      	movs	r2, #0
 800232c:	2104      	movs	r1, #4
 800232e:	4809      	ldr	r0, [pc, #36]	; (8002354 <LCD_IO_WriteData+0x40>)
 8002330:	f002 fa76 	bl	8004820 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fef0 	bl	800211c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800233c:	2201      	movs	r2, #1
 800233e:	2104      	movs	r1, #4
 8002340:	4804      	ldr	r0, [pc, #16]	; (8002354 <LCD_IO_WriteData+0x40>)
 8002342:	f002 fa6d 	bl	8004820 <HAL_GPIO_WritePin>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40020c00 	.word	0x40020c00
 8002354:	40020800 	.word	0x40020800

08002358 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002362:	2200      	movs	r2, #0
 8002364:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002368:	480a      	ldr	r0, [pc, #40]	; (8002394 <LCD_IO_WriteReg+0x3c>)
 800236a:	f002 fa59 	bl	8004820 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800236e:	2200      	movs	r2, #0
 8002370:	2104      	movs	r1, #4
 8002372:	4809      	ldr	r0, [pc, #36]	; (8002398 <LCD_IO_WriteReg+0x40>)
 8002374:	f002 fa54 	bl	8004820 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	b29b      	uxth	r3, r3
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fecd 	bl	800211c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002382:	2201      	movs	r2, #1
 8002384:	2104      	movs	r1, #4
 8002386:	4804      	ldr	r0, [pc, #16]	; (8002398 <LCD_IO_WriteReg+0x40>)
 8002388:	f002 fa4a 	bl	8004820 <HAL_GPIO_WritePin>
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40020c00 	.word	0x40020c00
 8002398:	40020800 	.word	0x40020800

0800239c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	460a      	mov	r2, r1
 80023a6:	80fb      	strh	r3, [r7, #6]
 80023a8:	4613      	mov	r3, r2
 80023aa:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80023b0:	2200      	movs	r2, #0
 80023b2:	2104      	movs	r1, #4
 80023b4:	4810      	ldr	r0, [pc, #64]	; (80023f8 <LCD_IO_ReadData+0x5c>)
 80023b6:	f002 fa33 	bl	8004820 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80023ba:	2200      	movs	r2, #0
 80023bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023c0:	480e      	ldr	r0, [pc, #56]	; (80023fc <LCD_IO_ReadData+0x60>)
 80023c2:	f002 fa2d 	bl	8004820 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fea7 	bl	800211c <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 80023ce:	797b      	ldrb	r3, [r7, #5]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fe83 	bl	80020dc <SPIx_Read>
 80023d6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80023d8:	2201      	movs	r2, #1
 80023da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023de:	4807      	ldr	r0, [pc, #28]	; (80023fc <LCD_IO_ReadData+0x60>)
 80023e0:	f002 fa1e 	bl	8004820 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80023e4:	2201      	movs	r2, #1
 80023e6:	2104      	movs	r1, #4
 80023e8:	4803      	ldr	r0, [pc, #12]	; (80023f8 <LCD_IO_ReadData+0x5c>)
 80023ea:	f002 fa19 	bl	8004820 <HAL_GPIO_WritePin>

  return readvalue;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40020800 	.word	0x40020800
 80023fc:	40020c00 	.word	0x40020c00

08002400 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f001 f9a3 	bl	8003754 <HAL_Delay>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <GYRO_IO_Init+0x8c>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <GYRO_IO_Init+0x8c>)
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <GYRO_IO_Init+0x8c>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800243a:	2302      	movs	r3, #2
 800243c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800243e:	2301      	movs	r3, #1
 8002440:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8002446:	2301      	movs	r3, #1
 8002448:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800244a:	f107 030c 	add.w	r3, r7, #12
 800244e:	4619      	mov	r1, r3
 8002450:	4815      	ldr	r0, [pc, #84]	; (80024a8 <GYRO_IO_Init+0x90>)
 8002452:	f001 ff2d 	bl	80042b0 <HAL_GPIO_Init>

  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8002456:	2201      	movs	r2, #1
 8002458:	2102      	movs	r1, #2
 800245a:	4813      	ldr	r0, [pc, #76]	; (80024a8 <GYRO_IO_Init+0x90>)
 800245c:	f002 f9e0 	bl	8004820 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002460:	2300      	movs	r3, #0
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <GYRO_IO_Init+0x8c>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <GYRO_IO_Init+0x8c>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6313      	str	r3, [r2, #48]	; 0x30
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <GYRO_IO_Init+0x8c>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800247c:	2306      	movs	r3, #6
 800247e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002484:	2302      	movs	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	4619      	mov	r1, r3
 8002492:	4806      	ldr	r0, [pc, #24]	; (80024ac <GYRO_IO_Init+0x94>)
 8002494:	f001 ff0c 	bl	80042b0 <HAL_GPIO_Init>

  SPIx_Init();
 8002498:	f7ff fde6 	bl	8002068 <SPIx_Init>
}
 800249c:	bf00      	nop
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020800 	.word	0x40020800
 80024ac:	40020000 	.word	0x40020000

080024b0 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	70fb      	strb	r3, [r7, #3]
 80024bc:	4613      	mov	r3, r2
 80024be:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 80024c0:	883b      	ldrh	r3, [r7, #0]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d903      	bls.n	80024ce <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024cc:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80024ce:	2200      	movs	r2, #0
 80024d0:	2102      	movs	r1, #2
 80024d2:	480f      	ldr	r0, [pc, #60]	; (8002510 <GYRO_IO_Write+0x60>)
 80024d4:	f002 f9a4 	bl	8004820 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fe3c 	bl	8002158 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 80024e0:	e00a      	b.n	80024f8 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fe36 	bl	8002158 <SPIx_WriteRead>
    NumByteToWrite--;
 80024ec:	883b      	ldrh	r3, [r7, #0]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3301      	adds	r3, #1
 80024f6:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 80024f8:	883b      	ldrh	r3, [r7, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f1      	bne.n	80024e2 <GYRO_IO_Write+0x32>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 80024fe:	2201      	movs	r2, #1
 8002500:	2102      	movs	r1, #2
 8002502:	4803      	ldr	r0, [pc, #12]	; (8002510 <GYRO_IO_Write+0x60>)
 8002504:	f002 f98c 	bl	8004820 <HAL_GPIO_WritePin>
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40020800 	.word	0x40020800

08002514 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	70fb      	strb	r3, [r7, #3]
 8002520:	4613      	mov	r3, r2
 8002522:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8002524:	883b      	ldrh	r3, [r7, #0]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d904      	bls.n	8002534 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002530:	70fb      	strb	r3, [r7, #3]
 8002532:	e003      	b.n	800253c <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800253a:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800253c:	2200      	movs	r2, #0
 800253e:	2102      	movs	r1, #2
 8002540:	4810      	ldr	r0, [pc, #64]	; (8002584 <GYRO_IO_Read+0x70>)
 8002542:	f002 f96d 	bl	8004820 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fe05 	bl	8002158 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 800254e:	e00c      	b.n	800256a <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002550:	2000      	movs	r0, #0
 8002552:	f7ff fe01 	bl	8002158 <SPIx_WriteRead>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800255e:	883b      	ldrh	r3, [r7, #0]
 8002560:	3b01      	subs	r3, #1
 8002562:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3301      	adds	r3, #1
 8002568:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 800256a:	883b      	ldrh	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ef      	bne.n	8002550 <GYRO_IO_Read+0x3c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8002570:	2201      	movs	r2, #1
 8002572:	2102      	movs	r1, #2
 8002574:	4803      	ldr	r0, [pc, #12]	; (8002584 <GYRO_IO_Read+0x70>)
 8002576:	f002 f953 	bl	8004820 <HAL_GPIO_WritePin>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40020800 	.word	0x40020800

08002588 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002592:	2300      	movs	r3, #0
 8002594:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0, 0};
 8002596:	2300      	movs	r3, #0
 8002598:	703b      	strb	r3, [r7, #0]
 800259a:	2300      	movs	r3, #0
 800259c:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <BSP_GYRO_Init+0xc4>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4798      	blx	r3
 80025a4:	4603      	mov	r3, r0
 80025a6:	2bd4      	cmp	r3, #212	; 0xd4
 80025a8:	d005      	beq.n	80025b6 <BSP_GYRO_Init+0x2e>
 80025aa:	4b28      	ldr	r3, [pc, #160]	; (800264c <BSP_GYRO_Init+0xc4>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	4798      	blx	r3
 80025b0:	4603      	mov	r3, r0
 80025b2:	2bd5      	cmp	r3, #213	; 0xd5
 80025b4:	d145      	bne.n	8002642 <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80025b6:	4b26      	ldr	r3, [pc, #152]	; (8002650 <BSP_GYRO_Init+0xc8>)
 80025b8:	4a24      	ldr	r2, [pc, #144]	; (800264c <BSP_GYRO_Init+0xc4>)
 80025ba:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80025bc:	2308      	movs	r3, #8
 80025be:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80025c0:	2300      	movs	r3, #0
 80025c2:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80025c4:	2307      	movs	r3, #7
 80025c6:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80025c8:	2330      	movs	r3, #48	; 0x30
 80025ca:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80025cc:	2300      	movs	r3, #0
 80025ce:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80025d0:	2300      	movs	r3, #0
 80025d2:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80025d4:	2310      	movs	r3, #16
 80025d6:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025d8:	793a      	ldrb	r2, [r7, #4]
 80025da:	797b      	ldrb	r3, [r7, #5]
 80025dc:	4313      	orrs	r3, r2
 80025de:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80025e0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025e2:	4313      	orrs	r3, r2
 80025e4:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80025e6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80025e8:	4313      	orrs	r3, r2
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025ee:	7a3a      	ldrb	r2, [r7, #8]
 80025f0:	7a7b      	ldrb	r3, [r7, #9]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	b2da      	uxtb	r2, r3
                        Gyro_InitStructure.Full_Scale) << 8);
 80025f6:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80025f8:	4313      	orrs	r3, r2
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	b29a      	uxth	r2, r3
 8002602:	89bb      	ldrh	r3, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <BSP_GYRO_Init+0xc8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	89ba      	ldrh	r2, [r7, #12]
 8002610:	4610      	mov	r0, r2
 8002612:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002614:	2300      	movs	r3, #0
 8002616:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002618:	2300      	movs	r3, #0
 800261a:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 800261c:	783a      	ldrb	r2, [r7, #0]
                      Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800261e:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 8002620:	4313      	orrs	r3, r2
 8002622:	b2db      	uxtb	r3, r3
 8002624:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <BSP_GYRO_Init+0xc8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	89ba      	ldrh	r2, [r7, #12]
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	4610      	mov	r0, r2
 8002632:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <BSP_GYRO_Init+0xc8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	2010      	movs	r0, #16
 800263c:	4798      	blx	r3

    ret = GYRO_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000048 	.word	0x20000048
 8002650:	20000620 	.word	0x20000620

08002654 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <BSP_GYRO_GetXYZ+0x24>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	2b00      	cmp	r3, #0
 8002664:	d004      	beq.n	8002670 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <BSP_GYRO_GetXYZ+0x24>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
  }
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000620 	.word	0x20000620

0800267c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <BSP_LCD_Init+0xbc>)
 8002682:	4a2e      	ldr	r2, [pc, #184]	; (800273c <BSP_LCD_Init+0xc0>)
 8002684:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002686:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <BSP_LCD_Init+0xbc>)
 8002688:	2209      	movs	r2, #9
 800268a:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800268c:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <BSP_LCD_Init+0xbc>)
 800268e:	2201      	movs	r2, #1
 8002690:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002692:	4b29      	ldr	r3, [pc, #164]	; (8002738 <BSP_LCD_Init+0xbc>)
 8002694:	221d      	movs	r2, #29
 8002696:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002698:	4b27      	ldr	r3, [pc, #156]	; (8002738 <BSP_LCD_Init+0xbc>)
 800269a:	2203      	movs	r2, #3
 800269c:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <BSP_LCD_Init+0xbc>)
 80026a0:	f240 120d 	movw	r2, #269	; 0x10d
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <BSP_LCD_Init+0xbc>)
 80026a8:	f240 1243 	movw	r2, #323	; 0x143
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 80026ae:	4b22      	ldr	r3, [pc, #136]	; (8002738 <BSP_LCD_Init+0xbc>)
 80026b0:	f240 1217 	movw	r2, #279	; 0x117
 80026b4:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <BSP_LCD_Init+0xbc>)
 80026b8:	f240 1247 	movw	r2, #327	; 0x147
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 80026be:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <BSP_LCD_Init+0xbc>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 80026c6:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <BSP_LCD_Init+0xbc>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <BSP_LCD_Init+0xbc>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <BSP_LCD_Init+0xc4>)
 80026d8:	2208      	movs	r2, #8
 80026da:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <BSP_LCD_Init+0xc4>)
 80026de:	22c0      	movs	r2, #192	; 0xc0
 80026e0:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <BSP_LCD_Init+0xc4>)
 80026e4:	2204      	movs	r2, #4
 80026e6:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80026e8:	4b15      	ldr	r3, [pc, #84]	; (8002740 <BSP_LCD_Init+0xc4>)
 80026ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ee:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80026f0:	4813      	ldr	r0, [pc, #76]	; (8002740 <BSP_LCD_Init+0xc4>)
 80026f2:	f004 fa8f 	bl	8006c14 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <BSP_LCD_Init+0xbc>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80026fc:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <BSP_LCD_Init+0xbc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <BSP_LCD_Init+0xbc>)
 8002704:	2200      	movs	r2, #0
 8002706:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <BSP_LCD_Init+0xbc>)
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 800270e:	f000 fc27 	bl	8002f60 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8002712:	4809      	ldr	r0, [pc, #36]	; (8002738 <BSP_LCD_Init+0xbc>)
 8002714:	f002 f89e 	bl	8004854 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <BSP_LCD_Init+0xc8>)
 800271a:	4a0b      	ldr	r2, [pc, #44]	; (8002748 <BSP_LCD_Init+0xcc>)
 800271c:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <BSP_LCD_Init+0xc8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002726:	f000 fe09 	bl	800333c <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800272a:	4808      	ldr	r0, [pc, #32]	; (800274c <BSP_LCD_Init+0xd0>)
 800272c:	f000 f8ce 	bl	80028cc <BSP_LCD_SetFont>

  return LCD_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000624 	.word	0x20000624
 800273c:	40016800 	.word	0x40016800
 8002740:	2000070c 	.word	0x2000070c
 8002744:	20000758 	.word	0x20000758
 8002748:	20000010 	.word	0x20000010
 800274c:	20000080 	.word	0x20000080

08002750 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <BSP_LCD_GetXSize+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	4798      	blx	r3
 800275c:	4603      	mov	r3, r0
}
 800275e:	4618      	mov	r0, r3
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000758 	.word	0x20000758

08002768 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <BSP_LCD_GetYSize+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	4798      	blx	r3
 8002774:	4603      	mov	r3, r0
}
 8002776:	4618      	mov	r0, r3
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000758 	.word	0x20000758

08002780 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b090      	sub	sp, #64	; 0x40
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002790:	f7ff ffde 	bl	8002750 <BSP_LCD_GetXSize>
 8002794:	4603      	mov	r3, r0
 8002796:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 800279c:	f7ff ffe4 	bl	8002768 <BSP_LCD_GetYSize>
 80027a0:	4603      	mov	r3, r0
 80027a2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80027ac:	23ff      	movs	r3, #255	; 0xff
 80027ae:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80027c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80027cc:	2307      	movs	r3, #7
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80027d0:	f7ff ffbe 	bl	8002750 <BSP_LCD_GetXSize>
 80027d4:	4603      	mov	r3, r0
 80027d6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80027d8:	f7ff ffc6 	bl	8002768 <BSP_LCD_GetYSize>
 80027dc:	4603      	mov	r3, r0
 80027de:	63bb      	str	r3, [r7, #56]	; 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 80027e0:	88fa      	ldrh	r2, [r7, #6]
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	4619      	mov	r1, r3
 80027e8:	4814      	ldr	r0, [pc, #80]	; (800283c <BSP_LCD_LayerDefaultInit+0xbc>)
 80027ea:	f002 f90d 	bl	8004a08 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80027ee:	88fa      	ldrh	r2, [r7, #6]
 80027f0:	4913      	ldr	r1, [pc, #76]	; (8002840 <BSP_LCD_LayerDefaultInit+0xc0>)
 80027f2:	4613      	mov	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3304      	adds	r3, #4
 80027fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002802:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002804:	88fa      	ldrh	r2, [r7, #6]
 8002806:	490e      	ldr	r1, [pc, #56]	; (8002840 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002808:	4613      	mov	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	3308      	adds	r3, #8
 8002814:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002816:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8002818:	88fa      	ldrh	r2, [r7, #6]
 800281a:	4909      	ldr	r1, [pc, #36]	; (8002840 <BSP_LCD_LayerDefaultInit+0xc0>)
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800282a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800282c:	4803      	ldr	r0, [pc, #12]	; (800283c <BSP_LCD_LayerDefaultInit+0xbc>)
 800282e:	f002 f929 	bl	8004a84 <HAL_LTDC_EnableDither>
}
 8002832:	bf00      	nop
 8002834:	3740      	adds	r7, #64	; 0x40
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000624 	.word	0x20000624
 8002840:	20000740 	.word	0x20000740
 8002844:	20000080 	.word	0x20000080

08002848 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <BSP_LCD_SelectLayer+0x1c>)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6013      	str	r3, [r2, #0]
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	2000073c 	.word	0x2000073c

08002868 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002870:	4b07      	ldr	r3, [pc, #28]	; (8002890 <BSP_LCD_SetTextColor+0x28>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4907      	ldr	r1, [pc, #28]	; (8002894 <BSP_LCD_SetTextColor+0x2c>)
 8002876:	4613      	mov	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	601a      	str	r2, [r3, #0]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	2000073c 	.word	0x2000073c
 8002894:	20000740 	.word	0x20000740

08002898 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <BSP_LCD_SetBackColor+0x2c>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4908      	ldr	r1, [pc, #32]	; (80028c8 <BSP_LCD_SetBackColor+0x30>)
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	3304      	adds	r3, #4
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	601a      	str	r2, [r3, #0]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	2000073c 	.word	0x2000073c
 80028c8:	20000740 	.word	0x20000740

080028cc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <BSP_LCD_SetFont+0x2c>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4908      	ldr	r1, [pc, #32]	; (80028fc <BSP_LCD_SetFont+0x30>)
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	3308      	adds	r3, #8
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	2000073c 	.word	0x2000073c
 80028fc:	20000740 	.word	0x20000740

08002900 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002904:	4b07      	ldr	r3, [pc, #28]	; (8002924 <BSP_LCD_GetFont+0x24>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4907      	ldr	r1, [pc, #28]	; (8002928 <BSP_LCD_GetFont+0x28>)
 800290a:	4613      	mov	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	3308      	adds	r3, #8
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	2000073c 	.word	0x2000073c
 8002928:	20000740 	.word	0x20000740

0800292c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 800292c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292e:	b085      	sub	sp, #20
 8002930:	af02      	add	r7, sp, #8
 8002932:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <BSP_LCD_Clear+0x48>)
 8002936:	681c      	ldr	r4, [r3, #0]
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <BSP_LCD_Clear+0x48>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0e      	ldr	r2, [pc, #56]	; (8002978 <BSP_LCD_Clear+0x4c>)
 800293e:	2134      	movs	r1, #52	; 0x34
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	335c      	adds	r3, #92	; 0x5c
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	461e      	mov	r6, r3
 800294c:	f7ff ff00 	bl	8002750 <BSP_LCD_GetXSize>
 8002950:	4605      	mov	r5, r0
 8002952:	f7ff ff09 	bl	8002768 <BSP_LCD_GetYSize>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	2300      	movs	r3, #0
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	462a      	mov	r2, r5
 8002964:	4631      	mov	r1, r6
 8002966:	4620      	mov	r0, r4
 8002968:	f000 fcb0 	bl	80032cc <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002974:	2000073c 	.word	0x2000073c
 8002978:	20000624 	.word	0x20000624

0800297c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
 8002986:	460b      	mov	r3, r1
 8002988:	80bb      	strh	r3, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800298e:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <BSP_LCD_DisplayChar+0x80>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	491b      	ldr	r1, [pc, #108]	; (8002a00 <BSP_LCD_DisplayChar+0x84>)
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	3308      	adds	r3, #8
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <BSP_LCD_DisplayChar+0x80>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4c14      	ldr	r4, [pc, #80]	; (8002a00 <BSP_LCD_DisplayChar+0x84>)
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4423      	add	r3, r4
 80029ba:	3308      	adds	r3, #8
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80029c0:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80029c4:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <BSP_LCD_DisplayChar+0x80>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4c0d      	ldr	r4, [pc, #52]	; (8002a00 <BSP_LCD_DisplayChar+0x84>)
 80029ca:	4613      	mov	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4423      	add	r3, r4
 80029d4:	3308      	adds	r3, #8
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	889b      	ldrh	r3, [r3, #4]
 80029da:	3307      	adds	r3, #7
 80029dc:	2b00      	cmp	r3, #0
 80029de:	da00      	bge.n	80029e2 <BSP_LCD_DisplayChar+0x66>
 80029e0:	3307      	adds	r3, #7
 80029e2:	10db      	asrs	r3, r3, #3
 80029e4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80029e8:	18ca      	adds	r2, r1, r3
 80029ea:	88b9      	ldrh	r1, [r7, #4]
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fbb2 	bl	8003158 <DrawChar>
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd90      	pop	{r4, r7, pc}
 80029fc:	2000073c 	.word	0x2000073c
 8002a00:	20000740 	.word	0x20000740

08002a04 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002a04:	b5b0      	push	{r4, r5, r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60ba      	str	r2, [r7, #8]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4603      	mov	r3, r0
 8002a10:	81fb      	strh	r3, [r7, #14]
 8002a12:	460b      	mov	r3, r1
 8002a14:	81bb      	strh	r3, [r7, #12]
 8002a16:	4613      	mov	r3, r2
 8002a18:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	83fb      	strh	r3, [r7, #30]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 8002a2e:	e002      	b.n	8002a36 <BSP_LCD_DisplayStringAt+0x32>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	3301      	adds	r3, #1
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	617a      	str	r2, [r7, #20]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f6      	bne.n	8002a30 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8002a42:	f7ff fe85 	bl	8002750 <BSP_LCD_GetXSize>
 8002a46:	4601      	mov	r1, r0
 8002a48:	4b4b      	ldr	r3, [pc, #300]	; (8002b78 <BSP_LCD_DisplayStringAt+0x174>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	484b      	ldr	r0, [pc, #300]	; (8002b7c <BSP_LCD_DisplayStringAt+0x178>)
 8002a4e:	4613      	mov	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4403      	add	r3, r0
 8002a58:	3308      	adds	r3, #8
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	889b      	ldrh	r3, [r3, #4]
 8002a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a62:	613b      	str	r3, [r7, #16]

  switch (mode)
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d01c      	beq.n	8002aa4 <BSP_LCD_DisplayStringAt+0xa0>
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	dc33      	bgt.n	8002ad6 <BSP_LCD_DisplayStringAt+0xd2>
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d002      	beq.n	8002a78 <BSP_LCD_DisplayStringAt+0x74>
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d019      	beq.n	8002aaa <BSP_LCD_DisplayStringAt+0xa6>
 8002a76:	e02e      	b.n	8002ad6 <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	1ad1      	subs	r1, r2, r3
 8002a7e:	4b3e      	ldr	r3, [pc, #248]	; (8002b78 <BSP_LCD_DisplayStringAt+0x174>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	483e      	ldr	r0, [pc, #248]	; (8002b7c <BSP_LCD_DisplayStringAt+0x178>)
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4403      	add	r3, r0
 8002a8e:	3308      	adds	r3, #8
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	889b      	ldrh	r3, [r3, #4]
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	89fb      	ldrh	r3, [r7, #14]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	83fb      	strh	r3, [r7, #30]
      break;
 8002aa2:	e01b      	b.n	8002adc <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8002aa4:	89fb      	ldrh	r3, [r7, #14]
 8002aa6:	83fb      	strh	r3, [r7, #30]
      break;
 8002aa8:	e018      	b.n	8002adc <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	b299      	uxth	r1, r3
 8002ab2:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <BSP_LCD_DisplayStringAt+0x174>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4831      	ldr	r0, [pc, #196]	; (8002b7c <BSP_LCD_DisplayStringAt+0x178>)
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4403      	add	r3, r0
 8002ac2:	3308      	adds	r3, #8
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	889b      	ldrh	r3, [r3, #4]
 8002ac8:	fb11 f303 	smulbb	r3, r1, r3
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	89fb      	ldrh	r3, [r7, #14]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	83fb      	strh	r3, [r7, #30]
      break;
 8002ad4:	e002      	b.n	8002adc <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 8002ad6:	89fb      	ldrh	r3, [r7, #14]
 8002ad8:	83fb      	strh	r3, [r7, #30]
      break;
 8002ada:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002adc:	e01a      	b.n	8002b14 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	89b9      	ldrh	r1, [r7, #12]
 8002ae4:	8bfb      	ldrh	r3, [r7, #30]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ff48 	bl	800297c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002aec:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <BSP_LCD_DisplayStringAt+0x174>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4922      	ldr	r1, [pc, #136]	; (8002b7c <BSP_LCD_DisplayStringAt+0x178>)
 8002af2:	4613      	mov	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	3308      	adds	r3, #8
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	889a      	ldrh	r2, [r3, #4]
 8002b02:	8bfb      	ldrh	r3, [r7, #30]
 8002b04:	4413      	add	r3, r2
 8002b06:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	60bb      	str	r3, [r7, #8]
    i++;
 8002b0e:	8bbb      	ldrh	r3, [r7, #28]
 8002b10:	3301      	adds	r3, #1
 8002b12:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2dc      	uxtb	r4, r3
 8002b22:	f7ff fe15 	bl	8002750 <BSP_LCD_GetXSize>
 8002b26:	8bb9      	ldrh	r1, [r7, #28]
 8002b28:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <BSP_LCD_DisplayStringAt+0x174>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4d13      	ldr	r5, [pc, #76]	; (8002b7c <BSP_LCD_DisplayStringAt+0x178>)
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	442b      	add	r3, r5
 8002b38:	3308      	adds	r3, #8
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	889b      	ldrh	r3, [r3, #4]
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	1ac3      	subs	r3, r0, r3
 8002b44:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 8002b46:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <BSP_LCD_DisplayStringAt+0x174>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	480c      	ldr	r0, [pc, #48]	; (8002b7c <BSP_LCD_DisplayStringAt+0x178>)
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4403      	add	r3, r0
 8002b56:	3308      	adds	r3, #8
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002b5c:	4299      	cmp	r1, r3
 8002b5e:	bf2c      	ite	cs
 8002b60:	2301      	movcs	r3, #1
 8002b62:	2300      	movcc	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4023      	ands	r3, r4
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1b7      	bne.n	8002ade <BSP_LCD_DisplayStringAt+0xda>
  }
}
 8002b6e:	bf00      	nop
 8002b70:	bf00      	nop
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bdb0      	pop	{r4, r5, r7, pc}
 8002b78:	2000073c 	.word	0x2000073c
 8002b7c:	20000740 	.word	0x20000740

08002b80 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002b8c:	f7ff feb8 	bl	8002900 <BSP_LCD_GetFont>
 8002b90:	4603      	mov	r3, r0
 8002b92:	88db      	ldrh	r3, [r3, #6]
 8002b94:	88fa      	ldrh	r2, [r7, #6]
 8002b96:	fb12 f303 	smulbb	r3, r2, r3
 8002b9a:	b299      	uxth	r1, r3
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7ff ff2f 	bl	8002a04 <BSP_LCD_DisplayStringAt>
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	80fb      	strh	r3, [r7, #6]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	80bb      	strh	r3, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8002bc6:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <BSP_LCD_DrawHLine+0x70>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a16      	ldr	r2, [pc, #88]	; (8002c24 <BSP_LCD_DrawHLine+0x74>)
 8002bcc:	2134      	movs	r1, #52	; 0x34
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	335c      	adds	r3, #92	; 0x5c
 8002bd6:	681c      	ldr	r4, [r3, #0]
 8002bd8:	f7ff fdba 	bl	8002750 <BSP_LCD_GetXSize>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	88bb      	ldrh	r3, [r7, #4]
 8002be0:	fb03 f202 	mul.w	r2, r3, r2
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4423      	add	r3, r4
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <BSP_LCD_DrawHLine+0x70>)
 8002bf0:	6818      	ldr	r0, [r3, #0]
 8002bf2:	68f9      	ldr	r1, [r7, #12]
 8002bf4:	887c      	ldrh	r4, [r7, #2]
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <BSP_LCD_DrawHLine+0x70>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4d0b      	ldr	r5, [pc, #44]	; (8002c28 <BSP_LCD_DrawHLine+0x78>)
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	442b      	add	r3, r5
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	2301      	movs	r3, #1
 8002c10:	4622      	mov	r2, r4
 8002c12:	f000 fb5b 	bl	80032cc <FillBuffer>
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	2000073c 	.word	0x2000073c
 8002c24:	20000624 	.word	0x20000624
 8002c28:	20000740 	.word	0x20000740

08002c2c <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	80fb      	strh	r3, [r7, #6]
 8002c36:	460b      	mov	r3, r1
 8002c38:	80bb      	strh	r3, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	f1c3 0303 	rsb	r3, r3, #3
 8002c46:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002c4c:	887b      	ldrh	r3, [r7, #2]
 8002c4e:	60fb      	str	r3, [r7, #12]

  while (curx <= cury)
 8002c50:	e0c7      	b.n	8002de2 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	4413      	add	r3, r2
 8002c5a:	b298      	uxth	r0, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	88ba      	ldrh	r2, [r7, #4]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	b299      	uxth	r1, r3
 8002c66:	4b64      	ldr	r3, [pc, #400]	; (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4c64      	ldr	r4, [pc, #400]	; (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4423      	add	r3, r4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f000 fa47 	bl	800310c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	b298      	uxth	r0, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	88ba      	ldrh	r2, [r7, #4]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	b299      	uxth	r1, r3
 8002c92:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4c59      	ldr	r4, [pc, #356]	; (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4423      	add	r3, r4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f000 fa31 	bl	800310c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	b298      	uxth	r0, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	88ba      	ldrh	r2, [r7, #4]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	b299      	uxth	r1, r3
 8002cbe:	4b4e      	ldr	r3, [pc, #312]	; (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4c4e      	ldr	r4, [pc, #312]	; (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4423      	add	r3, r4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f000 fa1b 	bl	800310c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	b298      	uxth	r0, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	88ba      	ldrh	r2, [r7, #4]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	b299      	uxth	r1, r3
 8002cea:	4b43      	ldr	r3, [pc, #268]	; (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4c43      	ldr	r4, [pc, #268]	; (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4423      	add	r3, r4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	f000 fa05 	bl	800310c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	4413      	add	r3, r2
 8002d0a:	b298      	uxth	r0, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	88bb      	ldrh	r3, [r7, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	b299      	uxth	r1, r3
 8002d16:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4c38      	ldr	r4, [pc, #224]	; (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4423      	add	r3, r4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f000 f9ef 	bl	800310c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	88fa      	ldrh	r2, [r7, #6]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	b298      	uxth	r0, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	88bb      	ldrh	r3, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	b299      	uxth	r1, r3
 8002d42:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	4c2d      	ldr	r4, [pc, #180]	; (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4423      	add	r3, r4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	f000 f9d9 	bl	800310c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	4413      	add	r3, r2
 8002d62:	b298      	uxth	r0, r3
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	88bb      	ldrh	r3, [r7, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	b299      	uxth	r1, r3
 8002d6e:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4c22      	ldr	r4, [pc, #136]	; (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4423      	add	r3, r4
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	f000 f9c3 	bl	800310c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	88fa      	ldrh	r2, [r7, #6]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	b298      	uxth	r0, r3
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	88bb      	ldrh	r3, [r7, #4]
 8002d96:	4413      	add	r3, r2
 8002d98:	b299      	uxth	r1, r3
 8002d9a:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <BSP_LCD_DrawCircle+0x1cc>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4c17      	ldr	r4, [pc, #92]	; (8002dfc <BSP_LCD_DrawCircle+0x1d0>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4423      	add	r3, r4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f000 f9ad 	bl	800310c <BSP_LCD_DrawPixel>

    if (d < 0)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	da06      	bge.n	8002dc6 <BSP_LCD_DrawCircle+0x19a>
    {
      d += (curx << 2) + 6;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	009a      	lsls	r2, r3, #2
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3306      	adds	r3, #6
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e00a      	b.n	8002ddc <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	009a      	lsls	r2, r3, #2
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	330a      	adds	r3, #10
 8002dd4:	617b      	str	r3, [r7, #20]
      cury--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	3301      	adds	r3, #1
 8002de0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	f67f af33 	bls.w	8002c52 <BSP_LCD_DrawCircle+0x26>
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd90      	pop	{r4, r7, pc}
 8002df6:	bf00      	nop
 8002df8:	2000073c 	.word	0x2000073c
 8002dfc:	20000740 	.word	0x20000740

08002e00 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	80fb      	strh	r3, [r7, #6]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	80bb      	strh	r3, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 8002e12:	887b      	ldrh	r3, [r7, #2]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	f1c3 0303 	rsb	r3, r3, #3
 8002e1a:	617b      	str	r3, [r7, #20]

  curx = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002e20:	887b      	ldrh	r3, [r7, #2]
 8002e22:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002e24:	4b44      	ldr	r3, [pc, #272]	; (8002f38 <BSP_LCD_FillCircle+0x138>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4944      	ldr	r1, [pc, #272]	; (8002f3c <BSP_LCD_FillCircle+0x13c>)
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fd16 	bl	8002868 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8002e3c:	e061      	b.n	8002f02 <BSP_LCD_FillCircle+0x102>
  {
    if (cury > 0)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d021      	beq.n	8002e88 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2 * cury);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	88fa      	ldrh	r2, [r7, #6]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	b298      	uxth	r0, r3
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	88bb      	ldrh	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	b299      	uxth	r1, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	f7ff fea5 	bl	8002bb0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2 * cury);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	b298      	uxth	r0, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	88ba      	ldrh	r2, [r7, #4]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	b299      	uxth	r1, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	f7ff fe94 	bl	8002bb0 <BSP_LCD_DrawHLine>
    }

    if (curx > 0)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d021      	beq.n	8002ed2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2 * curx);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	88fa      	ldrh	r2, [r7, #6]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	b298      	uxth	r0, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	88ba      	ldrh	r2, [r7, #4]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	b299      	uxth	r1, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f7ff fe80 	bl	8002bb0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2 * curx);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	88fa      	ldrh	r2, [r7, #6]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	b298      	uxth	r0, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	88bb      	ldrh	r3, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	b299      	uxth	r1, r3
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f7ff fe6f 	bl	8002bb0 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	da06      	bge.n	8002ee6 <BSP_LCD_FillCircle+0xe6>
    {
      d += (curx << 2) + 6;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	009a      	lsls	r2, r3, #2
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	4413      	add	r3, r2
 8002ee0:	3306      	adds	r3, #6
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	e00a      	b.n	8002efc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	009a      	lsls	r2, r3, #2
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	330a      	adds	r3, #10
 8002ef4:	617b      	str	r3, [r7, #20]
      cury--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	3301      	adds	r3, #1
 8002f00:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d999      	bls.n	8002e3e <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <BSP_LCD_FillCircle+0x138>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	490b      	ldr	r1, [pc, #44]	; (8002f3c <BSP_LCD_FillCircle+0x13c>)
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fca3 	bl	8002868 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002f22:	887a      	ldrh	r2, [r7, #2]
 8002f24:	88b9      	ldrh	r1, [r7, #4]
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fe7f 	bl	8002c2c <BSP_LCD_DrawCircle>
}
 8002f2e:	bf00      	nop
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	2000073c 	.word	0x2000073c
 8002f3c:	20000740 	.word	0x20000740

08002f40 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <BSP_LCD_DisplayOn+0x1c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002f4e:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <BSP_LCD_DisplayOn+0x1c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4798      	blx	r3
  }
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000758 	.word	0x20000758

08002f60 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08e      	sub	sp, #56	; 0x38
 8002f64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	623b      	str	r3, [r7, #32]
 8002f6a:	4b61      	ldr	r3, [pc, #388]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	4a60      	ldr	r2, [pc, #384]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002f70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f74:	6453      	str	r3, [r2, #68]	; 0x44
 8002f76:	4b5e      	ldr	r3, [pc, #376]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f7e:	623b      	str	r3, [r7, #32]
 8002f80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	4b5a      	ldr	r3, [pc, #360]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	4a59      	ldr	r2, [pc, #356]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002f8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f90:	6313      	str	r3, [r2, #48]	; 0x30
 8002f92:	4b57      	ldr	r3, [pc, #348]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a52      	ldr	r2, [pc, #328]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b50      	ldr	r3, [pc, #320]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	4b4c      	ldr	r3, [pc, #304]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	4a4b      	ldr	r2, [pc, #300]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fca:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	4b45      	ldr	r3, [pc, #276]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a44      	ldr	r2, [pc, #272]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b42      	ldr	r3, [pc, #264]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	4b3e      	ldr	r3, [pc, #248]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a3d      	ldr	r2, [pc, #244]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8002ffc:	f043 0308 	orr.w	r3, r3, #8
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4a36      	ldr	r2, [pc, #216]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8003018:	f043 0320 	orr.w	r3, r3, #32
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
 800301e:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a2f      	ldr	r2, [pc, #188]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 8003034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <BSP_LCD_MspInit+0x190>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003046:	f641 0358 	movw	r3, #6232	; 0x1858
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800304c:	2302      	movs	r3, #2
 800304e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003054:	2302      	movs	r3, #2
 8003056:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8003058:	230e      	movs	r3, #14
 800305a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800305c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003060:	4619      	mov	r1, r3
 8003062:	4824      	ldr	r0, [pc, #144]	; (80030f4 <BSP_LCD_MspInit+0x194>)
 8003064:	f001 f924 	bl	80042b0 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003068:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800306e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003072:	4619      	mov	r1, r3
 8003074:	4820      	ldr	r0, [pc, #128]	; (80030f8 <BSP_LCD_MspInit+0x198>)
 8003076:	f001 f91b 	bl	80042b0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800307a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003084:	4619      	mov	r1, r3
 8003086:	481d      	ldr	r0, [pc, #116]	; (80030fc <BSP_LCD_MspInit+0x19c>)
 8003088:	f001 f912 	bl	80042b0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800308c:	2348      	movs	r3, #72	; 0x48
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003094:	4619      	mov	r1, r3
 8003096:	481a      	ldr	r0, [pc, #104]	; (8003100 <BSP_LCD_MspInit+0x1a0>)
 8003098:	f001 f90a 	bl	80042b0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800309c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80030a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a6:	4619      	mov	r1, r3
 80030a8:	4816      	ldr	r0, [pc, #88]	; (8003104 <BSP_LCD_MspInit+0x1a4>)
 80030aa:	f001 f901 	bl	80042b0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80030ae:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80030b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b8:	4619      	mov	r1, r3
 80030ba:	4813      	ldr	r0, [pc, #76]	; (8003108 <BSP_LCD_MspInit+0x1a8>)
 80030bc:	f001 f8f8 	bl	80042b0 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80030c0:	2303      	movs	r3, #3
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80030c4:	2309      	movs	r3, #9
 80030c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80030c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030cc:	4619      	mov	r1, r3
 80030ce:	480a      	ldr	r0, [pc, #40]	; (80030f8 <BSP_LCD_MspInit+0x198>)
 80030d0:	f001 f8ee 	bl	80042b0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80030d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80030da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030de:	4619      	mov	r1, r3
 80030e0:	4809      	ldr	r0, [pc, #36]	; (8003108 <BSP_LCD_MspInit+0x1a8>)
 80030e2:	f001 f8e5 	bl	80042b0 <HAL_GPIO_Init>
}
 80030e6:	bf00      	nop
 80030e8:	3738      	adds	r7, #56	; 0x38
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40020000 	.word	0x40020000
 80030f8:	40020400 	.word	0x40020400
 80030fc:	40020800 	.word	0x40020800
 8003100:	40020c00 	.word	0x40020c00
 8003104:	40021400 	.word	0x40021400
 8003108:	40021800 	.word	0x40021800

0800310c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800310c:	b5b0      	push	{r4, r5, r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	603a      	str	r2, [r7, #0]
 8003116:	80fb      	strh	r3, [r7, #6]
 8003118:	460b      	mov	r3, r1
 800311a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <BSP_LCD_DrawPixel+0x44>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a0c      	ldr	r2, [pc, #48]	; (8003154 <BSP_LCD_DrawPixel+0x48>)
 8003122:	2134      	movs	r1, #52	; 0x34
 8003124:	fb01 f303 	mul.w	r3, r1, r3
 8003128:	4413      	add	r3, r2
 800312a:	335c      	adds	r3, #92	; 0x5c
 800312c:	681c      	ldr	r4, [r3, #0]
 800312e:	88bd      	ldrh	r5, [r7, #4]
 8003130:	f7ff fb0e 	bl	8002750 <BSP_LCD_GetXSize>
 8003134:	4603      	mov	r3, r0
 8003136:	fb03 f205 	mul.w	r2, r3, r5
 800313a:	88fb      	ldrh	r3, [r7, #6]
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4423      	add	r3, r4
 8003142:	461a      	mov	r2, r3
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6013      	str	r3, [r2, #0]
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bdb0      	pop	{r4, r5, r7, pc}
 8003150:	2000073c 	.word	0x2000073c
 8003154:	20000624 	.word	0x20000624

08003158 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	603a      	str	r2, [r7, #0]
 8003162:	80fb      	strh	r3, [r7, #6]
 8003164:	460b      	mov	r3, r1
 8003166:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	2300      	movs	r3, #0
 800316e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003174:	4b53      	ldr	r3, [pc, #332]	; (80032c4 <DrawChar+0x16c>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4953      	ldr	r1, [pc, #332]	; (80032c8 <DrawChar+0x170>)
 800317a:	4613      	mov	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	3308      	adds	r3, #8
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	88db      	ldrh	r3, [r3, #6]
 800318a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800318c:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <DrawChar+0x16c>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	494d      	ldr	r1, [pc, #308]	; (80032c8 <DrawChar+0x170>)
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	3308      	adds	r3, #8
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	889b      	ldrh	r3, [r3, #4]
 80031a2:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 80031a4:	8a3b      	ldrh	r3, [r7, #16]
 80031a6:	3307      	adds	r3, #7
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da00      	bge.n	80031ae <DrawChar+0x56>
 80031ac:	3307      	adds	r3, #7
 80031ae:	10db      	asrs	r3, r3, #3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	8a3b      	ldrh	r3, [r7, #16]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e076      	b.n	80032b2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 80031c4:	8a3b      	ldrh	r3, [r7, #16]
 80031c6:	3307      	adds	r3, #7
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	da00      	bge.n	80031ce <DrawChar+0x76>
 80031cc:	3307      	adds	r3, #7
 80031ce:	10db      	asrs	r3, r3, #3
 80031d0:	461a      	mov	r2, r3
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	fb02 f303 	mul.w	r3, r2, r3
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	4413      	add	r3, r2
 80031dc:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 80031de:	8a3b      	ldrh	r3, [r7, #16]
 80031e0:	3307      	adds	r3, #7
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	da00      	bge.n	80031e8 <DrawChar+0x90>
 80031e6:	3307      	adds	r3, #7
 80031e8:	10db      	asrs	r3, r3, #3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d002      	beq.n	80031f4 <DrawChar+0x9c>
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d004      	beq.n	80031fc <DrawChar+0xa4>
 80031f2:	e00c      	b.n	800320e <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	617b      	str	r3, [r7, #20]
        break;
 80031fa:	e016      	b.n	800322a <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	3201      	adds	r2, #1
 8003206:	7812      	ldrb	r2, [r2, #0]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
        break;
 800320c:	e00d      	b.n	800322a <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	041a      	lsls	r2, r3, #16
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3301      	adds	r3, #1
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	4313      	orrs	r3, r2
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	3202      	adds	r2, #2
 8003222:	7812      	ldrb	r2, [r2, #0]
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
        break;
 8003228:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800322a:	2300      	movs	r3, #0
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	e036      	b.n	800329e <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8003230:	8a3a      	ldrh	r2, [r7, #16]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	1ad2      	subs	r2, r2, r3
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	4413      	add	r3, r2
 800323a:	3b01      	subs	r3, #1
 800323c:	2201      	movs	r2, #1
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	461a      	mov	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	4013      	ands	r3, r2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d012      	beq.n	8003272 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	b29a      	uxth	r2, r3
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	4413      	add	r3, r2
 8003254:	b298      	uxth	r0, r3
 8003256:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <DrawChar+0x16c>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	491b      	ldr	r1, [pc, #108]	; (80032c8 <DrawChar+0x170>)
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	88bb      	ldrh	r3, [r7, #4]
 800326a:	4619      	mov	r1, r3
 800326c:	f7ff ff4e 	bl	800310c <BSP_LCD_DrawPixel>
 8003270:	e012      	b.n	8003298 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	b29a      	uxth	r2, r3
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	4413      	add	r3, r2
 800327a:	b298      	uxth	r0, r3
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <DrawChar+0x16c>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4911      	ldr	r1, [pc, #68]	; (80032c8 <DrawChar+0x170>)
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	3304      	adds	r3, #4
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	88bb      	ldrh	r3, [r7, #4]
 8003292:	4619      	mov	r1, r3
 8003294:	f7ff ff3a 	bl	800310c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	3301      	adds	r3, #1
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	8a3b      	ldrh	r3, [r7, #16]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d3c4      	bcc.n	8003230 <DrawChar+0xd8>
      }
    }
    Ypos++;
 80032a6:	88bb      	ldrh	r3, [r7, #4]
 80032a8:	3301      	adds	r3, #1
 80032aa:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	3301      	adds	r3, #1
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	8a7b      	ldrh	r3, [r7, #18]
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d384      	bcc.n	80031c4 <DrawChar+0x6c>
  }
}
 80032ba:	bf00      	nop
 80032bc:	bf00      	nop
 80032be:	3720      	adds	r7, #32
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	2000073c 	.word	0x2000073c
 80032c8:	20000740 	.word	0x20000740

080032cc <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80032da:	4b16      	ldr	r3, [pc, #88]	; (8003334 <FillBuffer+0x68>)
 80032dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80032e0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80032e2:	4b14      	ldr	r3, [pc, #80]	; (8003334 <FillBuffer+0x68>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 80032e8:	4a12      	ldr	r2, [pc, #72]	; (8003334 <FillBuffer+0x68>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <FillBuffer+0x68>)
 80032f0:	4a11      	ldr	r2, [pc, #68]	; (8003338 <FillBuffer+0x6c>)
 80032f2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 80032f4:	480f      	ldr	r0, [pc, #60]	; (8003334 <FillBuffer+0x68>)
 80032f6:	f000 fd45 	bl	8003d84 <HAL_DMA2D_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d115      	bne.n	800332c <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8003300:	68f9      	ldr	r1, [r7, #12]
 8003302:	480c      	ldr	r0, [pc, #48]	; (8003334 <FillBuffer+0x68>)
 8003304:	f000 fea6 	bl	8004054 <HAL_DMA2D_ConfigLayer>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10e      	bne.n	800332c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69f9      	ldr	r1, [r7, #28]
 8003318:	4806      	ldr	r0, [pc, #24]	; (8003334 <FillBuffer+0x68>)
 800331a:	f000 fd86 	bl	8003e2a <HAL_DMA2D_Start>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d103      	bne.n	800332c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003324:	210a      	movs	r1, #10
 8003326:	4803      	ldr	r0, [pc, #12]	; (8003334 <FillBuffer+0x68>)
 8003328:	f000 fdaa 	bl	8003e80 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	200006cc 	.word	0x200006cc
 8003338:	4002b000 	.word	0x4002b000

0800333c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003340:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <BSP_SDRAM_Init+0xac>)
 8003342:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <BSP_SDRAM_Init+0xb0>)
 8003344:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003346:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <BSP_SDRAM_Init+0xb4>)
 8003348:	2202      	movs	r2, #2
 800334a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800334c:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <BSP_SDRAM_Init+0xb4>)
 800334e:	2207      	movs	r2, #7
 8003350:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003352:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <BSP_SDRAM_Init+0xb4>)
 8003354:	2204      	movs	r2, #4
 8003356:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003358:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <BSP_SDRAM_Init+0xb4>)
 800335a:	2207      	movs	r2, #7
 800335c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800335e:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <BSP_SDRAM_Init+0xb4>)
 8003360:	2202      	movs	r2, #2
 8003362:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003364:	4b22      	ldr	r3, [pc, #136]	; (80033f0 <BSP_SDRAM_Init+0xb4>)
 8003366:	2202      	movs	r2, #2
 8003368:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800336a:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <BSP_SDRAM_Init+0xb4>)
 800336c:	2202      	movs	r2, #2
 800336e:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003370:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <BSP_SDRAM_Init+0xac>)
 8003372:	2201      	movs	r2, #1
 8003374:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003376:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <BSP_SDRAM_Init+0xac>)
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800337c:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <BSP_SDRAM_Init+0xac>)
 800337e:	2204      	movs	r2, #4
 8003380:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003382:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <BSP_SDRAM_Init+0xac>)
 8003384:	2210      	movs	r2, #16
 8003386:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <BSP_SDRAM_Init+0xac>)
 800338a:	2240      	movs	r2, #64	; 0x40
 800338c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800338e:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <BSP_SDRAM_Init+0xac>)
 8003390:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003394:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003396:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <BSP_SDRAM_Init+0xac>)
 8003398:	2200      	movs	r2, #0
 800339a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <BSP_SDRAM_Init+0xac>)
 800339e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033a2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80033a4:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <BSP_SDRAM_Init+0xac>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80033aa:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <BSP_SDRAM_Init+0xac>)
 80033ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80033b2:	2100      	movs	r1, #0
 80033b4:	480c      	ldr	r0, [pc, #48]	; (80033e8 <BSP_SDRAM_Init+0xac>)
 80033b6:	f000 f87f 	bl	80034b8 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80033ba:	490d      	ldr	r1, [pc, #52]	; (80033f0 <BSP_SDRAM_Init+0xb4>)
 80033bc:	480a      	ldr	r0, [pc, #40]	; (80033e8 <BSP_SDRAM_Init+0xac>)
 80033be:	f003 fde9 	bl	8006f94 <HAL_SDRAM_Init>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80033c8:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <BSP_SDRAM_Init+0xb8>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	e002      	b.n	80033d6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <BSP_SDRAM_Init+0xb8>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80033d6:	f240 506a 	movw	r0, #1386	; 0x56a
 80033da:	f000 f80d 	bl	80033f8 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <BSP_SDRAM_Init+0xb8>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	2000075c 	.word	0x2000075c
 80033ec:	a0000140 	.word	0xa0000140
 80033f0:	20000790 	.word	0x20000790
 80033f4:	20000088 	.word	0x20000088

080033f8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003404:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800340a:	4b29      	ldr	r3, [pc, #164]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800340c:	2208      	movs	r2, #8
 800340e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003412:	2201      	movs	r2, #1
 8003414:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003416:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003418:	2200      	movs	r2, #0
 800341a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800341c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003420:	4923      	ldr	r1, [pc, #140]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003422:	4824      	ldr	r0, [pc, #144]	; (80034b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003424:	f003 fdf4 	bl	8007010 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003428:	2001      	movs	r0, #1
 800342a:	f000 f993 	bl	8003754 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800342e:	4b20      	ldr	r3, [pc, #128]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003430:	2202      	movs	r2, #2
 8003432:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003434:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003436:	2208      	movs	r2, #8
 8003438:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800343c:	2201      	movs	r2, #1
 800343e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003440:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003442:	2200      	movs	r2, #0
 8003444:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800344a:	4919      	ldr	r1, [pc, #100]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800344c:	4819      	ldr	r0, [pc, #100]	; (80034b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800344e:	f003 fddf 	bl	8007010 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003452:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003454:	2203      	movs	r2, #3
 8003456:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003458:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800345a:	2208      	movs	r2, #8
 800345c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003460:	2204      	movs	r2, #4
 8003462:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003466:	2200      	movs	r2, #0
 8003468:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800346a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800346e:	4910      	ldr	r1, [pc, #64]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003470:	4810      	ldr	r0, [pc, #64]	; (80034b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003472:	f003 fdcd 	bl	8007010 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003476:	f44f 730c 	mov.w	r3, #560	; 0x230
 800347a:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800347e:	2204      	movs	r2, #4
 8003480:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003484:	2208      	movs	r2, #8
 8003486:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800348a:	2201      	movs	r2, #1
 800348c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4a07      	ldr	r2, [pc, #28]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003492:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003498:	4905      	ldr	r1, [pc, #20]	; (80034b0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800349a:	4806      	ldr	r0, [pc, #24]	; (80034b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800349c:	f003 fdb8 	bl	8007010 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4804      	ldr	r0, [pc, #16]	; (80034b4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034a4:	f003 fde9 	bl	800707a <HAL_SDRAM_ProgramRefreshRate>
}
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	200007ac 	.word	0x200007ac
 80034b4:	2000075c 	.word	0x2000075c

080034b8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b090      	sub	sp, #64	; 0x40
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80ec 	beq.w	80036a2 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ce:	4b77      	ldr	r3, [pc, #476]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 80034d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d2:	4a76      	ldr	r2, [pc, #472]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6393      	str	r3, [r2, #56]	; 0x38
 80034da:	4b74      	ldr	r3, [pc, #464]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	4b70      	ldr	r3, [pc, #448]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	4a6f      	ldr	r2, [pc, #444]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 80034f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034f4:	6313      	str	r3, [r2, #48]	; 0x30
 80034f6:	4b6d      	ldr	r3, [pc, #436]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
 8003506:	4b69      	ldr	r3, [pc, #420]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	4a68      	ldr	r2, [pc, #416]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	6313      	str	r3, [r2, #48]	; 0x30
 8003512:	4b66      	ldr	r3, [pc, #408]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	623b      	str	r3, [r7, #32]
 800351c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	4b62      	ldr	r3, [pc, #392]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	4a61      	ldr	r2, [pc, #388]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 8003528:	f043 0304 	orr.w	r3, r3, #4
 800352c:	6313      	str	r3, [r2, #48]	; 0x30
 800352e:	4b5f      	ldr	r3, [pc, #380]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	4b5b      	ldr	r3, [pc, #364]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4a5a      	ldr	r2, [pc, #360]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 8003544:	f043 0308 	orr.w	r3, r3, #8
 8003548:	6313      	str	r3, [r2, #48]	; 0x30
 800354a:	4b58      	ldr	r3, [pc, #352]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	4b54      	ldr	r3, [pc, #336]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	4a53      	ldr	r2, [pc, #332]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 8003560:	f043 0310 	orr.w	r3, r3, #16
 8003564:	6313      	str	r3, [r2, #48]	; 0x30
 8003566:	4b51      	ldr	r3, [pc, #324]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	4b4d      	ldr	r3, [pc, #308]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	4a4c      	ldr	r2, [pc, #304]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 800357c:	f043 0320 	orr.w	r3, r3, #32
 8003580:	6313      	str	r3, [r2, #48]	; 0x30
 8003582:	4b4a      	ldr	r3, [pc, #296]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b46      	ldr	r3, [pc, #280]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	4a45      	ldr	r2, [pc, #276]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 8003598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800359c:	6313      	str	r3, [r2, #48]	; 0x30
 800359e:	4b43      	ldr	r3, [pc, #268]	; (80036ac <BSP_SDRAM_MspInit+0x1f4>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80035aa:	2302      	movs	r3, #2
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80035ae:	2302      	movs	r3, #2
 80035b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80035b6:	230c      	movs	r3, #12
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80035ba:	2360      	movs	r3, #96	; 0x60
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80035be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035c2:	4619      	mov	r1, r3
 80035c4:	483a      	ldr	r0, [pc, #232]	; (80036b0 <BSP_SDRAM_MspInit+0x1f8>)
 80035c6:	f000 fe73 	bl	80042b0 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 80035ca:	2301      	movs	r3, #1
 80035cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80035ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035d2:	4619      	mov	r1, r3
 80035d4:	4837      	ldr	r0, [pc, #220]	; (80036b4 <BSP_SDRAM_MspInit+0x1fc>)
 80035d6:	f000 fe6b 	bl	80042b0 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80035da:	f24c 7303 	movw	r3, #50947	; 0xc703
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80035e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035e4:	4619      	mov	r1, r3
 80035e6:	4834      	ldr	r0, [pc, #208]	; (80036b8 <BSP_SDRAM_MspInit+0x200>)
 80035e8:	f000 fe62 	bl	80042b0 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80035ec:	f64f 7383 	movw	r3, #65411	; 0xff83
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80035f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035f6:	4619      	mov	r1, r3
 80035f8:	4830      	ldr	r0, [pc, #192]	; (80036bc <BSP_SDRAM_MspInit+0x204>)
 80035fa:	f000 fe59 	bl	80042b0 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 80035fe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003608:	4619      	mov	r1, r3
 800360a:	482d      	ldr	r0, [pc, #180]	; (80036c0 <BSP_SDRAM_MspInit+0x208>)
 800360c:	f000 fe50 	bl	80042b0 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003610:	f248 1333 	movw	r3, #33075	; 0x8133
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800361a:	4619      	mov	r1, r3
 800361c:	4829      	ldr	r0, [pc, #164]	; (80036c4 <BSP_SDRAM_MspInit+0x20c>)
 800361e:	f000 fe47 	bl	80042b0 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003622:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 8003624:	2200      	movs	r2, #0
 8003626:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003628:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 800362a:	2280      	movs	r2, #128	; 0x80
 800362c:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800362e:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 8003630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003634:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003636:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 8003638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800363c:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800363e:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 8003640:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003644:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 8003648:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800364c:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 800364e:	4b1e      	ldr	r3, [pc, #120]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 8003650:	2200      	movs	r2, #0
 8003652:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003654:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 8003656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800365a:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 800365e:	2200      	movs	r2, #0
 8003660:	625a      	str	r2, [r3, #36]	; 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 8003664:	2203      	movs	r2, #3
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003668:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 800366a:	2200      	movs	r2, #0
 800366c:	62da      	str	r2, [r3, #44]	; 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800366e:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	; 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003674:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 8003676:	4a15      	ldr	r2, [pc, #84]	; (80036cc <BSP_SDRAM_MspInit+0x214>)
 8003678:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
 8003680:	4a11      	ldr	r2, [pc, #68]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8003686:	4810      	ldr	r0, [pc, #64]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 8003688:	f000 fa4a 	bl	8003b20 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 800368c:	480e      	ldr	r0, [pc, #56]	; (80036c8 <BSP_SDRAM_MspInit+0x210>)
 800368e:	f000 f999 	bl	80039c4 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003692:	2200      	movs	r2, #0
 8003694:	210f      	movs	r1, #15
 8003696:	2038      	movs	r0, #56	; 0x38
 8003698:	f000 f95c 	bl	8003954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800369c:	2038      	movs	r0, #56	; 0x38
 800369e:	f000 f975 	bl	800398c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80036a2:	bf00      	nop
 80036a4:	3740      	adds	r7, #64	; 0x40
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40020400 	.word	0x40020400
 80036b4:	40020800 	.word	0x40020800
 80036b8:	40020c00 	.word	0x40020c00
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40021400 	.word	0x40021400
 80036c4:	40021800 	.word	0x40021800
 80036c8:	200007bc 	.word	0x200007bc
 80036cc:	40026410 	.word	0x40026410

080036d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036d4:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <HAL_Init+0x40>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0d      	ldr	r2, [pc, #52]	; (8003710 <HAL_Init+0x40>)
 80036da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_Init+0x40>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <HAL_Init+0x40>)
 80036e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036ec:	4b08      	ldr	r3, [pc, #32]	; (8003710 <HAL_Init+0x40>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a07      	ldr	r2, [pc, #28]	; (8003710 <HAL_Init+0x40>)
 80036f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f8:	2003      	movs	r0, #3
 80036fa:	f000 f920 	bl	800393e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036fe:	200f      	movs	r0, #15
 8003700:	f7fd fff8 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003704:	f7fd ff58 	bl	80015b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023c00 	.word	0x40023c00

08003714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_IncTick+0x20>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_IncTick+0x24>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4413      	add	r3, r2
 8003724:	4a04      	ldr	r2, [pc, #16]	; (8003738 <HAL_IncTick+0x24>)
 8003726:	6013      	str	r3, [r2, #0]
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20000090 	.word	0x20000090
 8003738:	2000081c 	.word	0x2000081c

0800373c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return uwTick;
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <HAL_GetTick+0x14>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	2000081c 	.word	0x2000081c

08003754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800375c:	f7ff ffee 	bl	800373c <HAL_GetTick>
 8003760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d005      	beq.n	800377a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800376e:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <HAL_Delay+0x44>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800377a:	bf00      	nop
 800377c:	f7ff ffde 	bl	800373c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	429a      	cmp	r2, r3
 800378a:	d8f7      	bhi.n	800377c <HAL_Delay+0x28>
  {
  }
}
 800378c:	bf00      	nop
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20000090 	.word	0x20000090

0800379c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b8:	4013      	ands	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ce:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <__NVIC_SetPriorityGrouping+0x44>)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	60d3      	str	r3, [r2, #12]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e8:	4b04      	ldr	r3, [pc, #16]	; (80037fc <__NVIC_GetPriorityGrouping+0x18>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	0a1b      	lsrs	r3, r3, #8
 80037ee:	f003 0307 	and.w	r3, r3, #7
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	2b00      	cmp	r3, #0
 8003810:	db0b      	blt.n	800382a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	f003 021f 	and.w	r2, r3, #31
 8003818:	4907      	ldr	r1, [pc, #28]	; (8003838 <__NVIC_EnableIRQ+0x38>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2001      	movs	r0, #1
 8003822:	fa00 f202 	lsl.w	r2, r0, r2
 8003826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000e100 	.word	0xe000e100

0800383c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	2b00      	cmp	r3, #0
 800384c:	db12      	blt.n	8003874 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	f003 021f 	and.w	r2, r3, #31
 8003854:	490a      	ldr	r1, [pc, #40]	; (8003880 <__NVIC_DisableIRQ+0x44>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2001      	movs	r0, #1
 800385e:	fa00 f202 	lsl.w	r2, r0, r2
 8003862:	3320      	adds	r3, #32
 8003864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003868:	f3bf 8f4f 	dsb	sy
}
 800386c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800386e:	f3bf 8f6f 	isb	sy
}
 8003872:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000e100 	.word	0xe000e100

08003884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	6039      	str	r1, [r7, #0]
 800388e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003894:	2b00      	cmp	r3, #0
 8003896:	db0a      	blt.n	80038ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	b2da      	uxtb	r2, r3
 800389c:	490c      	ldr	r1, [pc, #48]	; (80038d0 <__NVIC_SetPriority+0x4c>)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	0112      	lsls	r2, r2, #4
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	440b      	add	r3, r1
 80038a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ac:	e00a      	b.n	80038c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4908      	ldr	r1, [pc, #32]	; (80038d4 <__NVIC_SetPriority+0x50>)
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	3b04      	subs	r3, #4
 80038bc:	0112      	lsls	r2, r2, #4
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	440b      	add	r3, r1
 80038c2:	761a      	strb	r2, [r3, #24]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000e100 	.word	0xe000e100
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	; 0x24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f1c3 0307 	rsb	r3, r3, #7
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	bf28      	it	cs
 80038f6:	2304      	movcs	r3, #4
 80038f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3304      	adds	r3, #4
 80038fe:	2b06      	cmp	r3, #6
 8003900:	d902      	bls.n	8003908 <NVIC_EncodePriority+0x30>
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3b03      	subs	r3, #3
 8003906:	e000      	b.n	800390a <NVIC_EncodePriority+0x32>
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43da      	mvns	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	401a      	ands	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003920:	f04f 31ff 	mov.w	r1, #4294967295
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fa01 f303 	lsl.w	r3, r1, r3
 800392a:	43d9      	mvns	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003930:	4313      	orrs	r3, r2
         );
}
 8003932:	4618      	mov	r0, r3
 8003934:	3724      	adds	r7, #36	; 0x24
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ff28 	bl	800379c <__NVIC_SetPriorityGrouping>
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003966:	f7ff ff3d 	bl	80037e4 <__NVIC_GetPriorityGrouping>
 800396a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	6978      	ldr	r0, [r7, #20]
 8003972:	f7ff ffb1 	bl	80038d8 <NVIC_EncodePriority>
 8003976:	4602      	mov	r2, r0
 8003978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397c:	4611      	mov	r1, r2
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff ff80 	bl	8003884 <__NVIC_SetPriority>
}
 8003984:	bf00      	nop
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff ff30 	bl	8003800 <__NVIC_EnableIRQ>
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80039b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff ff40 	bl	800383c <__NVIC_DisableIRQ>
}
 80039bc:	bf00      	nop
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039d0:	f7ff feb4 	bl	800373c <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e099      	b.n	8003b14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0201 	bic.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a00:	e00f      	b.n	8003a22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a02:	f7ff fe9b 	bl	800373c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d908      	bls.n	8003a22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2203      	movs	r2, #3
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e078      	b.n	8003b14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1e8      	bne.n	8003a02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <HAL_DMA_Init+0x158>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d107      	bne.n	8003a8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	4313      	orrs	r3, r2
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f023 0307 	bic.w	r3, r3, #7
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d117      	bne.n	8003ae6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f8df 	bl	8003c8c <DMA_CheckFifoParam>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2240      	movs	r2, #64	; 0x40
 8003ad8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e016      	b.n	8003b14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f896 	bl	8003c20 <DMA_CalcBaseAndBitshift>
 8003af4:	4603      	mov	r3, r0
 8003af6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	223f      	movs	r2, #63	; 0x3f
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	f010803f 	.word	0xf010803f

08003b20 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e050      	b.n	8003bd4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d101      	bne.n	8003b42 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e048      	b.n	8003bd4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2200      	movs	r2, #0
 8003b78:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2221      	movs	r2, #33	; 0x21
 8003b80:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f84c 	bl	8003c20 <DMA_CalcBaseAndBitshift>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb4:	223f      	movs	r2, #63	; 0x3f
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d004      	beq.n	8003bfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2280      	movs	r2, #128	; 0x80
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e00c      	b.n	8003c14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2205      	movs	r2, #5
 8003bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0201 	bic.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	3b10      	subs	r3, #16
 8003c30:	4a14      	ldr	r2, [pc, #80]	; (8003c84 <DMA_CalcBaseAndBitshift+0x64>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	091b      	lsrs	r3, r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c3a:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <DMA_CalcBaseAndBitshift+0x68>)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d909      	bls.n	8003c62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c56:	f023 0303 	bic.w	r3, r3, #3
 8003c5a:	1d1a      	adds	r2, r3, #4
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	659a      	str	r2, [r3, #88]	; 0x58
 8003c60:	e007      	b.n	8003c72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c6a:	f023 0303 	bic.w	r3, r3, #3
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	aaaaaaab 	.word	0xaaaaaaab
 8003c88:	08011890 	.word	0x08011890

08003c8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d11f      	bne.n	8003ce6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d856      	bhi.n	8003d5a <DMA_CheckFifoParam+0xce>
 8003cac:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <DMA_CheckFifoParam+0x28>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003cc5 	.word	0x08003cc5
 8003cb8:	08003cd7 	.word	0x08003cd7
 8003cbc:	08003cc5 	.word	0x08003cc5
 8003cc0:	08003d5b 	.word	0x08003d5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d046      	beq.n	8003d5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd4:	e043      	b.n	8003d5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cde:	d140      	bne.n	8003d62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce4:	e03d      	b.n	8003d62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cee:	d121      	bne.n	8003d34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d837      	bhi.n	8003d66 <DMA_CheckFifoParam+0xda>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <DMA_CheckFifoParam+0x70>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d0d 	.word	0x08003d0d
 8003d00:	08003d13 	.word	0x08003d13
 8003d04:	08003d0d 	.word	0x08003d0d
 8003d08:	08003d25 	.word	0x08003d25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d10:	e030      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d025      	beq.n	8003d6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d22:	e022      	b.n	8003d6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d2c:	d11f      	bne.n	8003d6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d32:	e01c      	b.n	8003d6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d903      	bls.n	8003d42 <DMA_CheckFifoParam+0xb6>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d003      	beq.n	8003d48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d40:	e018      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
      break;
 8003d46:	e015      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00e      	beq.n	8003d72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
      break;
 8003d58:	e00b      	b.n	8003d72 <DMA_CheckFifoParam+0xe6>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e00a      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e008      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      break;
 8003d62:	bf00      	nop
 8003d64:	e006      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      break;
 8003d66:	bf00      	nop
 8003d68:	e004      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e002      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <DMA_CheckFifoParam+0xe8>
      break;
 8003d72:	bf00      	nop
    }
  } 
  
  return status; 
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop

08003d84 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e03b      	b.n	8003e0e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f833 	bl	8003e16 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	f023 0107 	bic.w	r1, r3, #7
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003dee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68d1      	ldr	r1, [r2, #12]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b086      	sub	sp, #24
 8003e2e:	af02      	add	r7, sp, #8
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_DMA2D_Start+0x1c>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e018      	b.n	8003e78 <HAL_DMA2D_Start+0x4e>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f989 	bl	8004178 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0201 	orr.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d056      	beq.n	8003f4a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e9c:	f7ff fc4e 	bl	800373c <HAL_GetTick>
 8003ea0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003ea2:	e04b      	b.n	8003f3c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d023      	beq.n	8003efe <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	f043 0202 	orr.w	r2, r3, #2
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d005      	beq.n	8003ee2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	f043 0201 	orr.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2221      	movs	r2, #33	; 0x21
 8003ee8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2204      	movs	r2, #4
 8003eee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e0a5      	b.n	800404a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d01a      	beq.n	8003f3c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f06:	f7ff fc19 	bl	800373c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <HAL_DMA2D_PollForTransfer+0x9c>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10f      	bne.n	8003f3c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e086      	b.n	800404a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0ac      	beq.n	8003ea4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f003 0320 	and.w	r3, r3, #32
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d061      	beq.n	8004030 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f6c:	f7ff fbe6 	bl	800373c <HAL_GetTick>
 8003f70:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003f72:	e056      	b.n	8004022 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d02e      	beq.n	8003fe4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	f043 0204 	orr.w	r2, r3, #4
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	f043 0202 	orr.w	r2, r3, #2
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	f043 0201 	orr.w	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2229      	movs	r2, #41	; 0x29
 8003fce:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e032      	b.n	800404a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fea:	d01a      	beq.n	8004022 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fec:	f7ff fba6 	bl	800373c <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d302      	bcc.n	8004002 <HAL_DMA2D_PollForTransfer+0x182>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10f      	bne.n	8004022 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004006:	f043 0220 	orr.w	r2, r3, #32
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2203      	movs	r2, #3
 8004012:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e013      	b.n	800404a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0a1      	beq.n	8003f74 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2212      	movs	r2, #18
 8004036:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_DMA2D_ConfigLayer+0x20>
 8004070:	2302      	movs	r3, #2
 8004072:	e079      	b.n	8004168 <HAL_DMA2D_ConfigLayer+0x114>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	3318      	adds	r3, #24
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4413      	add	r3, r2
 800408e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	041b      	lsls	r3, r3, #16
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800409e:	4b35      	ldr	r3, [pc, #212]	; (8004174 <HAL_DMA2D_ConfigLayer+0x120>)
 80040a0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b0a      	cmp	r3, #10
 80040a8:	d003      	beq.n	80040b2 <HAL_DMA2D_ConfigLayer+0x5e>
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b09      	cmp	r3, #9
 80040b0:	d107      	bne.n	80040c2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e005      	b.n	80040ce <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	061b      	lsls	r3, r3, #24
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d120      	bne.n	8004116 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	43db      	mvns	r3, r3
 80040de:	ea02 0103 	and.w	r1, r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b0a      	cmp	r3, #10
 80040fc:	d003      	beq.n	8004106 <HAL_DMA2D_ConfigLayer+0xb2>
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b09      	cmp	r3, #9
 8004104:	d127      	bne.n	8004156 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004112:	629a      	str	r2, [r3, #40]	; 0x28
 8004114:	e01f      	b.n	8004156 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	43db      	mvns	r3, r3
 8004120:	ea02 0103 	and.w	r1, r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	430a      	orrs	r2, r1
 800412c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b0a      	cmp	r3, #10
 800413e:	d003      	beq.n	8004148 <HAL_DMA2D_ConfigLayer+0xf4>
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b09      	cmp	r3, #9
 8004146:	d106      	bne.n	8004156 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004154:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	ff03000f 	.word	0xff03000f

08004178 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004178:	b480      	push	{r7}
 800417a:	b08b      	sub	sp, #44	; 0x2c
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	041a      	lsls	r2, r3, #16
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	431a      	orrs	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041b0:	d174      	bne.n	800429c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80041b8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041c0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80041c8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d108      	bne.n	80041ea <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	431a      	orrs	r2, r3
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
 80041e8:	e053      	b.n	8004292 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d106      	bne.n	8004200 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	e048      	b.n	8004292 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d111      	bne.n	800422c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	0cdb      	lsrs	r3, r3, #19
 800420c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	0a9b      	lsrs	r3, r3, #10
 8004212:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	08db      	lsrs	r3, r3, #3
 8004218:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	02db      	lsls	r3, r3, #11
 8004222:	4313      	orrs	r3, r2
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
 800422a:	e032      	b.n	8004292 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d117      	bne.n	8004264 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	0fdb      	lsrs	r3, r3, #31
 8004238:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	0cdb      	lsrs	r3, r3, #19
 800423e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	0adb      	lsrs	r3, r3, #11
 8004244:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	08db      	lsrs	r3, r3, #3
 800424a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	029b      	lsls	r3, r3, #10
 8004254:	431a      	orrs	r2, r3
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	03db      	lsls	r3, r3, #15
 800425a:	4313      	orrs	r3, r2
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
 8004262:	e016      	b.n	8004292 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	0f1b      	lsrs	r3, r3, #28
 8004268:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	0d1b      	lsrs	r3, r3, #20
 800426e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	0b1b      	lsrs	r3, r3, #12
 8004274:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	011a      	lsls	r2, r3, #4
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	431a      	orrs	r2, r3
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	031b      	lsls	r3, r3, #12
 800428a:	4313      	orrs	r3, r2
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004298:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800429a:	e003      	b.n	80042a4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	60da      	str	r2, [r3, #12]
}
 80042a4:	bf00      	nop
 80042a6:	372c      	adds	r7, #44	; 0x2c
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b089      	sub	sp, #36	; 0x24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042be:	2300      	movs	r3, #0
 80042c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
 80042ca:	e177      	b.n	80045bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042cc:	2201      	movs	r2, #1
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4013      	ands	r3, r2
 80042de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	f040 8166 	bne.w	80045b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d005      	beq.n	8004302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d130      	bne.n	8004364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	2203      	movs	r2, #3
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4313      	orrs	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004338:	2201      	movs	r2, #1
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	091b      	lsrs	r3, r3, #4
 800434e:	f003 0201 	and.w	r2, r3, #1
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b03      	cmp	r3, #3
 800436e:	d017      	beq.n	80043a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	2203      	movs	r2, #3
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4313      	orrs	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d123      	bne.n	80043f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	08da      	lsrs	r2, r3, #3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3208      	adds	r2, #8
 80043b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	220f      	movs	r2, #15
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	08da      	lsrs	r2, r3, #3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3208      	adds	r2, #8
 80043ee:	69b9      	ldr	r1, [r7, #24]
 80043f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	2203      	movs	r2, #3
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 0203 	and.w	r2, r3, #3
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80c0 	beq.w	80045b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	4b66      	ldr	r3, [pc, #408]	; (80045d4 <HAL_GPIO_Init+0x324>)
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	4a65      	ldr	r2, [pc, #404]	; (80045d4 <HAL_GPIO_Init+0x324>)
 8004440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004444:	6453      	str	r3, [r2, #68]	; 0x44
 8004446:	4b63      	ldr	r3, [pc, #396]	; (80045d4 <HAL_GPIO_Init+0x324>)
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004452:	4a61      	ldr	r2, [pc, #388]	; (80045d8 <HAL_GPIO_Init+0x328>)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	089b      	lsrs	r3, r3, #2
 8004458:	3302      	adds	r3, #2
 800445a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	220f      	movs	r2, #15
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a58      	ldr	r2, [pc, #352]	; (80045dc <HAL_GPIO_Init+0x32c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d037      	beq.n	80044ee <HAL_GPIO_Init+0x23e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a57      	ldr	r2, [pc, #348]	; (80045e0 <HAL_GPIO_Init+0x330>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d031      	beq.n	80044ea <HAL_GPIO_Init+0x23a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a56      	ldr	r2, [pc, #344]	; (80045e4 <HAL_GPIO_Init+0x334>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d02b      	beq.n	80044e6 <HAL_GPIO_Init+0x236>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a55      	ldr	r2, [pc, #340]	; (80045e8 <HAL_GPIO_Init+0x338>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d025      	beq.n	80044e2 <HAL_GPIO_Init+0x232>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a54      	ldr	r2, [pc, #336]	; (80045ec <HAL_GPIO_Init+0x33c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01f      	beq.n	80044de <HAL_GPIO_Init+0x22e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a53      	ldr	r2, [pc, #332]	; (80045f0 <HAL_GPIO_Init+0x340>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d019      	beq.n	80044da <HAL_GPIO_Init+0x22a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a52      	ldr	r2, [pc, #328]	; (80045f4 <HAL_GPIO_Init+0x344>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_GPIO_Init+0x226>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a51      	ldr	r2, [pc, #324]	; (80045f8 <HAL_GPIO_Init+0x348>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00d      	beq.n	80044d2 <HAL_GPIO_Init+0x222>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a50      	ldr	r2, [pc, #320]	; (80045fc <HAL_GPIO_Init+0x34c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <HAL_GPIO_Init+0x21e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a4f      	ldr	r2, [pc, #316]	; (8004600 <HAL_GPIO_Init+0x350>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d101      	bne.n	80044ca <HAL_GPIO_Init+0x21a>
 80044c6:	2309      	movs	r3, #9
 80044c8:	e012      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044ca:	230a      	movs	r3, #10
 80044cc:	e010      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044ce:	2308      	movs	r3, #8
 80044d0:	e00e      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044d2:	2307      	movs	r3, #7
 80044d4:	e00c      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044d6:	2306      	movs	r3, #6
 80044d8:	e00a      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044da:	2305      	movs	r3, #5
 80044dc:	e008      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044de:	2304      	movs	r3, #4
 80044e0:	e006      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044e2:	2303      	movs	r3, #3
 80044e4:	e004      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e002      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044ee:	2300      	movs	r3, #0
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	f002 0203 	and.w	r2, r2, #3
 80044f6:	0092      	lsls	r2, r2, #2
 80044f8:	4093      	lsls	r3, r2
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004500:	4935      	ldr	r1, [pc, #212]	; (80045d8 <HAL_GPIO_Init+0x328>)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	089b      	lsrs	r3, r3, #2
 8004506:	3302      	adds	r3, #2
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800450e:	4b3d      	ldr	r3, [pc, #244]	; (8004604 <HAL_GPIO_Init+0x354>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	43db      	mvns	r3, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004532:	4a34      	ldr	r2, [pc, #208]	; (8004604 <HAL_GPIO_Init+0x354>)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004538:	4b32      	ldr	r3, [pc, #200]	; (8004604 <HAL_GPIO_Init+0x354>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	43db      	mvns	r3, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800455c:	4a29      	ldr	r2, [pc, #164]	; (8004604 <HAL_GPIO_Init+0x354>)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004562:	4b28      	ldr	r3, [pc, #160]	; (8004604 <HAL_GPIO_Init+0x354>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004586:	4a1f      	ldr	r2, [pc, #124]	; (8004604 <HAL_GPIO_Init+0x354>)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800458c:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <HAL_GPIO_Init+0x354>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045b0:	4a14      	ldr	r2, [pc, #80]	; (8004604 <HAL_GPIO_Init+0x354>)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3301      	adds	r3, #1
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	2b0f      	cmp	r3, #15
 80045c0:	f67f ae84 	bls.w	80042cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	3724      	adds	r7, #36	; 0x24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40013800 	.word	0x40013800
 80045dc:	40020000 	.word	0x40020000
 80045e0:	40020400 	.word	0x40020400
 80045e4:	40020800 	.word	0x40020800
 80045e8:	40020c00 	.word	0x40020c00
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40021400 	.word	0x40021400
 80045f4:	40021800 	.word	0x40021800
 80045f8:	40021c00 	.word	0x40021c00
 80045fc:	40022000 	.word	0x40022000
 8004600:	40022400 	.word	0x40022400
 8004604:	40013c00 	.word	0x40013c00

08004608 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004612:	2300      	movs	r3, #0
 8004614:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800461a:	2300      	movs	r3, #0
 800461c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	e0d9      	b.n	80047d8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004624:	2201      	movs	r2, #1
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4013      	ands	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	429a      	cmp	r2, r3
 800463c:	f040 80c9 	bne.w	80047d2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004640:	4a6b      	ldr	r2, [pc, #428]	; (80047f0 <HAL_GPIO_DeInit+0x1e8>)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	089b      	lsrs	r3, r3, #2
 8004646:	3302      	adds	r3, #2
 8004648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	220f      	movs	r2, #15
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	4013      	ands	r3, r2
 8004660:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a63      	ldr	r2, [pc, #396]	; (80047f4 <HAL_GPIO_DeInit+0x1ec>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d037      	beq.n	80046da <HAL_GPIO_DeInit+0xd2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a62      	ldr	r2, [pc, #392]	; (80047f8 <HAL_GPIO_DeInit+0x1f0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d031      	beq.n	80046d6 <HAL_GPIO_DeInit+0xce>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a61      	ldr	r2, [pc, #388]	; (80047fc <HAL_GPIO_DeInit+0x1f4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d02b      	beq.n	80046d2 <HAL_GPIO_DeInit+0xca>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a60      	ldr	r2, [pc, #384]	; (8004800 <HAL_GPIO_DeInit+0x1f8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d025      	beq.n	80046ce <HAL_GPIO_DeInit+0xc6>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a5f      	ldr	r2, [pc, #380]	; (8004804 <HAL_GPIO_DeInit+0x1fc>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01f      	beq.n	80046ca <HAL_GPIO_DeInit+0xc2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a5e      	ldr	r2, [pc, #376]	; (8004808 <HAL_GPIO_DeInit+0x200>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d019      	beq.n	80046c6 <HAL_GPIO_DeInit+0xbe>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a5d      	ldr	r2, [pc, #372]	; (800480c <HAL_GPIO_DeInit+0x204>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <HAL_GPIO_DeInit+0xba>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a5c      	ldr	r2, [pc, #368]	; (8004810 <HAL_GPIO_DeInit+0x208>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00d      	beq.n	80046be <HAL_GPIO_DeInit+0xb6>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a5b      	ldr	r2, [pc, #364]	; (8004814 <HAL_GPIO_DeInit+0x20c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <HAL_GPIO_DeInit+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a5a      	ldr	r2, [pc, #360]	; (8004818 <HAL_GPIO_DeInit+0x210>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_GPIO_DeInit+0xae>
 80046b2:	2309      	movs	r3, #9
 80046b4:	e012      	b.n	80046dc <HAL_GPIO_DeInit+0xd4>
 80046b6:	230a      	movs	r3, #10
 80046b8:	e010      	b.n	80046dc <HAL_GPIO_DeInit+0xd4>
 80046ba:	2308      	movs	r3, #8
 80046bc:	e00e      	b.n	80046dc <HAL_GPIO_DeInit+0xd4>
 80046be:	2307      	movs	r3, #7
 80046c0:	e00c      	b.n	80046dc <HAL_GPIO_DeInit+0xd4>
 80046c2:	2306      	movs	r3, #6
 80046c4:	e00a      	b.n	80046dc <HAL_GPIO_DeInit+0xd4>
 80046c6:	2305      	movs	r3, #5
 80046c8:	e008      	b.n	80046dc <HAL_GPIO_DeInit+0xd4>
 80046ca:	2304      	movs	r3, #4
 80046cc:	e006      	b.n	80046dc <HAL_GPIO_DeInit+0xd4>
 80046ce:	2303      	movs	r3, #3
 80046d0:	e004      	b.n	80046dc <HAL_GPIO_DeInit+0xd4>
 80046d2:	2302      	movs	r3, #2
 80046d4:	e002      	b.n	80046dc <HAL_GPIO_DeInit+0xd4>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <HAL_GPIO_DeInit+0xd4>
 80046da:	2300      	movs	r3, #0
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	f002 0203 	and.w	r2, r2, #3
 80046e2:	0092      	lsls	r2, r2, #2
 80046e4:	4093      	lsls	r3, r2
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d132      	bne.n	8004752 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80046ec:	4b4b      	ldr	r3, [pc, #300]	; (800481c <HAL_GPIO_DeInit+0x214>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	43db      	mvns	r3, r3
 80046f4:	4949      	ldr	r1, [pc, #292]	; (800481c <HAL_GPIO_DeInit+0x214>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80046fa:	4b48      	ldr	r3, [pc, #288]	; (800481c <HAL_GPIO_DeInit+0x214>)
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	43db      	mvns	r3, r3
 8004702:	4946      	ldr	r1, [pc, #280]	; (800481c <HAL_GPIO_DeInit+0x214>)
 8004704:	4013      	ands	r3, r2
 8004706:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004708:	4b44      	ldr	r3, [pc, #272]	; (800481c <HAL_GPIO_DeInit+0x214>)
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	43db      	mvns	r3, r3
 8004710:	4942      	ldr	r1, [pc, #264]	; (800481c <HAL_GPIO_DeInit+0x214>)
 8004712:	4013      	ands	r3, r2
 8004714:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004716:	4b41      	ldr	r3, [pc, #260]	; (800481c <HAL_GPIO_DeInit+0x214>)
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	43db      	mvns	r3, r3
 800471e:	493f      	ldr	r1, [pc, #252]	; (800481c <HAL_GPIO_DeInit+0x214>)
 8004720:	4013      	ands	r3, r2
 8004722:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	220f      	movs	r2, #15
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004734:	4a2e      	ldr	r2, [pc, #184]	; (80047f0 <HAL_GPIO_DeInit+0x1e8>)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	089b      	lsrs	r3, r3, #2
 800473a:	3302      	adds	r3, #2
 800473c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	43da      	mvns	r2, r3
 8004744:	482a      	ldr	r0, [pc, #168]	; (80047f0 <HAL_GPIO_DeInit+0x1e8>)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	089b      	lsrs	r3, r3, #2
 800474a:	400a      	ands	r2, r1
 800474c:	3302      	adds	r3, #2
 800474e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	2103      	movs	r1, #3
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	401a      	ands	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	08da      	lsrs	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3208      	adds	r2, #8
 8004770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	220f      	movs	r2, #15
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43db      	mvns	r3, r3
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	08d2      	lsrs	r2, r2, #3
 8004788:	4019      	ands	r1, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3208      	adds	r2, #8
 800478e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	2103      	movs	r1, #3
 800479c:	fa01 f303 	lsl.w	r3, r1, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	401a      	ands	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	2101      	movs	r1, #1
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	fa01 f303 	lsl.w	r3, r1, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	401a      	ands	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	2103      	movs	r1, #3
 80047c6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	401a      	ands	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	3301      	adds	r3, #1
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b0f      	cmp	r3, #15
 80047dc:	f67f af22 	bls.w	8004624 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40013800 	.word	0x40013800
 80047f4:	40020000 	.word	0x40020000
 80047f8:	40020400 	.word	0x40020400
 80047fc:	40020800 	.word	0x40020800
 8004800:	40020c00 	.word	0x40020c00
 8004804:	40021000 	.word	0x40021000
 8004808:	40021400 	.word	0x40021400
 800480c:	40021800 	.word	0x40021800
 8004810:	40021c00 	.word	0x40021c00
 8004814:	40022000 	.word	0x40022000
 8004818:	40022400 	.word	0x40022400
 800481c:	40013c00 	.word	0x40013c00

08004820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	807b      	strh	r3, [r7, #2]
 800482c:	4613      	mov	r3, r2
 800482e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004830:	787b      	ldrb	r3, [r7, #1]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004836:	887a      	ldrh	r2, [r7, #2]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800483c:	e003      	b.n	8004846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800483e:	887b      	ldrh	r3, [r7, #2]
 8004840:	041a      	lsls	r2, r3, #16
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	619a      	str	r2, [r3, #24]
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
	...

08004854 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0bf      	b.n	80049e6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f8ba 	bl	80049f4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699a      	ldr	r2, [r3, #24]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004896:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6999      	ldr	r1, [r3, #24]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048ac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6899      	ldr	r1, [r3, #8]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4b4a      	ldr	r3, [pc, #296]	; (80049f0 <HAL_LTDC_Init+0x19c>)
 80048c8:	400b      	ands	r3, r1
 80048ca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	041b      	lsls	r3, r3, #16
 80048d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6899      	ldr	r1, [r3, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699a      	ldr	r2, [r3, #24]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68d9      	ldr	r1, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4b3e      	ldr	r3, [pc, #248]	; (80049f0 <HAL_LTDC_Init+0x19c>)
 80048f6:	400b      	ands	r3, r1
 80048f8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68d9      	ldr	r1, [r3, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1a      	ldr	r2, [r3, #32]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6919      	ldr	r1, [r3, #16]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b33      	ldr	r3, [pc, #204]	; (80049f0 <HAL_LTDC_Init+0x19c>)
 8004924:	400b      	ands	r3, r1
 8004926:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	041b      	lsls	r3, r3, #16
 800492e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6919      	ldr	r1, [r3, #16]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6959      	ldr	r1, [r3, #20]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <HAL_LTDC_Init+0x19c>)
 8004952:	400b      	ands	r3, r1
 8004954:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	041b      	lsls	r3, r3, #16
 800495c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6959      	ldr	r1, [r3, #20]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004984:	041b      	lsls	r3, r3, #16
 8004986:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004996:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0206 	orr.w	r2, r2, #6
 80049c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	f000f800 	.word	0xf000f800

080049f4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a08:	b5b0      	push	{r4, r5, r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_LTDC_ConfigLayer+0x1a>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e02c      	b.n	8004a7c <HAL_LTDC_ConfigLayer+0x74>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2134      	movs	r1, #52	; 0x34
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4614      	mov	r4, r2
 8004a46:	461d      	mov	r5, r3
 8004a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a54:	682b      	ldr	r3, [r5, #0]
 8004a56:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f83b 	bl	8004ad8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2201      	movs	r2, #1
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bdb0      	pop	{r4, r5, r7, pc}

08004a84 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_LTDC_EnableDither+0x16>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e016      	b.n	8004ac8 <HAL_LTDC_EnableDither+0x44>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004aaa:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <HAL_LTDC_EnableDither+0x50>)
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	4a09      	ldr	r2, [pc, #36]	; (8004ad4 <HAL_LTDC_EnableDither+0x50>)
 8004ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40016800 	.word	0x40016800

08004ad8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b089      	sub	sp, #36	; 0x24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af4:	4413      	add	r3, r2
 8004af6:	041b      	lsls	r3, r3, #16
 8004af8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	01db      	lsls	r3, r3, #7
 8004b04:	4413      	add	r3, r2
 8004b06:	3384      	adds	r3, #132	; 0x84
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	4611      	mov	r1, r2
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	01d2      	lsls	r2, r2, #7
 8004b14:	440a      	add	r2, r1
 8004b16:	3284      	adds	r2, #132	; 0x84
 8004b18:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004b1c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b2e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b30:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4619      	mov	r1, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	01db      	lsls	r3, r3, #7
 8004b3c:	440b      	add	r3, r1
 8004b3e:	3384      	adds	r3, #132	; 0x84
 8004b40:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b46:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b56:	4413      	add	r3, r2
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	01db      	lsls	r3, r3, #7
 8004b66:	4413      	add	r3, r2
 8004b68:	3384      	adds	r3, #132	; 0x84
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	4611      	mov	r1, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	01d2      	lsls	r2, r2, #7
 8004b76:	440a      	add	r2, r1
 8004b78:	3284      	adds	r2, #132	; 0x84
 8004b7a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004b7e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b8e:	4413      	add	r3, r2
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4619      	mov	r1, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	01db      	lsls	r3, r3, #7
 8004b9c:	440b      	add	r3, r1
 8004b9e:	3384      	adds	r3, #132	; 0x84
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	01db      	lsls	r3, r3, #7
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3384      	adds	r3, #132	; 0x84
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	01d2      	lsls	r2, r2, #7
 8004bc2:	440a      	add	r2, r1
 8004bc4:	3284      	adds	r2, #132	; 0x84
 8004bc6:	f023 0307 	bic.w	r3, r3, #7
 8004bca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	01db      	lsls	r3, r3, #7
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3384      	adds	r3, #132	; 0x84
 8004bda:	461a      	mov	r2, r3
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004be8:	021b      	lsls	r3, r3, #8
 8004bea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004bf2:	041b      	lsls	r3, r3, #16
 8004bf4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	061b      	lsls	r3, r3, #24
 8004bfc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	01db      	lsls	r3, r3, #7
 8004c08:	4413      	add	r3, r2
 8004c0a:	3384      	adds	r3, #132	; 0x84
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	01db      	lsls	r3, r3, #7
 8004c18:	4413      	add	r3, r2
 8004c1a:	3384      	adds	r3, #132	; 0x84
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2300      	movs	r3, #0
 8004c20:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c28:	461a      	mov	r2, r3
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4619      	mov	r1, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	01db      	lsls	r3, r3, #7
 8004c3c:	440b      	add	r3, r1
 8004c3e:	3384      	adds	r3, #132	; 0x84
 8004c40:	4619      	mov	r1, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	01db      	lsls	r3, r3, #7
 8004c52:	4413      	add	r3, r2
 8004c54:	3384      	adds	r3, #132	; 0x84
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	01d2      	lsls	r2, r2, #7
 8004c62:	440a      	add	r2, r1
 8004c64:	3284      	adds	r2, #132	; 0x84
 8004c66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c6a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	01db      	lsls	r3, r3, #7
 8004c76:	4413      	add	r3, r2
 8004c78:	3384      	adds	r3, #132	; 0x84
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	01db      	lsls	r3, r3, #7
 8004c8c:	4413      	add	r3, r2
 8004c8e:	3384      	adds	r3, #132	; 0x84
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	4611      	mov	r1, r2
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	01d2      	lsls	r2, r2, #7
 8004c9c:	440a      	add	r2, r1
 8004c9e:	3284      	adds	r2, #132	; 0x84
 8004ca0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ca4:	f023 0307 	bic.w	r3, r3, #7
 8004ca8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	68f9      	ldr	r1, [r7, #12]
 8004cb4:	6809      	ldr	r1, [r1, #0]
 8004cb6:	4608      	mov	r0, r1
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	01c9      	lsls	r1, r1, #7
 8004cbc:	4401      	add	r1, r0
 8004cbe:	3184      	adds	r1, #132	; 0x84
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	01db      	lsls	r3, r3, #7
 8004cce:	4413      	add	r3, r2
 8004cd0:	3384      	adds	r3, #132	; 0x84
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	01db      	lsls	r3, r3, #7
 8004cde:	4413      	add	r3, r2
 8004ce0:	3384      	adds	r3, #132	; 0x84
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	01db      	lsls	r3, r3, #7
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3384      	adds	r3, #132	; 0x84
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d102      	bne.n	8004d0c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004d06:	2304      	movs	r3, #4
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	e01b      	b.n	8004d44 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d102      	bne.n	8004d1a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004d14:	2303      	movs	r3, #3
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	e014      	b.n	8004d44 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d00b      	beq.n	8004d3a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d007      	beq.n	8004d3a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d003      	beq.n	8004d3a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d36:	2b07      	cmp	r3, #7
 8004d38:	d102      	bne.n	8004d40 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	e001      	b.n	8004d44 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004d40:	2301      	movs	r3, #1
 8004d42:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	01db      	lsls	r3, r3, #7
 8004d4e:	4413      	add	r3, r2
 8004d50:	3384      	adds	r3, #132	; 0x84
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	4611      	mov	r1, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	01d2      	lsls	r2, r2, #7
 8004d5e:	440a      	add	r2, r1
 8004d60:	3284      	adds	r2, #132	; 0x84
 8004d62:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004d66:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	fb02 f303 	mul.w	r3, r2, r3
 8004d72:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6859      	ldr	r1, [r3, #4]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	1acb      	subs	r3, r1, r3
 8004d7e:	69f9      	ldr	r1, [r7, #28]
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d86:	68f9      	ldr	r1, [r7, #12]
 8004d88:	6809      	ldr	r1, [r1, #0]
 8004d8a:	4608      	mov	r0, r1
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	01c9      	lsls	r1, r1, #7
 8004d90:	4401      	add	r1, r0
 8004d92:	3184      	adds	r1, #132	; 0x84
 8004d94:	4313      	orrs	r3, r2
 8004d96:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	01db      	lsls	r3, r3, #7
 8004da2:	4413      	add	r3, r2
 8004da4:	3384      	adds	r3, #132	; 0x84
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	4611      	mov	r1, r2
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	01d2      	lsls	r2, r2, #7
 8004db2:	440a      	add	r2, r1
 8004db4:	3284      	adds	r2, #132	; 0x84
 8004db6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004dba:	f023 0307 	bic.w	r3, r3, #7
 8004dbe:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	01db      	lsls	r3, r3, #7
 8004dca:	4413      	add	r3, r2
 8004dcc:	3384      	adds	r3, #132	; 0x84
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	01db      	lsls	r3, r3, #7
 8004de0:	4413      	add	r3, r2
 8004de2:	3384      	adds	r3, #132	; 0x84
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	4611      	mov	r1, r2
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	01d2      	lsls	r2, r2, #7
 8004df0:	440a      	add	r2, r1
 8004df2:	3284      	adds	r2, #132	; 0x84
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	6013      	str	r3, [r2, #0]
}
 8004dfa:	bf00      	nop
 8004dfc:	3724      	adds	r7, #36	; 0x24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b086      	sub	sp, #24
 8004e0a:	af02      	add	r7, sp, #8
 8004e0c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e101      	b.n	800501c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f009 fefc 	bl	800ec30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e46:	d102      	bne.n	8004e4e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f003 fd2b 	bl	80088ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	7c1a      	ldrb	r2, [r3, #16]
 8004e60:	f88d 2000 	strb.w	r2, [sp]
 8004e64:	3304      	adds	r3, #4
 8004e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e68:	f003 fc0a 	bl	8008680 <USB_CoreInit>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d005      	beq.n	8004e7e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2202      	movs	r2, #2
 8004e76:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e0ce      	b.n	800501c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2100      	movs	r1, #0
 8004e84:	4618      	mov	r0, r3
 8004e86:	f003 fd23 	bl	80088d0 <USB_SetCurrentMode>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0bf      	b.n	800501c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	e04a      	b.n	8004f38 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ea2:	7bfa      	ldrb	r2, [r7, #15]
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	3315      	adds	r3, #21
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004eb6:	7bfa      	ldrb	r2, [r7, #15]
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	3314      	adds	r3, #20
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004eca:	7bfa      	ldrb	r2, [r7, #15]
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	b298      	uxth	r0, r3
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	332e      	adds	r3, #46	; 0x2e
 8004ede:	4602      	mov	r2, r0
 8004ee0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ee2:	7bfa      	ldrb	r2, [r7, #15]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4413      	add	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	3318      	adds	r3, #24
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ef6:	7bfa      	ldrb	r2, [r7, #15]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	331c      	adds	r3, #28
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f0a:	7bfa      	ldrb	r2, [r7, #15]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	3320      	adds	r3, #32
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f1e:	7bfa      	ldrb	r2, [r7, #15]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3324      	adds	r3, #36	; 0x24
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	3301      	adds	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	791b      	ldrb	r3, [r3, #4]
 8004f3c:	7bfa      	ldrb	r2, [r7, #15]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d3af      	bcc.n	8004ea2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f42:	2300      	movs	r3, #0
 8004f44:	73fb      	strb	r3, [r7, #15]
 8004f46:	e044      	b.n	8004fd2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f48:	7bfa      	ldrb	r2, [r7, #15]
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	f203 2355 	addw	r3, r3, #597	; 0x255
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f5e:	7bfa      	ldrb	r2, [r7, #15]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8004f70:	7bfa      	ldrb	r2, [r7, #15]
 8004f72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f74:	7bfa      	ldrb	r2, [r7, #15]
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f8a:	7bfa      	ldrb	r2, [r7, #15]
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fa0:	7bfa      	ldrb	r2, [r7, #15]
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004fb6:	7bfa      	ldrb	r2, [r7, #15]
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	791b      	ldrb	r3, [r3, #4]
 8004fd6:	7bfa      	ldrb	r2, [r7, #15]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d3b5      	bcc.n	8004f48 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	7c1a      	ldrb	r2, [r3, #16]
 8004fe4:	f88d 2000 	strb.w	r2, [sp]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fec:	f003 fcbc 	bl	8008968 <USB_DevInit>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e00c      	b.n	800501c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	f004 fd00 	bl	8009a1a <USB_DevDisconnect>

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_PCD_Start+0x1c>
 800503c:	2302      	movs	r3, #2
 800503e:	e022      	b.n	8005086 <HAL_PCD_Start+0x62>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d009      	beq.n	8005068 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005058:	2b01      	cmp	r3, #1
 800505a:	d105      	bne.n	8005068 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f003 fc0d 	bl	800888c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f004 fcae 	bl	80099d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800508e:	b590      	push	{r4, r7, lr}
 8005090:	b08d      	sub	sp, #52	; 0x34
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f004 fd6c 	bl	8009b82 <USB_GetMode>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f040 848c 	bne.w	80059ca <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f004 fcd0 	bl	8009a5c <USB_ReadInterrupts>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 8482 	beq.w	80059c8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	0a1b      	lsrs	r3, r3, #8
 80050ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f004 fcbd 	bl	8009a5c <USB_ReadInterrupts>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d107      	bne.n	80050fc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695a      	ldr	r2, [r3, #20]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f002 0202 	and.w	r2, r2, #2
 80050fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f004 fcab 	bl	8009a5c <USB_ReadInterrupts>
 8005106:	4603      	mov	r3, r0
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b10      	cmp	r3, #16
 800510e:	d161      	bne.n	80051d4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0210 	bic.w	r2, r2, #16
 800511e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	f003 020f 	and.w	r2, r3, #15
 800512c:	4613      	mov	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	4413      	add	r3, r2
 800513c:	3304      	adds	r3, #4
 800513e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	0c5b      	lsrs	r3, r3, #17
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	2b02      	cmp	r3, #2
 800514a:	d124      	bne.n	8005196 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d035      	beq.n	80051c4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005162:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005166:	b29b      	uxth	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	6a38      	ldr	r0, [r7, #32]
 800516c:	f004 fae2 	bl	8009734 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800517c:	441a      	add	r2, r3
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	695a      	ldr	r2, [r3, #20]
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800518e:	441a      	add	r2, r3
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	615a      	str	r2, [r3, #20]
 8005194:	e016      	b.n	80051c4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	0c5b      	lsrs	r3, r3, #17
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	2b06      	cmp	r3, #6
 80051a0:	d110      	bne.n	80051c4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80051a8:	2208      	movs	r2, #8
 80051aa:	4619      	mov	r1, r3
 80051ac:	6a38      	ldr	r0, [r7, #32]
 80051ae:	f004 fac1 	bl	8009734 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051be:	441a      	add	r2, r3
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0210 	orr.w	r2, r2, #16
 80051d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f004 fc3f 	bl	8009a5c <USB_ReadInterrupts>
 80051de:	4603      	mov	r3, r0
 80051e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051e8:	f040 80a7 	bne.w	800533a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f004 fc44 	bl	8009a82 <USB_ReadDevAllOutEpInterrupt>
 80051fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80051fc:	e099      	b.n	8005332 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 808e 	beq.w	8005326 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	4611      	mov	r1, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f004 fc68 	bl	8009aea <USB_ReadDevOutEPInterrupt>
 800521a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00c      	beq.n	8005240 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	461a      	mov	r2, r3
 8005234:	2301      	movs	r3, #1
 8005236:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fea2 	bl	8005f84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005256:	461a      	mov	r2, r3
 8005258:	2308      	movs	r3, #8
 800525a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800525c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 ff78 	bl	8006154 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b00      	cmp	r3, #0
 800526c:	d008      	beq.n	8005280 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527a:	461a      	mov	r2, r3
 800527c:	2310      	movs	r3, #16
 800527e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d030      	beq.n	80052ec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005292:	2b80      	cmp	r3, #128	; 0x80
 8005294:	d109      	bne.n	80052aa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052a8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80052aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ac:	4613      	mov	r3, r2
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	4413      	add	r3, r2
 80052bc:	3304      	adds	r3, #4
 80052be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	78db      	ldrb	r3, [r3, #3]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d108      	bne.n	80052da <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2200      	movs	r2, #0
 80052cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f009 fdad 	bl	800ee34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e6:	461a      	mov	r2, r3
 80052e8:	2302      	movs	r3, #2
 80052ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d008      	beq.n	8005308 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005302:	461a      	mov	r2, r3
 8005304:	2320      	movs	r3, #32
 8005306:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531e:	461a      	mov	r2, r3
 8005320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005324:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	3301      	adds	r3, #1
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	085b      	lsrs	r3, r3, #1
 8005330:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	2b00      	cmp	r3, #0
 8005336:	f47f af62 	bne.w	80051fe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f004 fb8c 	bl	8009a5c <USB_ReadInterrupts>
 8005344:	4603      	mov	r3, r0
 8005346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800534e:	f040 80db 	bne.w	8005508 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f004 fbad 	bl	8009ab6 <USB_ReadDevAllInEpInterrupt>
 800535c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005362:	e0cd      	b.n	8005500 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 80c2 	beq.w	80054f4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	4611      	mov	r1, r2
 800537a:	4618      	mov	r0, r3
 800537c:	f004 fbd3 	bl	8009b26 <USB_ReadDevInEPInterrupt>
 8005380:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d057      	beq.n	800543c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	2201      	movs	r2, #1
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	43db      	mvns	r3, r3
 80053a6:	69f9      	ldr	r1, [r7, #28]
 80053a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ac:	4013      	ands	r3, r2
 80053ae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	461a      	mov	r2, r3
 80053be:	2301      	movs	r3, #1
 80053c0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	799b      	ldrb	r3, [r3, #6]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d132      	bne.n	8005430 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ce:	4613      	mov	r3, r2
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	3320      	adds	r3, #32
 80053da:	6819      	ldr	r1, [r3, #0]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e0:	4613      	mov	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4403      	add	r3, r0
 80053ea:	331c      	adds	r3, #28
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4419      	add	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f4:	4613      	mov	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4403      	add	r3, r0
 80053fe:	3320      	adds	r3, #32
 8005400:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	2b00      	cmp	r3, #0
 8005406:	d113      	bne.n	8005430 <HAL_PCD_IRQHandler+0x3a2>
 8005408:	6879      	ldr	r1, [r7, #4]
 800540a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540c:	4613      	mov	r3, r2
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	3324      	adds	r3, #36	; 0x24
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d108      	bne.n	8005430 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005428:	461a      	mov	r2, r3
 800542a:	2101      	movs	r1, #1
 800542c:	f004 fbda 	bl	8009be4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	b2db      	uxtb	r3, r3
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f009 fc77 	bl	800ed2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d008      	beq.n	8005458 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005452:	461a      	mov	r2, r3
 8005454:	2308      	movs	r3, #8
 8005456:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546e:	461a      	mov	r2, r3
 8005470:	2310      	movs	r3, #16
 8005472:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548a:	461a      	mov	r2, r3
 800548c:	2340      	movs	r3, #64	; 0x40
 800548e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d023      	beq.n	80054e2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800549a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800549c:	6a38      	ldr	r0, [r7, #32]
 800549e:	f003 fbc7 	bl	8008c30 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80054a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a4:	4613      	mov	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	3310      	adds	r3, #16
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	4413      	add	r3, r2
 80054b2:	3304      	adds	r3, #4
 80054b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	78db      	ldrb	r3, [r3, #3]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d108      	bne.n	80054d0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2200      	movs	r2, #0
 80054c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	4619      	mov	r1, r3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f009 fcc4 	bl	800ee58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054dc:	461a      	mov	r2, r3
 80054de:	2302      	movs	r3, #2
 80054e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80054ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fcbb 	bl	8005e6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	3301      	adds	r3, #1
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	085b      	lsrs	r3, r3, #1
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	2b00      	cmp	r3, #0
 8005504:	f47f af2e 	bne.w	8005364 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4618      	mov	r0, r3
 800550e:	f004 faa5 	bl	8009a5c <USB_ReadInterrupts>
 8005512:	4603      	mov	r3, r0
 8005514:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800551c:	d122      	bne.n	8005564 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800552c:	f023 0301 	bic.w	r3, r3, #1
 8005530:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8005538:	2b01      	cmp	r3, #1
 800553a:	d108      	bne.n	800554e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005544:	2100      	movs	r1, #0
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fea2 	bl	8006290 <HAL_PCDEx_LPM_Callback>
 800554c:	e002      	b.n	8005554 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f009 fc62 	bl	800ee18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695a      	ldr	r2, [r3, #20]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005562:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f004 fa77 	bl	8009a5c <USB_ReadInterrupts>
 800556e:	4603      	mov	r3, r0
 8005570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005578:	d112      	bne.n	80055a0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b01      	cmp	r3, #1
 8005588:	d102      	bne.n	8005590 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f009 fc1e 	bl	800edcc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695a      	ldr	r2, [r3, #20]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800559e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f004 fa59 	bl	8009a5c <USB_ReadInterrupts>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b4:	f040 80b7 	bne.w	8005726 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055c6:	f023 0301 	bic.w	r3, r3, #1
 80055ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2110      	movs	r1, #16
 80055d2:	4618      	mov	r0, r3
 80055d4:	f003 fb2c 	bl	8008c30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055d8:	2300      	movs	r3, #0
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055dc:	e046      	b.n	800566c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ea:	461a      	mov	r2, r3
 80055ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005602:	0151      	lsls	r1, r2, #5
 8005604:	69fa      	ldr	r2, [r7, #28]
 8005606:	440a      	add	r2, r1
 8005608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800560c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005610:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561e:	461a      	mov	r2, r3
 8005620:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005624:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005636:	0151      	lsls	r1, r2, #5
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	440a      	add	r2, r1
 800563c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005640:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005644:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	440a      	add	r2, r1
 800565c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005660:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005664:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	3301      	adds	r3, #1
 800566a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	791b      	ldrb	r3, [r3, #4]
 8005670:	461a      	mov	r2, r3
 8005672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005674:	4293      	cmp	r3, r2
 8005676:	d3b2      	bcc.n	80055de <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005686:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800568a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	7bdb      	ldrb	r3, [r3, #15]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d016      	beq.n	80056c2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a4:	f043 030b 	orr.w	r3, r3, #11
 80056a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ba:	f043 030b 	orr.w	r3, r3, #11
 80056be:	6453      	str	r3, [r2, #68]	; 0x44
 80056c0:	e015      	b.n	80056ee <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80056d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056e8:	f043 030b 	orr.w	r3, r3, #11
 80056ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005700:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005710:	461a      	mov	r2, r3
 8005712:	f004 fa67 	bl	8009be4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695a      	ldr	r2, [r3, #20]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005724:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f004 f996 	bl	8009a5c <USB_ReadInterrupts>
 8005730:	4603      	mov	r3, r0
 8005732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573a:	d123      	bne.n	8005784 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4618      	mov	r0, r3
 8005742:	f004 fa2c 	bl	8009b9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4618      	mov	r0, r3
 800574c:	f003 fae9 	bl	8008d22 <USB_GetDevSpeed>
 8005750:	4603      	mov	r3, r0
 8005752:	461a      	mov	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681c      	ldr	r4, [r3, #0]
 800575c:	f001 fa08 	bl	8006b70 <HAL_RCC_GetHCLKFreq>
 8005760:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005766:	461a      	mov	r2, r3
 8005768:	4620      	mov	r0, r4
 800576a:	f002 ffed 	bl	8008748 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f009 fb03 	bl	800ed7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005782:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f004 f967 	bl	8009a5c <USB_ReadInterrupts>
 800578e:	4603      	mov	r3, r0
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b08      	cmp	r3, #8
 8005796:	d10a      	bne.n	80057ae <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f009 fae0 	bl	800ed5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695a      	ldr	r2, [r3, #20]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f002 0208 	and.w	r2, r2, #8
 80057ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f004 f952 	bl	8009a5c <USB_ReadInterrupts>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057be:	2b80      	cmp	r3, #128	; 0x80
 80057c0:	d123      	bne.n	800580a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057ce:	2301      	movs	r3, #1
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
 80057d2:	e014      	b.n	80057fe <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d8:	4613      	mov	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	f203 2357 	addw	r3, r3, #599	; 0x257
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d105      	bne.n	80057f8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fb08 	bl	8005e08 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	3301      	adds	r3, #1
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	791b      	ldrb	r3, [r3, #4]
 8005802:	461a      	mov	r2, r3
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	4293      	cmp	r3, r2
 8005808:	d3e4      	bcc.n	80057d4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f004 f924 	bl	8009a5c <USB_ReadInterrupts>
 8005814:	4603      	mov	r3, r0
 8005816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800581a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800581e:	d13c      	bne.n	800589a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005820:	2301      	movs	r3, #1
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
 8005824:	e02b      	b.n	800587e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583a:	4613      	mov	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	3318      	adds	r3, #24
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d115      	bne.n	8005878 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800584c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800584e:	2b00      	cmp	r3, #0
 8005850:	da12      	bge.n	8005878 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005856:	4613      	mov	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	3317      	adds	r3, #23
 8005862:	2201      	movs	r2, #1
 8005864:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	b2db      	uxtb	r3, r3
 800586a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800586e:	b2db      	uxtb	r3, r3
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fac8 	bl	8005e08 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	3301      	adds	r3, #1
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	791b      	ldrb	r3, [r3, #4]
 8005882:	461a      	mov	r2, r3
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	4293      	cmp	r3, r2
 8005888:	d3cd      	bcc.n	8005826 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695a      	ldr	r2, [r3, #20]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f004 f8dc 	bl	8009a5c <USB_ReadInterrupts>
 80058a4:	4603      	mov	r3, r0
 80058a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058ae:	d156      	bne.n	800595e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058b0:	2301      	movs	r3, #1
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
 80058b4:	e045      	b.n	8005942 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ca:	4613      	mov	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d12e      	bne.n	800593c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	da2b      	bge.n	800593c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80058f0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d121      	bne.n	800593c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fc:	4613      	mov	r3, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	f203 2357 	addw	r3, r3, #599	; 0x257
 800590a:	2201      	movs	r2, #1
 800590c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005938:	6053      	str	r3, [r2, #4]
            break;
 800593a:	e008      	b.n	800594e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	3301      	adds	r3, #1
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	791b      	ldrb	r3, [r3, #4]
 8005946:	461a      	mov	r2, r3
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	4293      	cmp	r3, r2
 800594c:	d3b3      	bcc.n	80058b6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695a      	ldr	r2, [r3, #20]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800595c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f004 f87a 	bl	8009a5c <USB_ReadInterrupts>
 8005968:	4603      	mov	r3, r0
 800596a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800596e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005972:	d10a      	bne.n	800598a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f009 fa81 	bl	800ee7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	695a      	ldr	r2, [r3, #20]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005988:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f004 f864 	bl	8009a5c <USB_ReadInterrupts>
 8005994:	4603      	mov	r3, r0
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b04      	cmp	r3, #4
 800599c:	d115      	bne.n	80059ca <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f009 fa71 	bl	800ee98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6859      	ldr	r1, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
 80059c6:	e000      	b.n	80059ca <HAL_PCD_IRQHandler+0x93c>
      return;
 80059c8:	bf00      	nop
    }
  }
}
 80059ca:	3734      	adds	r7, #52	; 0x34
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd90      	pop	{r4, r7, pc}

080059d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <HAL_PCD_SetAddress+0x1a>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e012      	b.n	8005a10 <HAL_PCD_SetAddress+0x40>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	78fa      	ldrb	r2, [r7, #3]
 80059f6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	78fa      	ldrb	r2, [r7, #3]
 80059fe:	4611      	mov	r1, r2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f003 ffc3 	bl	800998c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	4608      	mov	r0, r1
 8005a22:	4611      	mov	r1, r2
 8005a24:	461a      	mov	r2, r3
 8005a26:	4603      	mov	r3, r0
 8005a28:	70fb      	strb	r3, [r7, #3]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	803b      	strh	r3, [r7, #0]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	da0f      	bge.n	8005a5e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	f003 020f 	and.w	r2, r3, #15
 8005a44:	4613      	mov	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	3310      	adds	r3, #16
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	4413      	add	r3, r2
 8005a52:	3304      	adds	r3, #4
 8005a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	705a      	strb	r2, [r3, #1]
 8005a5c:	e00f      	b.n	8005a7e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	f003 020f 	and.w	r2, r3, #15
 8005a64:	4613      	mov	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	4413      	add	r3, r2
 8005a74:	3304      	adds	r3, #4
 8005a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a8a:	883a      	ldrh	r2, [r7, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	78ba      	ldrb	r2, [r7, #2]
 8005a94:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	785b      	ldrb	r3, [r3, #1]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d004      	beq.n	8005aa8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005aa8:	78bb      	ldrb	r3, [r7, #2]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d102      	bne.n	8005ab4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_PCD_EP_Open+0xaa>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e00e      	b.n	8005ae0 <HAL_PCD_EP_Open+0xc8>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f003 f94b 	bl	8008d6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8005ade:	7afb      	ldrb	r3, [r7, #11]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	da0f      	bge.n	8005b1c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	f003 020f 	and.w	r2, r3, #15
 8005b02:	4613      	mov	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	3310      	adds	r3, #16
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	3304      	adds	r3, #4
 8005b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	705a      	strb	r2, [r3, #1]
 8005b1a:	e00f      	b.n	8005b3c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	f003 020f 	and.w	r2, r3, #15
 8005b22:	4613      	mov	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4413      	add	r3, r2
 8005b32:	3304      	adds	r3, #4
 8005b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_PCD_EP_Close+0x6e>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e00e      	b.n	8005b74 <HAL_PCD_EP_Close+0x8c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68f9      	ldr	r1, [r7, #12]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f003 f989 	bl	8008e7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	607a      	str	r2, [r7, #4]
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b8c:	7afb      	ldrb	r3, [r7, #11]
 8005b8e:	f003 020f 	and.w	r2, r3, #15
 8005b92:	4613      	mov	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bbe:	7afb      	ldrb	r3, [r7, #11]
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	799b      	ldrb	r3, [r3, #6]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d102      	bne.n	8005bd8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6818      	ldr	r0, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	799b      	ldrb	r3, [r3, #6]
 8005be0:	461a      	mov	r2, r3
 8005be2:	6979      	ldr	r1, [r7, #20]
 8005be4:	f003 fa26 	bl	8009034 <USB_EPStartXfer>

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	f003 020f 	and.w	r2, r3, #15
 8005c04:	6879      	ldr	r1, [r7, #4]
 8005c06:	4613      	mov	r3, r2
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	440b      	add	r3, r1
 8005c10:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8005c14:	681b      	ldr	r3, [r3, #0]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b086      	sub	sp, #24
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c32:	7afb      	ldrb	r3, [r7, #11]
 8005c34:	f003 020f 	and.w	r2, r3, #15
 8005c38:	4613      	mov	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	3310      	adds	r3, #16
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4413      	add	r3, r2
 8005c46:	3304      	adds	r3, #4
 8005c48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c62:	7afb      	ldrb	r3, [r7, #11]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	799b      	ldrb	r3, [r3, #6]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d102      	bne.n	8005c7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	799b      	ldrb	r3, [r3, #6]
 8005c84:	461a      	mov	r2, r3
 8005c86:	6979      	ldr	r1, [r7, #20]
 8005c88:	f003 f9d4 	bl	8009034 <USB_EPStartXfer>

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	7912      	ldrb	r2, [r2, #4]
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e04f      	b.n	8005d54 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	da0f      	bge.n	8005cdc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	f003 020f 	and.w	r2, r3, #15
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	3310      	adds	r3, #16
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	4413      	add	r3, r2
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	705a      	strb	r2, [r3, #1]
 8005cda:	e00d      	b.n	8005cf8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cdc:	78fa      	ldrb	r2, [r7, #3]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	4413      	add	r3, r2
 8005cee:	3304      	adds	r3, #4
 8005cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_PCD_EP_SetStall+0x82>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e01d      	b.n	8005d54 <HAL_PCD_EP_SetStall+0xbe>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68f9      	ldr	r1, [r7, #12]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f003 fd5c 	bl	80097e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	f003 030f 	and.w	r3, r3, #15
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	7999      	ldrb	r1, [r3, #6]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005d44:	461a      	mov	r2, r3
 8005d46:	f003 ff4d 	bl	8009be4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	7912      	ldrb	r2, [r2, #4]
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d901      	bls.n	8005d7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e042      	b.n	8005e00 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	da0f      	bge.n	8005da2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	f003 020f 	and.w	r2, r3, #15
 8005d88:	4613      	mov	r3, r2
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	3310      	adds	r3, #16
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	4413      	add	r3, r2
 8005d96:	3304      	adds	r3, #4
 8005d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	705a      	strb	r2, [r3, #1]
 8005da0:	e00f      	b.n	8005dc2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005da2:	78fb      	ldrb	r3, [r7, #3]
 8005da4:	f003 020f 	and.w	r2, r3, #15
 8005da8:	4613      	mov	r3, r2
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	4413      	add	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	4413      	add	r3, r2
 8005db8:	3304      	adds	r3, #4
 8005dba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d101      	bne.n	8005de2 <HAL_PCD_EP_ClrStall+0x86>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e00e      	b.n	8005e00 <HAL_PCD_EP_ClrStall+0xa4>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68f9      	ldr	r1, [r7, #12]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f003 fd65 	bl	80098c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	da0c      	bge.n	8005e36 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	f003 020f 	and.w	r2, r3, #15
 8005e22:	4613      	mov	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	3310      	adds	r3, #16
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	4413      	add	r3, r2
 8005e30:	3304      	adds	r3, #4
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	e00c      	b.n	8005e50 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	f003 020f 	and.w	r2, r3, #15
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68f9      	ldr	r1, [r7, #12]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f003 fb84 	bl	8009564 <USB_EPStopXfer>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005e60:	7afb      	ldrb	r3, [r7, #11]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b08a      	sub	sp, #40	; 0x28
 8005e6e:	af02      	add	r7, sp, #8
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	4613      	mov	r3, r2
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	4413      	add	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	3310      	adds	r3, #16
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	3304      	adds	r3, #4
 8005e90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	695a      	ldr	r2, [r3, #20]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d901      	bls.n	8005ea2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e06b      	b.n	8005f7a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d902      	bls.n	8005ebe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	3303      	adds	r3, #3
 8005ec2:	089b      	lsrs	r3, r3, #2
 8005ec4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ec6:	e02a      	b.n	8005f1e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d902      	bls.n	8005ee4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	3303      	adds	r3, #3
 8005ee8:	089b      	lsrs	r3, r3, #2
 8005eea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	68d9      	ldr	r1, [r3, #12]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	4603      	mov	r3, r0
 8005f00:	6978      	ldr	r0, [r7, #20]
 8005f02:	f003 fbd9 	bl	80096b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	441a      	add	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	441a      	add	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d809      	bhi.n	8005f48 <PCD_WriteEmptyTxFifo+0xde>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	695a      	ldr	r2, [r3, #20]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d203      	bcs.n	8005f48 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1bf      	bne.n	8005ec8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	691a      	ldr	r2, [r3, #16]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d811      	bhi.n	8005f78 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	6939      	ldr	r1, [r7, #16]
 8005f70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f74:	4013      	ands	r3, r2
 8005f76:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3720      	adds	r7, #32
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	333c      	adds	r3, #60	; 0x3c
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	799b      	ldrb	r3, [r3, #6]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d17b      	bne.n	80060b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d015      	beq.n	8005ff0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	4a61      	ldr	r2, [pc, #388]	; (800614c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	f240 80b9 	bls.w	8006140 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80b3 	beq.w	8006140 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fec:	6093      	str	r3, [r2, #8]
 8005fee:	e0a7      	b.n	8006140 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	461a      	mov	r2, r3
 8006008:	2320      	movs	r3, #32
 800600a:	6093      	str	r3, [r2, #8]
 800600c:	e098      	b.n	8006140 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006014:	2b00      	cmp	r3, #0
 8006016:	f040 8093 	bne.w	8006140 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	4a4b      	ldr	r2, [pc, #300]	; (800614c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d90f      	bls.n	8006042 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006038:	461a      	mov	r2, r3
 800603a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800603e:	6093      	str	r3, [r2, #8]
 8006040:	e07e      	b.n	8006140 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	4613      	mov	r3, r2
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	4413      	add	r3, r2
 8006054:	3304      	adds	r3, #4
 8006056:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a1a      	ldr	r2, [r3, #32]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	0159      	lsls	r1, r3, #5
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	440b      	add	r3, r1
 8006064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800606e:	1ad2      	subs	r2, r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d114      	bne.n	80060a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800608c:	461a      	mov	r2, r3
 800608e:	2101      	movs	r1, #1
 8006090:	f003 fda8 	bl	8009be4 <USB_EP0_OutStart>
 8006094:	e006      	b.n	80060a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	441a      	add	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f008 fe22 	bl	800ecf4 <HAL_PCD_DataOutStageCallback>
 80060b0:	e046      	b.n	8006140 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	4a26      	ldr	r2, [pc, #152]	; (8006150 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d124      	bne.n	8006104 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d0:	461a      	mov	r2, r3
 80060d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060d6:	6093      	str	r3, [r2, #8]
 80060d8:	e032      	b.n	8006140 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f003 0320 	and.w	r3, r3, #32
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f0:	461a      	mov	r2, r3
 80060f2:	2320      	movs	r3, #32
 80060f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f008 fdf9 	bl	800ecf4 <HAL_PCD_DataOutStageCallback>
 8006102:	e01d      	b.n	8006140 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d114      	bne.n	8006134 <PCD_EP_OutXfrComplete_int+0x1b0>
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	4613      	mov	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	440b      	add	r3, r1
 8006118:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d108      	bne.n	8006134 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800612c:	461a      	mov	r2, r3
 800612e:	2100      	movs	r1, #0
 8006130:	f003 fd58 	bl	8009be4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f008 fdda 	bl	800ecf4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	4f54300a 	.word	0x4f54300a
 8006150:	4f54310a 	.word	0x4f54310a

08006154 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	333c      	adds	r3, #60	; 0x3c
 800616c:	3304      	adds	r3, #4
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a15      	ldr	r2, [pc, #84]	; (80061dc <PCD_EP_OutSetupPacket_int+0x88>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d90e      	bls.n	80061a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006190:	2b00      	cmp	r3, #0
 8006192:	d009      	beq.n	80061a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a0:	461a      	mov	r2, r3
 80061a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f008 fd91 	bl	800ecd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4a0a      	ldr	r2, [pc, #40]	; (80061dc <PCD_EP_OutSetupPacket_int+0x88>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d90c      	bls.n	80061d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	799b      	ldrb	r3, [r3, #6]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d108      	bne.n	80061d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80061c8:	461a      	mov	r2, r3
 80061ca:	2101      	movs	r1, #1
 80061cc:	f003 fd0a 	bl	8009be4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	4f54300a 	.word	0x4f54300a

080061e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	70fb      	strb	r3, [r7, #3]
 80061ec:	4613      	mov	r3, r2
 80061ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d107      	bne.n	800620e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80061fe:	883b      	ldrh	r3, [r7, #0]
 8006200:	0419      	lsls	r1, r3, #16
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	430a      	orrs	r2, r1
 800620a:	629a      	str	r2, [r3, #40]	; 0x28
 800620c:	e028      	b.n	8006260 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006214:	0c1b      	lsrs	r3, r3, #16
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	4413      	add	r3, r2
 800621a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800621c:	2300      	movs	r3, #0
 800621e:	73fb      	strb	r3, [r7, #15]
 8006220:	e00d      	b.n	800623e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	3340      	adds	r3, #64	; 0x40
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	0c1b      	lsrs	r3, r3, #16
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	4413      	add	r3, r2
 8006236:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	3301      	adds	r3, #1
 800623c:	73fb      	strb	r3, [r7, #15]
 800623e:	7bfa      	ldrb	r2, [r7, #15]
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	3b01      	subs	r3, #1
 8006244:	429a      	cmp	r2, r3
 8006246:	d3ec      	bcc.n	8006222 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006248:	883b      	ldrh	r3, [r7, #0]
 800624a:	0418      	lsls	r0, r3, #16
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6819      	ldr	r1, [r3, #0]
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	3b01      	subs	r3, #1
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	4302      	orrs	r2, r0
 8006258:	3340      	adds	r3, #64	; 0x40
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	440b      	add	r3, r1
 800625e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	887a      	ldrh	r2, [r7, #2]
 8006280:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e267      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d075      	beq.n	80063b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062c6:	4b88      	ldr	r3, [pc, #544]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f003 030c 	and.w	r3, r3, #12
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d00c      	beq.n	80062ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062d2:	4b85      	ldr	r3, [pc, #532]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d112      	bne.n	8006304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062de:	4b82      	ldr	r3, [pc, #520]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ea:	d10b      	bne.n	8006304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ec:	4b7e      	ldr	r3, [pc, #504]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d05b      	beq.n	80063b0 <HAL_RCC_OscConfig+0x108>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d157      	bne.n	80063b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e242      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630c:	d106      	bne.n	800631c <HAL_RCC_OscConfig+0x74>
 800630e:	4b76      	ldr	r3, [pc, #472]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a75      	ldr	r2, [pc, #468]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 8006314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	e01d      	b.n	8006358 <HAL_RCC_OscConfig+0xb0>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006324:	d10c      	bne.n	8006340 <HAL_RCC_OscConfig+0x98>
 8006326:	4b70      	ldr	r3, [pc, #448]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a6f      	ldr	r2, [pc, #444]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 800632c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	4b6d      	ldr	r3, [pc, #436]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a6c      	ldr	r2, [pc, #432]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 8006338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	e00b      	b.n	8006358 <HAL_RCC_OscConfig+0xb0>
 8006340:	4b69      	ldr	r3, [pc, #420]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a68      	ldr	r2, [pc, #416]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 8006346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	4b66      	ldr	r3, [pc, #408]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a65      	ldr	r2, [pc, #404]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 8006352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d013      	beq.n	8006388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006360:	f7fd f9ec 	bl	800373c <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006368:	f7fd f9e8 	bl	800373c <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b64      	cmp	r3, #100	; 0x64
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e207      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800637a:	4b5b      	ldr	r3, [pc, #364]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0f0      	beq.n	8006368 <HAL_RCC_OscConfig+0xc0>
 8006386:	e014      	b.n	80063b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006388:	f7fd f9d8 	bl	800373c <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006390:	f7fd f9d4 	bl	800373c <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b64      	cmp	r3, #100	; 0x64
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e1f3      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063a2:	4b51      	ldr	r3, [pc, #324]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f0      	bne.n	8006390 <HAL_RCC_OscConfig+0xe8>
 80063ae:	e000      	b.n	80063b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d063      	beq.n	8006486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063be:	4b4a      	ldr	r3, [pc, #296]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 030c 	and.w	r3, r3, #12
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00b      	beq.n	80063e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ca:	4b47      	ldr	r3, [pc, #284]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063d2:	2b08      	cmp	r3, #8
 80063d4:	d11c      	bne.n	8006410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063d6:	4b44      	ldr	r3, [pc, #272]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d116      	bne.n	8006410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063e2:	4b41      	ldr	r3, [pc, #260]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d005      	beq.n	80063fa <HAL_RCC_OscConfig+0x152>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d001      	beq.n	80063fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e1c7      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063fa:	4b3b      	ldr	r3, [pc, #236]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	4937      	ldr	r1, [pc, #220]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 800640a:	4313      	orrs	r3, r2
 800640c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800640e:	e03a      	b.n	8006486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d020      	beq.n	800645a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006418:	4b34      	ldr	r3, [pc, #208]	; (80064ec <HAL_RCC_OscConfig+0x244>)
 800641a:	2201      	movs	r2, #1
 800641c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641e:	f7fd f98d 	bl	800373c <HAL_GetTick>
 8006422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006424:	e008      	b.n	8006438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006426:	f7fd f989 	bl	800373c <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e1a8      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006438:	4b2b      	ldr	r3, [pc, #172]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0f0      	beq.n	8006426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006444:	4b28      	ldr	r3, [pc, #160]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	4925      	ldr	r1, [pc, #148]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 8006454:	4313      	orrs	r3, r2
 8006456:	600b      	str	r3, [r1, #0]
 8006458:	e015      	b.n	8006486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800645a:	4b24      	ldr	r3, [pc, #144]	; (80064ec <HAL_RCC_OscConfig+0x244>)
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006460:	f7fd f96c 	bl	800373c <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006466:	e008      	b.n	800647a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006468:	f7fd f968 	bl	800373c <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b02      	cmp	r3, #2
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e187      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800647a:	4b1b      	ldr	r3, [pc, #108]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1f0      	bne.n	8006468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d036      	beq.n	8006500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d016      	beq.n	80064c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800649a:	4b15      	ldr	r3, [pc, #84]	; (80064f0 <HAL_RCC_OscConfig+0x248>)
 800649c:	2201      	movs	r2, #1
 800649e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a0:	f7fd f94c 	bl	800373c <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064a8:	f7fd f948 	bl	800373c <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e167      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ba:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <HAL_RCC_OscConfig+0x240>)
 80064bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0f0      	beq.n	80064a8 <HAL_RCC_OscConfig+0x200>
 80064c6:	e01b      	b.n	8006500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064c8:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <HAL_RCC_OscConfig+0x248>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ce:	f7fd f935 	bl	800373c <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064d4:	e00e      	b.n	80064f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064d6:	f7fd f931 	bl	800373c <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d907      	bls.n	80064f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e150      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
 80064e8:	40023800 	.word	0x40023800
 80064ec:	42470000 	.word	0x42470000
 80064f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064f4:	4b88      	ldr	r3, [pc, #544]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 80064f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1ea      	bne.n	80064d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8097 	beq.w	800663c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800650e:	2300      	movs	r3, #0
 8006510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006512:	4b81      	ldr	r3, [pc, #516]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10f      	bne.n	800653e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800651e:	2300      	movs	r3, #0
 8006520:	60bb      	str	r3, [r7, #8]
 8006522:	4b7d      	ldr	r3, [pc, #500]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	4a7c      	ldr	r2, [pc, #496]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 8006528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800652c:	6413      	str	r3, [r2, #64]	; 0x40
 800652e:	4b7a      	ldr	r3, [pc, #488]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006536:	60bb      	str	r3, [r7, #8]
 8006538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800653a:	2301      	movs	r3, #1
 800653c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800653e:	4b77      	ldr	r3, [pc, #476]	; (800671c <HAL_RCC_OscConfig+0x474>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006546:	2b00      	cmp	r3, #0
 8006548:	d118      	bne.n	800657c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800654a:	4b74      	ldr	r3, [pc, #464]	; (800671c <HAL_RCC_OscConfig+0x474>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a73      	ldr	r2, [pc, #460]	; (800671c <HAL_RCC_OscConfig+0x474>)
 8006550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006556:	f7fd f8f1 	bl	800373c <HAL_GetTick>
 800655a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800655e:	f7fd f8ed 	bl	800373c <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e10c      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006570:	4b6a      	ldr	r3, [pc, #424]	; (800671c <HAL_RCC_OscConfig+0x474>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0f0      	beq.n	800655e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d106      	bne.n	8006592 <HAL_RCC_OscConfig+0x2ea>
 8006584:	4b64      	ldr	r3, [pc, #400]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 8006586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006588:	4a63      	ldr	r2, [pc, #396]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 800658a:	f043 0301 	orr.w	r3, r3, #1
 800658e:	6713      	str	r3, [r2, #112]	; 0x70
 8006590:	e01c      	b.n	80065cc <HAL_RCC_OscConfig+0x324>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b05      	cmp	r3, #5
 8006598:	d10c      	bne.n	80065b4 <HAL_RCC_OscConfig+0x30c>
 800659a:	4b5f      	ldr	r3, [pc, #380]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 800659c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659e:	4a5e      	ldr	r2, [pc, #376]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 80065a0:	f043 0304 	orr.w	r3, r3, #4
 80065a4:	6713      	str	r3, [r2, #112]	; 0x70
 80065a6:	4b5c      	ldr	r3, [pc, #368]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	4a5b      	ldr	r2, [pc, #364]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 80065ac:	f043 0301 	orr.w	r3, r3, #1
 80065b0:	6713      	str	r3, [r2, #112]	; 0x70
 80065b2:	e00b      	b.n	80065cc <HAL_RCC_OscConfig+0x324>
 80065b4:	4b58      	ldr	r3, [pc, #352]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 80065b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b8:	4a57      	ldr	r2, [pc, #348]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 80065ba:	f023 0301 	bic.w	r3, r3, #1
 80065be:	6713      	str	r3, [r2, #112]	; 0x70
 80065c0:	4b55      	ldr	r3, [pc, #340]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 80065c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c4:	4a54      	ldr	r2, [pc, #336]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 80065c6:	f023 0304 	bic.w	r3, r3, #4
 80065ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d015      	beq.n	8006600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d4:	f7fd f8b2 	bl	800373c <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065da:	e00a      	b.n	80065f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065dc:	f7fd f8ae 	bl	800373c <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e0cb      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f2:	4b49      	ldr	r3, [pc, #292]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 80065f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0ee      	beq.n	80065dc <HAL_RCC_OscConfig+0x334>
 80065fe:	e014      	b.n	800662a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006600:	f7fd f89c 	bl	800373c <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006606:	e00a      	b.n	800661e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006608:	f7fd f898 	bl	800373c <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	f241 3288 	movw	r2, #5000	; 0x1388
 8006616:	4293      	cmp	r3, r2
 8006618:	d901      	bls.n	800661e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e0b5      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800661e:	4b3e      	ldr	r3, [pc, #248]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 8006620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1ee      	bne.n	8006608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800662a:	7dfb      	ldrb	r3, [r7, #23]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d105      	bne.n	800663c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006630:	4b39      	ldr	r3, [pc, #228]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	4a38      	ldr	r2, [pc, #224]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 8006636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800663a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 80a1 	beq.w	8006788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006646:	4b34      	ldr	r3, [pc, #208]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f003 030c 	and.w	r3, r3, #12
 800664e:	2b08      	cmp	r3, #8
 8006650:	d05c      	beq.n	800670c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2b02      	cmp	r3, #2
 8006658:	d141      	bne.n	80066de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800665a:	4b31      	ldr	r3, [pc, #196]	; (8006720 <HAL_RCC_OscConfig+0x478>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006660:	f7fd f86c 	bl	800373c <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006668:	f7fd f868 	bl	800373c <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e087      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800667a:	4b27      	ldr	r3, [pc, #156]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f0      	bne.n	8006668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69da      	ldr	r2, [r3, #28]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	019b      	lsls	r3, r3, #6
 8006696:	431a      	orrs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669c:	085b      	lsrs	r3, r3, #1
 800669e:	3b01      	subs	r3, #1
 80066a0:	041b      	lsls	r3, r3, #16
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	061b      	lsls	r3, r3, #24
 80066aa:	491b      	ldr	r1, [pc, #108]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066b0:	4b1b      	ldr	r3, [pc, #108]	; (8006720 <HAL_RCC_OscConfig+0x478>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b6:	f7fd f841 	bl	800373c <HAL_GetTick>
 80066ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066be:	f7fd f83d 	bl	800373c <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e05c      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066d0:	4b11      	ldr	r3, [pc, #68]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0f0      	beq.n	80066be <HAL_RCC_OscConfig+0x416>
 80066dc:	e054      	b.n	8006788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066de:	4b10      	ldr	r3, [pc, #64]	; (8006720 <HAL_RCC_OscConfig+0x478>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e4:	f7fd f82a 	bl	800373c <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066ec:	f7fd f826 	bl	800373c <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e045      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066fe:	4b06      	ldr	r3, [pc, #24]	; (8006718 <HAL_RCC_OscConfig+0x470>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1f0      	bne.n	80066ec <HAL_RCC_OscConfig+0x444>
 800670a:	e03d      	b.n	8006788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d107      	bne.n	8006724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e038      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
 8006718:	40023800 	.word	0x40023800
 800671c:	40007000 	.word	0x40007000
 8006720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006724:	4b1b      	ldr	r3, [pc, #108]	; (8006794 <HAL_RCC_OscConfig+0x4ec>)
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d028      	beq.n	8006784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800673c:	429a      	cmp	r2, r3
 800673e:	d121      	bne.n	8006784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800674a:	429a      	cmp	r2, r3
 800674c:	d11a      	bne.n	8006784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006754:	4013      	ands	r3, r2
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800675a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800675c:	4293      	cmp	r3, r2
 800675e:	d111      	bne.n	8006784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	085b      	lsrs	r3, r3, #1
 800676c:	3b01      	subs	r3, #1
 800676e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006770:	429a      	cmp	r2, r3
 8006772:	d107      	bne.n	8006784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006780:	429a      	cmp	r2, r3
 8006782:	d001      	beq.n	8006788 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e000      	b.n	800678a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3718      	adds	r7, #24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	40023800 	.word	0x40023800

08006798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e0cc      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067ac:	4b68      	ldr	r3, [pc, #416]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d90c      	bls.n	80067d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ba:	4b65      	ldr	r3, [pc, #404]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c2:	4b63      	ldr	r3, [pc, #396]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d001      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0b8      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d020      	beq.n	8006822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067ec:	4b59      	ldr	r3, [pc, #356]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	4a58      	ldr	r2, [pc, #352]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006804:	4b53      	ldr	r3, [pc, #332]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	4a52      	ldr	r2, [pc, #328]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800680a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800680e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006810:	4b50      	ldr	r3, [pc, #320]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	494d      	ldr	r1, [pc, #308]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	4313      	orrs	r3, r2
 8006820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d044      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d107      	bne.n	8006846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006836:	4b47      	ldr	r3, [pc, #284]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d119      	bne.n	8006876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e07f      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2b02      	cmp	r3, #2
 800684c:	d003      	beq.n	8006856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006852:	2b03      	cmp	r3, #3
 8006854:	d107      	bne.n	8006866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006856:	4b3f      	ldr	r3, [pc, #252]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e06f      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006866:	4b3b      	ldr	r3, [pc, #236]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e067      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006876:	4b37      	ldr	r3, [pc, #220]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f023 0203 	bic.w	r2, r3, #3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	4934      	ldr	r1, [pc, #208]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006884:	4313      	orrs	r3, r2
 8006886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006888:	f7fc ff58 	bl	800373c <HAL_GetTick>
 800688c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800688e:	e00a      	b.n	80068a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006890:	f7fc ff54 	bl	800373c <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	f241 3288 	movw	r2, #5000	; 0x1388
 800689e:	4293      	cmp	r3, r2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e04f      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a6:	4b2b      	ldr	r3, [pc, #172]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 020c 	and.w	r2, r3, #12
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d1eb      	bne.n	8006890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068b8:	4b25      	ldr	r3, [pc, #148]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d20c      	bcs.n	80068e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068c6:	4b22      	ldr	r3, [pc, #136]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ce:	4b20      	ldr	r3, [pc, #128]	; (8006950 <HAL_RCC_ClockConfig+0x1b8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d001      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e032      	b.n	8006946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068ec:	4b19      	ldr	r3, [pc, #100]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	4916      	ldr	r1, [pc, #88]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800690a:	4b12      	ldr	r3, [pc, #72]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	490e      	ldr	r1, [pc, #56]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 800691a:	4313      	orrs	r3, r2
 800691c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800691e:	f000 f821 	bl	8006964 <HAL_RCC_GetSysClockFreq>
 8006922:	4602      	mov	r2, r0
 8006924:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <HAL_RCC_ClockConfig+0x1bc>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	490a      	ldr	r1, [pc, #40]	; (8006958 <HAL_RCC_ClockConfig+0x1c0>)
 8006930:	5ccb      	ldrb	r3, [r1, r3]
 8006932:	fa22 f303 	lsr.w	r3, r2, r3
 8006936:	4a09      	ldr	r2, [pc, #36]	; (800695c <HAL_RCC_ClockConfig+0x1c4>)
 8006938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800693a:	4b09      	ldr	r3, [pc, #36]	; (8006960 <HAL_RCC_ClockConfig+0x1c8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f7fa fed8 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40023c00 	.word	0x40023c00
 8006954:	40023800 	.word	0x40023800
 8006958:	0800fdc0 	.word	0x0800fdc0
 800695c:	2000000c 	.word	0x2000000c
 8006960:	2000008c 	.word	0x2000008c

08006964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006968:	b094      	sub	sp, #80	; 0x50
 800696a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800696c:	2300      	movs	r3, #0
 800696e:	647b      	str	r3, [r7, #68]	; 0x44
 8006970:	2300      	movs	r3, #0
 8006972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006974:	2300      	movs	r3, #0
 8006976:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800697c:	4b79      	ldr	r3, [pc, #484]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x200>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f003 030c 	and.w	r3, r3, #12
 8006984:	2b08      	cmp	r3, #8
 8006986:	d00d      	beq.n	80069a4 <HAL_RCC_GetSysClockFreq+0x40>
 8006988:	2b08      	cmp	r3, #8
 800698a:	f200 80e1 	bhi.w	8006b50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <HAL_RCC_GetSysClockFreq+0x34>
 8006992:	2b04      	cmp	r3, #4
 8006994:	d003      	beq.n	800699e <HAL_RCC_GetSysClockFreq+0x3a>
 8006996:	e0db      	b.n	8006b50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006998:	4b73      	ldr	r3, [pc, #460]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x204>)
 800699a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800699c:	e0db      	b.n	8006b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800699e:	4b73      	ldr	r3, [pc, #460]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x208>)
 80069a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80069a2:	e0d8      	b.n	8006b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069a4:	4b6f      	ldr	r3, [pc, #444]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069ae:	4b6d      	ldr	r3, [pc, #436]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d063      	beq.n	8006a82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069ba:	4b6a      	ldr	r3, [pc, #424]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	099b      	lsrs	r3, r3, #6
 80069c0:	2200      	movs	r2, #0
 80069c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80069c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069cc:	633b      	str	r3, [r7, #48]	; 0x30
 80069ce:	2300      	movs	r3, #0
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
 80069d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80069d6:	4622      	mov	r2, r4
 80069d8:	462b      	mov	r3, r5
 80069da:	f04f 0000 	mov.w	r0, #0
 80069de:	f04f 0100 	mov.w	r1, #0
 80069e2:	0159      	lsls	r1, r3, #5
 80069e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069e8:	0150      	lsls	r0, r2, #5
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	4621      	mov	r1, r4
 80069f0:	1a51      	subs	r1, r2, r1
 80069f2:	6139      	str	r1, [r7, #16]
 80069f4:	4629      	mov	r1, r5
 80069f6:	eb63 0301 	sbc.w	r3, r3, r1
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a08:	4659      	mov	r1, fp
 8006a0a:	018b      	lsls	r3, r1, #6
 8006a0c:	4651      	mov	r1, sl
 8006a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a12:	4651      	mov	r1, sl
 8006a14:	018a      	lsls	r2, r1, #6
 8006a16:	4651      	mov	r1, sl
 8006a18:	ebb2 0801 	subs.w	r8, r2, r1
 8006a1c:	4659      	mov	r1, fp
 8006a1e:	eb63 0901 	sbc.w	r9, r3, r1
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a36:	4690      	mov	r8, r2
 8006a38:	4699      	mov	r9, r3
 8006a3a:	4623      	mov	r3, r4
 8006a3c:	eb18 0303 	adds.w	r3, r8, r3
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	462b      	mov	r3, r5
 8006a44:	eb49 0303 	adc.w	r3, r9, r3
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	f04f 0200 	mov.w	r2, #0
 8006a4e:	f04f 0300 	mov.w	r3, #0
 8006a52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a56:	4629      	mov	r1, r5
 8006a58:	024b      	lsls	r3, r1, #9
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a60:	4621      	mov	r1, r4
 8006a62:	024a      	lsls	r2, r1, #9
 8006a64:	4610      	mov	r0, r2
 8006a66:	4619      	mov	r1, r3
 8006a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a74:	f7f9 ff4a 	bl	800090c <__aeabi_uldivmod>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a80:	e058      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a82:	4b38      	ldr	r3, [pc, #224]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	099b      	lsrs	r3, r3, #6
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a92:	623b      	str	r3, [r7, #32]
 8006a94:	2300      	movs	r3, #0
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24
 8006a98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a9c:	4642      	mov	r2, r8
 8006a9e:	464b      	mov	r3, r9
 8006aa0:	f04f 0000 	mov.w	r0, #0
 8006aa4:	f04f 0100 	mov.w	r1, #0
 8006aa8:	0159      	lsls	r1, r3, #5
 8006aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006aae:	0150      	lsls	r0, r2, #5
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4641      	mov	r1, r8
 8006ab6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006aba:	4649      	mov	r1, r9
 8006abc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006acc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ad0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ad4:	ebb2 040a 	subs.w	r4, r2, sl
 8006ad8:	eb63 050b 	sbc.w	r5, r3, fp
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	00eb      	lsls	r3, r5, #3
 8006ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aea:	00e2      	lsls	r2, r4, #3
 8006aec:	4614      	mov	r4, r2
 8006aee:	461d      	mov	r5, r3
 8006af0:	4643      	mov	r3, r8
 8006af2:	18e3      	adds	r3, r4, r3
 8006af4:	603b      	str	r3, [r7, #0]
 8006af6:	464b      	mov	r3, r9
 8006af8:	eb45 0303 	adc.w	r3, r5, r3
 8006afc:	607b      	str	r3, [r7, #4]
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	f04f 0300 	mov.w	r3, #0
 8006b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	028b      	lsls	r3, r1, #10
 8006b0e:	4621      	mov	r1, r4
 8006b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b14:	4621      	mov	r1, r4
 8006b16:	028a      	lsls	r2, r1, #10
 8006b18:	4610      	mov	r0, r2
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b1e:	2200      	movs	r2, #0
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	61fa      	str	r2, [r7, #28]
 8006b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b28:	f7f9 fef0 	bl	800090c <__aeabi_uldivmod>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4613      	mov	r3, r2
 8006b32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b34:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	0c1b      	lsrs	r3, r3, #16
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	3301      	adds	r3, #1
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006b44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b4e:	e002      	b.n	8006b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b50:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3750      	adds	r7, #80	; 0x50
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b62:	bf00      	nop
 8006b64:	40023800 	.word	0x40023800
 8006b68:	00f42400 	.word	0x00f42400
 8006b6c:	007a1200 	.word	0x007a1200

08006b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b74:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b76:	681b      	ldr	r3, [r3, #0]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	2000000c 	.word	0x2000000c

08006b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b8c:	f7ff fff0 	bl	8006b70 <HAL_RCC_GetHCLKFreq>
 8006b90:	4602      	mov	r2, r0
 8006b92:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	0a9b      	lsrs	r3, r3, #10
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	4903      	ldr	r1, [pc, #12]	; (8006bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b9e:	5ccb      	ldrb	r3, [r1, r3]
 8006ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40023800 	.word	0x40023800
 8006bac:	0800fdd0 	.word	0x0800fdd0

08006bb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	220f      	movs	r2, #15
 8006bbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006bc0:	4b12      	ldr	r3, [pc, #72]	; (8006c0c <HAL_RCC_GetClockConfig+0x5c>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 0203 	and.w	r2, r3, #3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006bcc:	4b0f      	ldr	r3, [pc, #60]	; (8006c0c <HAL_RCC_GetClockConfig+0x5c>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <HAL_RCC_GetClockConfig+0x5c>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006be4:	4b09      	ldr	r3, [pc, #36]	; (8006c0c <HAL_RCC_GetClockConfig+0x5c>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	08db      	lsrs	r3, r3, #3
 8006bea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006bf2:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <HAL_RCC_GetClockConfig+0x60>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 020f 	and.w	r2, r3, #15
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	601a      	str	r2, [r3, #0]
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	40023c00 	.word	0x40023c00

08006c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10b      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d105      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d075      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c48:	4b91      	ldr	r3, [pc, #580]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c4e:	f7fc fd75 	bl	800373c <HAL_GetTick>
 8006c52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c54:	e008      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c56:	f7fc fd71 	bl	800373c <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d901      	bls.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e189      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c68:	4b8a      	ldr	r3, [pc, #552]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1f0      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d009      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	019a      	lsls	r2, r3, #6
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	071b      	lsls	r3, r3, #28
 8006c8c:	4981      	ldr	r1, [pc, #516]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01f      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ca0:	4b7c      	ldr	r3, [pc, #496]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ca6:	0f1b      	lsrs	r3, r3, #28
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	019a      	lsls	r2, r3, #6
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	061b      	lsls	r3, r3, #24
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	071b      	lsls	r3, r3, #28
 8006cc0:	4974      	ldr	r1, [pc, #464]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006cc8:	4b72      	ldr	r3, [pc, #456]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cce:	f023 021f 	bic.w	r2, r3, #31
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	496e      	ldr	r1, [pc, #440]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00d      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	019a      	lsls	r2, r3, #6
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	061b      	lsls	r3, r3, #24
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	071b      	lsls	r3, r3, #28
 8006d00:	4964      	ldr	r1, [pc, #400]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d08:	4b61      	ldr	r3, [pc, #388]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d0e:	f7fc fd15 	bl	800373c <HAL_GetTick>
 8006d12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d14:	e008      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d16:	f7fc fd11 	bl	800373c <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d901      	bls.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e129      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d28:	4b5a      	ldr	r3, [pc, #360]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d0f0      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d105      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d079      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006d4c:	4b52      	ldr	r3, [pc, #328]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d52:	f7fc fcf3 	bl	800373c <HAL_GetTick>
 8006d56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d58:	e008      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d5a:	f7fc fcef 	bl	800373c <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e107      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d6c:	4b49      	ldr	r3, [pc, #292]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d78:	d0ef      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d020      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d86:	4b43      	ldr	r3, [pc, #268]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8c:	0f1b      	lsrs	r3, r3, #28
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	019a      	lsls	r2, r3, #6
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	061b      	lsls	r3, r3, #24
 8006da0:	431a      	orrs	r2, r3
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	071b      	lsls	r3, r3, #28
 8006da6:	493b      	ldr	r1, [pc, #236]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006dae:	4b39      	ldr	r3, [pc, #228]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	021b      	lsls	r3, r3, #8
 8006dc0:	4934      	ldr	r1, [pc, #208]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d01e      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006dd4:	4b2f      	ldr	r3, [pc, #188]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dda:	0e1b      	lsrs	r3, r3, #24
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	019a      	lsls	r2, r3, #6
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	061b      	lsls	r3, r3, #24
 8006dec:	431a      	orrs	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	071b      	lsls	r3, r3, #28
 8006df4:	4927      	ldr	r1, [pc, #156]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006dfc:	4b25      	ldr	r3, [pc, #148]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	4922      	ldr	r1, [pc, #136]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006e12:	4b21      	ldr	r3, [pc, #132]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006e14:	2201      	movs	r2, #1
 8006e16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e18:	f7fc fc90 	bl	800373c <HAL_GetTick>
 8006e1c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006e20:	f7fc fc8c 	bl	800373c <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e0a4      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006e32:	4b18      	ldr	r3, [pc, #96]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e3e:	d1ef      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 808b 	beq.w	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	4b10      	ldr	r3, [pc, #64]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	4a0f      	ldr	r2, [pc, #60]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e6a:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a0b      	ldr	r2, [pc, #44]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e76:	f7fc fc61 	bl	800373c <HAL_GetTick>
 8006e7a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e7c:	e010      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e7e:	f7fc fc5d 	bl	800373c <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d909      	bls.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e075      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006e90:	42470068 	.word	0x42470068
 8006e94:	40023800 	.word	0x40023800
 8006e98:	42470070 	.word	0x42470070
 8006e9c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ea0:	4b38      	ldr	r3, [pc, #224]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0e8      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006eac:	4b36      	ldr	r3, [pc, #216]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d02f      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d028      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006eca:	4b2f      	ldr	r3, [pc, #188]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ed4:	4b2d      	ldr	r3, [pc, #180]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006eda:	4b2c      	ldr	r3, [pc, #176]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ee0:	4a29      	ldr	r2, [pc, #164]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ee6:	4b28      	ldr	r3, [pc, #160]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d114      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ef2:	f7fc fc23 	bl	800373c <HAL_GetTick>
 8006ef6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ef8:	e00a      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006efa:	f7fc fc1f 	bl	800373c <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e035      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f10:	4b1d      	ldr	r3, [pc, #116]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0ee      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f28:	d10d      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006f2a:	4b17      	ldr	r3, [pc, #92]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3e:	4912      	ldr	r1, [pc, #72]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	608b      	str	r3, [r1, #8]
 8006f44:	e005      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006f46:	4b10      	ldr	r3, [pc, #64]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	4a0f      	ldr	r2, [pc, #60]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f4c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f50:	6093      	str	r3, [r2, #8]
 8006f52:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f5e:	490a      	ldr	r1, [pc, #40]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0310 	and.w	r3, r3, #16
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d004      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006f76:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006f78:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40007000 	.word	0x40007000
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	42470e40 	.word	0x42470e40
 8006f90:	424711e0 	.word	0x424711e0

08006f94 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e025      	b.n	8006ff4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d106      	bne.n	8006fc2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f81d 	bl	8006ffc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	f001 fa39 	bl	800844c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	f001 fa8e 	bl	8008506 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007022:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	2b02      	cmp	r3, #2
 8007028:	d101      	bne.n	800702e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800702a:	2302      	movs	r3, #2
 800702c:	e021      	b.n	8007072 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800702e:	7dfb      	ldrb	r3, [r7, #23]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d002      	beq.n	800703a <HAL_SDRAM_SendCommand+0x2a>
 8007034:	7dfb      	ldrb	r3, [r7, #23]
 8007036:	2b05      	cmp	r3, #5
 8007038:	d118      	bne.n	800706c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2202      	movs	r2, #2
 800703e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	68b9      	ldr	r1, [r7, #8]
 800704a:	4618      	mov	r0, r3
 800704c:	f001 fac4 	bl	80085d8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d104      	bne.n	8007062 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2205      	movs	r2, #5
 800705c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007060:	e006      	b.n	8007070 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800706a:	e001      	b.n	8007070 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e000      	b.n	8007072 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d101      	bne.n	8007094 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007090:	2302      	movs	r3, #2
 8007092:	e016      	b.n	80070c2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b01      	cmp	r3, #1
 800709e:	d10f      	bne.n	80070c0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f001 facf 	bl	8008652 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	e000      	b.n	80070c2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e07b      	b.n	80071d4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d108      	bne.n	80070f6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070ec:	d009      	beq.n	8007102 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	61da      	str	r2, [r3, #28]
 80070f4:	e005      	b.n	8007102 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7fa fa77 	bl	8001610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2202      	movs	r2, #2
 8007126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007138:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007154:	431a      	orrs	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007186:	ea42 0103 	orr.w	r1, r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	0c1b      	lsrs	r3, r3, #16
 80071a0:	f003 0104 	and.w	r1, r3, #4
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	f003 0210 	and.w	r2, r3, #16
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69da      	ldr	r2, [r3, #28]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e01a      	b.n	8007224 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2202      	movs	r2, #2
 80071f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007204:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7fa fa52 	bl	80016b0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	4613      	mov	r3, r2
 800723a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800723c:	2300      	movs	r3, #0
 800723e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_SPI_Transmit+0x22>
 800724a:	2302      	movs	r3, #2
 800724c:	e12d      	b.n	80074aa <HAL_SPI_Transmit+0x27e>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007256:	f7fc fa71 	bl	800373c <HAL_GetTick>
 800725a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800725c:	88fb      	ldrh	r3, [r7, #6]
 800725e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b01      	cmp	r3, #1
 800726a:	d002      	beq.n	8007272 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800726c:	2302      	movs	r3, #2
 800726e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007270:	e116      	b.n	80074a0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <HAL_SPI_Transmit+0x52>
 8007278:	88fb      	ldrh	r3, [r7, #6]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d102      	bne.n	8007284 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007282:	e10d      	b.n	80074a0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2203      	movs	r2, #3
 8007288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	88fa      	ldrh	r2, [r7, #6]
 800729c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	88fa      	ldrh	r2, [r7, #6]
 80072a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ca:	d10f      	bne.n	80072ec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f6:	2b40      	cmp	r3, #64	; 0x40
 80072f8:	d007      	beq.n	800730a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007308:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007312:	d14f      	bne.n	80073b4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <HAL_SPI_Transmit+0xf6>
 800731c:	8afb      	ldrh	r3, [r7, #22]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d142      	bne.n	80073a8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007326:	881a      	ldrh	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007332:	1c9a      	adds	r2, r3, #2
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800733c:	b29b      	uxth	r3, r3
 800733e:	3b01      	subs	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007346:	e02f      	b.n	80073a8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b02      	cmp	r3, #2
 8007354:	d112      	bne.n	800737c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735a:	881a      	ldrh	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	1c9a      	adds	r2, r3, #2
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007370:	b29b      	uxth	r3, r3
 8007372:	3b01      	subs	r3, #1
 8007374:	b29a      	uxth	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	86da      	strh	r2, [r3, #54]	; 0x36
 800737a:	e015      	b.n	80073a8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800737c:	f7fc f9de 	bl	800373c <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	429a      	cmp	r2, r3
 800738a:	d803      	bhi.n	8007394 <HAL_SPI_Transmit+0x168>
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007392:	d102      	bne.n	800739a <HAL_SPI_Transmit+0x16e>
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80073a6:	e07b      	b.n	80074a0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1ca      	bne.n	8007348 <HAL_SPI_Transmit+0x11c>
 80073b2:	e050      	b.n	8007456 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <HAL_SPI_Transmit+0x196>
 80073bc:	8afb      	ldrh	r3, [r7, #22]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d144      	bne.n	800744c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	330c      	adds	r3, #12
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80073e8:	e030      	b.n	800744c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d113      	bne.n	8007420 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	330c      	adds	r3, #12
 8007402:	7812      	ldrb	r2, [r2, #0]
 8007404:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	86da      	strh	r2, [r3, #54]	; 0x36
 800741e:	e015      	b.n	800744c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007420:	f7fc f98c 	bl	800373c <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	429a      	cmp	r2, r3
 800742e:	d803      	bhi.n	8007438 <HAL_SPI_Transmit+0x20c>
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d102      	bne.n	800743e <HAL_SPI_Transmit+0x212>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d106      	bne.n	800744c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800744a:	e029      	b.n	80074a0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1c9      	bne.n	80073ea <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 fd00 	bl	8007e60 <SPI_EndRxTxTransaction>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2220      	movs	r2, #32
 800746a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007474:	2300      	movs	r3, #0
 8007476:	613b      	str	r3, [r7, #16]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	613b      	str	r3, [r7, #16]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	613b      	str	r3, [r7, #16]
 8007488:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748e:	2b00      	cmp	r3, #0
 8007490:	d002      	beq.n	8007498 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	77fb      	strb	r3, [r7, #31]
 8007496:	e003      	b.n	80074a0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3720      	adds	r7, #32
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b088      	sub	sp, #32
 80074b6:	af02      	add	r7, sp, #8
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	4613      	mov	r3, r2
 80074c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d002      	beq.n	80074d8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80074d2:	2302      	movs	r3, #2
 80074d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074d6:	e0fb      	b.n	80076d0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074e0:	d112      	bne.n	8007508 <HAL_SPI_Receive+0x56>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10e      	bne.n	8007508 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2204      	movs	r2, #4
 80074ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074f2:	88fa      	ldrh	r2, [r7, #6]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	4613      	mov	r3, r2
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	68b9      	ldr	r1, [r7, #8]
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 f8ef 	bl	80076e2 <HAL_SPI_TransmitReceive>
 8007504:	4603      	mov	r3, r0
 8007506:	e0e8      	b.n	80076da <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800750e:	2b01      	cmp	r3, #1
 8007510:	d101      	bne.n	8007516 <HAL_SPI_Receive+0x64>
 8007512:	2302      	movs	r3, #2
 8007514:	e0e1      	b.n	80076da <HAL_SPI_Receive+0x228>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800751e:	f7fc f90d 	bl	800373c <HAL_GetTick>
 8007522:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <HAL_SPI_Receive+0x7e>
 800752a:	88fb      	ldrh	r3, [r7, #6]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007534:	e0cc      	b.n	80076d0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2204      	movs	r2, #4
 800753a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800757c:	d10f      	bne.n	800759e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800758c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800759c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	2b40      	cmp	r3, #64	; 0x40
 80075aa:	d007      	beq.n	80075bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d16a      	bne.n	800769a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80075c4:	e032      	b.n	800762c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d115      	bne.n	8007600 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f103 020c 	add.w	r2, r3, #12
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	7812      	ldrb	r2, [r2, #0]
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075fe:	e015      	b.n	800762c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007600:	f7fc f89c 	bl	800373c <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	429a      	cmp	r2, r3
 800760e:	d803      	bhi.n	8007618 <HAL_SPI_Receive+0x166>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007616:	d102      	bne.n	800761e <HAL_SPI_Receive+0x16c>
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d106      	bne.n	800762c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800762a:	e051      	b.n	80076d0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007630:	b29b      	uxth	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1c7      	bne.n	80075c6 <HAL_SPI_Receive+0x114>
 8007636:	e035      	b.n	80076a4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	2b01      	cmp	r3, #1
 8007644:	d113      	bne.n	800766e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	b292      	uxth	r2, r2
 8007652:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	1c9a      	adds	r2, r3, #2
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800766c:	e015      	b.n	800769a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800766e:	f7fc f865 	bl	800373c <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	429a      	cmp	r2, r3
 800767c:	d803      	bhi.n	8007686 <HAL_SPI_Receive+0x1d4>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007684:	d102      	bne.n	800768c <HAL_SPI_Receive+0x1da>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d106      	bne.n	800769a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007698:	e01a      	b.n	80076d0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1c9      	bne.n	8007638 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fb73 	bl	8007d94 <SPI_EndRxTransaction>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2220      	movs	r2, #32
 80076b8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	75fb      	strb	r3, [r7, #23]
 80076c6:	e003      	b.n	80076d0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b08c      	sub	sp, #48	; 0x30
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	607a      	str	r2, [r7, #4]
 80076ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076f0:	2301      	movs	r3, #1
 80076f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <HAL_SPI_TransmitReceive+0x26>
 8007704:	2302      	movs	r3, #2
 8007706:	e198      	b.n	8007a3a <HAL_SPI_TransmitReceive+0x358>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007710:	f7fc f814 	bl	800373c <HAL_GetTick>
 8007714:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800771c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007726:	887b      	ldrh	r3, [r7, #2]
 8007728:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800772a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800772e:	2b01      	cmp	r3, #1
 8007730:	d00f      	beq.n	8007752 <HAL_SPI_TransmitReceive+0x70>
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007738:	d107      	bne.n	800774a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d103      	bne.n	800774a <HAL_SPI_TransmitReceive+0x68>
 8007742:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007746:	2b04      	cmp	r3, #4
 8007748:	d003      	beq.n	8007752 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800774a:	2302      	movs	r3, #2
 800774c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007750:	e16d      	b.n	8007a2e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <HAL_SPI_TransmitReceive+0x82>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <HAL_SPI_TransmitReceive+0x82>
 800775e:	887b      	ldrh	r3, [r7, #2]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d103      	bne.n	800776c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800776a:	e160      	b.n	8007a2e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b04      	cmp	r3, #4
 8007776:	d003      	beq.n	8007780 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2205      	movs	r2, #5
 800777c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	887a      	ldrh	r2, [r7, #2]
 8007790:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	887a      	ldrh	r2, [r7, #2]
 8007796:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	887a      	ldrh	r2, [r7, #2]
 80077a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	887a      	ldrh	r2, [r7, #2]
 80077a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c0:	2b40      	cmp	r3, #64	; 0x40
 80077c2:	d007      	beq.n	80077d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077dc:	d17c      	bne.n	80078d8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_SPI_TransmitReceive+0x10a>
 80077e6:	8b7b      	ldrh	r3, [r7, #26]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d16a      	bne.n	80078c2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f0:	881a      	ldrh	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	1c9a      	adds	r2, r3, #2
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007806:	b29b      	uxth	r3, r3
 8007808:	3b01      	subs	r3, #1
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007810:	e057      	b.n	80078c2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f003 0302 	and.w	r3, r3, #2
 800781c:	2b02      	cmp	r3, #2
 800781e:	d11b      	bne.n	8007858 <HAL_SPI_TransmitReceive+0x176>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d016      	beq.n	8007858 <HAL_SPI_TransmitReceive+0x176>
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782c:	2b01      	cmp	r3, #1
 800782e:	d113      	bne.n	8007858 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007834:	881a      	ldrh	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007840:	1c9a      	adds	r2, r3, #2
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800784a:	b29b      	uxth	r3, r3
 800784c:	3b01      	subs	r3, #1
 800784e:	b29a      	uxth	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007854:	2300      	movs	r3, #0
 8007856:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b01      	cmp	r3, #1
 8007864:	d119      	bne.n	800789a <HAL_SPI_TransmitReceive+0x1b8>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800786a:	b29b      	uxth	r3, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	d014      	beq.n	800789a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68da      	ldr	r2, [r3, #12]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787a:	b292      	uxth	r2, r2
 800787c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007882:	1c9a      	adds	r2, r3, #2
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800788c:	b29b      	uxth	r3, r3
 800788e:	3b01      	subs	r3, #1
 8007890:	b29a      	uxth	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007896:	2301      	movs	r3, #1
 8007898:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800789a:	f7fb ff4f 	bl	800373c <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d80b      	bhi.n	80078c2 <HAL_SPI_TransmitReceive+0x1e0>
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d007      	beq.n	80078c2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80078c0:	e0b5      	b.n	8007a2e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1a2      	bne.n	8007812 <HAL_SPI_TransmitReceive+0x130>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d19d      	bne.n	8007812 <HAL_SPI_TransmitReceive+0x130>
 80078d6:	e080      	b.n	80079da <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <HAL_SPI_TransmitReceive+0x204>
 80078e0:	8b7b      	ldrh	r3, [r7, #26]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d16f      	bne.n	80079c6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	330c      	adds	r3, #12
 80078f0:	7812      	ldrb	r2, [r2, #0]
 80078f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800790c:	e05b      	b.n	80079c6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b02      	cmp	r3, #2
 800791a:	d11c      	bne.n	8007956 <HAL_SPI_TransmitReceive+0x274>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d017      	beq.n	8007956 <HAL_SPI_TransmitReceive+0x274>
 8007926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007928:	2b01      	cmp	r3, #1
 800792a:	d114      	bne.n	8007956 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	330c      	adds	r3, #12
 8007936:	7812      	ldrb	r2, [r2, #0]
 8007938:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793e:	1c5a      	adds	r2, r3, #1
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b01      	cmp	r3, #1
 8007962:	d119      	bne.n	8007998 <HAL_SPI_TransmitReceive+0x2b6>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d014      	beq.n	8007998 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007978:	b2d2      	uxtb	r2, r2
 800797a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800798a:	b29b      	uxth	r3, r3
 800798c:	3b01      	subs	r3, #1
 800798e:	b29a      	uxth	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007994:	2301      	movs	r3, #1
 8007996:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007998:	f7fb fed0 	bl	800373c <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d803      	bhi.n	80079b0 <HAL_SPI_TransmitReceive+0x2ce>
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ae:	d102      	bne.n	80079b6 <HAL_SPI_TransmitReceive+0x2d4>
 80079b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d107      	bne.n	80079c6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80079c4:	e033      	b.n	8007a2e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d19e      	bne.n	800790e <HAL_SPI_TransmitReceive+0x22c>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d199      	bne.n	800790e <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 fa3e 	bl	8007e60 <SPI_EndRxTxTransaction>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d006      	beq.n	80079f8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2220      	movs	r2, #32
 80079f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80079f6:	e01a      	b.n	8007a2e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	617b      	str	r3, [r7, #20]
 8007a14:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a24:	e003      	b.n	8007a2e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3730      	adds	r7, #48	; 0x30
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10e      	bne.n	8007a84 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d009      	beq.n	8007a84 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d004      	beq.n	8007a84 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
    return;
 8007a82:	e0ce      	b.n	8007c22 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d009      	beq.n	8007aa2 <HAL_SPI_IRQHandler+0x5e>
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d004      	beq.n	8007aa2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	4798      	blx	r3
    return;
 8007aa0:	e0bf      	b.n	8007c22 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	f003 0320 	and.w	r3, r3, #32
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <HAL_SPI_IRQHandler+0x7e>
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d105      	bne.n	8007ac2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 80b0 	beq.w	8007c22 <HAL_SPI_IRQHandler+0x1de>
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	f003 0320 	and.w	r3, r3, #32
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 80aa 	beq.w	8007c22 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d023      	beq.n	8007b20 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d011      	beq.n	8007b08 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae8:	f043 0204 	orr.w	r2, r3, #4
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007af0:	2300      	movs	r3, #0
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	617b      	str	r3, [r7, #20]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	e00b      	b.n	8007b20 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b08:	2300      	movs	r3, #0
 8007b0a:	613b      	str	r3, [r7, #16]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	613b      	str	r3, [r7, #16]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	693b      	ldr	r3, [r7, #16]
        return;
 8007b1e:	e080      	b.n	8007c22 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d014      	beq.n	8007b54 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2e:	f043 0201 	orr.w	r2, r3, #1
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00c      	beq.n	8007b78 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b62:	f043 0208 	orr.w	r2, r3, #8
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60bb      	str	r3, [r7, #8]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	60bb      	str	r3, [r7, #8]
 8007b76:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d04f      	beq.n	8007c20 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b8e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d104      	bne.n	8007bac <HAL_SPI_IRQHandler+0x168>
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d034      	beq.n	8007c16 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 0203 	bic.w	r2, r2, #3
 8007bba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d011      	beq.n	8007be8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc8:	4a17      	ldr	r2, [pc, #92]	; (8007c28 <HAL_SPI_IRQHandler+0x1e4>)
 8007bca:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fc f803 	bl	8003bdc <HAL_DMA_Abort_IT>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d016      	beq.n	8007c1e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf4:	4a0c      	ldr	r2, [pc, #48]	; (8007c28 <HAL_SPI_IRQHandler+0x1e4>)
 8007bf6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fb ffed 	bl	8003bdc <HAL_DMA_Abort_IT>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00a      	beq.n	8007c1e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007c14:	e003      	b.n	8007c1e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f808 	bl	8007c2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007c1c:	e000      	b.n	8007c20 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007c1e:	bf00      	nop
    return;
 8007c20:	bf00      	nop
  }
}
 8007c22:	3720      	adds	r7, #32
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	08007c5d 	.word	0x08007c5d

08007c2c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c4e:	b2db      	uxtb	r3, r3
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff ffd8 	bl	8007c2c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	603b      	str	r3, [r7, #0]
 8007c90:	4613      	mov	r3, r2
 8007c92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c94:	f7fb fd52 	bl	800373c <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9c:	1a9b      	subs	r3, r3, r2
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ca4:	f7fb fd4a 	bl	800373c <HAL_GetTick>
 8007ca8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007caa:	4b39      	ldr	r3, [pc, #228]	; (8007d90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	015b      	lsls	r3, r3, #5
 8007cb0:	0d1b      	lsrs	r3, r3, #20
 8007cb2:	69fa      	ldr	r2, [r7, #28]
 8007cb4:	fb02 f303 	mul.w	r3, r2, r3
 8007cb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cba:	e054      	b.n	8007d66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc2:	d050      	beq.n	8007d66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cc4:	f7fb fd3a 	bl	800373c <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d902      	bls.n	8007cda <SPI_WaitFlagStateUntilTimeout+0x56>
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d13d      	bne.n	8007d56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ce8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cf2:	d111      	bne.n	8007d18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cfc:	d004      	beq.n	8007d08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d06:	d107      	bne.n	8007d18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d20:	d10f      	bne.n	8007d42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e017      	b.n	8007d86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	4013      	ands	r3, r2
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	bf0c      	ite	eq
 8007d76:	2301      	moveq	r3, #1
 8007d78:	2300      	movne	r3, #0
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d19b      	bne.n	8007cbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3720      	adds	r7, #32
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	2000000c 	.word	0x2000000c

08007d94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af02      	add	r7, sp, #8
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007da8:	d111      	bne.n	8007dce <SPI_EndRxTransaction+0x3a>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007db2:	d004      	beq.n	8007dbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dbc:	d107      	bne.n	8007dce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dcc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dd6:	d12a      	bne.n	8007e2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007de0:	d012      	beq.n	8007e08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2200      	movs	r2, #0
 8007dea:	2180      	movs	r1, #128	; 0x80
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7ff ff49 	bl	8007c84 <SPI_WaitFlagStateUntilTimeout>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d02d      	beq.n	8007e54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfc:	f043 0220 	orr.w	r2, r3, #32
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e026      	b.n	8007e56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2101      	movs	r1, #1
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f7ff ff36 	bl	8007c84 <SPI_WaitFlagStateUntilTimeout>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d01a      	beq.n	8007e54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e22:	f043 0220 	orr.w	r2, r3, #32
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e013      	b.n	8007e56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2200      	movs	r2, #0
 8007e36:	2101      	movs	r1, #1
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f7ff ff23 	bl	8007c84 <SPI_WaitFlagStateUntilTimeout>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d007      	beq.n	8007e54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e48:	f043 0220 	orr.w	r2, r3, #32
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e000      	b.n	8007e56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af02      	add	r7, sp, #8
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2201      	movs	r2, #1
 8007e74:	2102      	movs	r1, #2
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f7ff ff04 	bl	8007c84 <SPI_WaitFlagStateUntilTimeout>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d007      	beq.n	8007e92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e86:	f043 0220 	orr.w	r2, r3, #32
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e032      	b.n	8007ef8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e92:	4b1b      	ldr	r3, [pc, #108]	; (8007f00 <SPI_EndRxTxTransaction+0xa0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a1b      	ldr	r2, [pc, #108]	; (8007f04 <SPI_EndRxTxTransaction+0xa4>)
 8007e98:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9c:	0d5b      	lsrs	r3, r3, #21
 8007e9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ea2:	fb02 f303 	mul.w	r3, r2, r3
 8007ea6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eb0:	d112      	bne.n	8007ed8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2180      	movs	r1, #128	; 0x80
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f7ff fee1 	bl	8007c84 <SPI_WaitFlagStateUntilTimeout>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d016      	beq.n	8007ef6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ecc:	f043 0220 	orr.w	r2, r3, #32
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e00f      	b.n	8007ef8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eee:	2b80      	cmp	r3, #128	; 0x80
 8007ef0:	d0f2      	beq.n	8007ed8 <SPI_EndRxTxTransaction+0x78>
 8007ef2:	e000      	b.n	8007ef6 <SPI_EndRxTxTransaction+0x96>
        break;
 8007ef4:	bf00      	nop
  }

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3718      	adds	r7, #24
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	2000000c 	.word	0x2000000c
 8007f04:	165e9f81 	.word	0x165e9f81

08007f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e041      	b.n	8007f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f839 	bl	8007fa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3304      	adds	r3, #4
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f000 f9c0 	bl	80082cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
	...

08007fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d001      	beq.n	8007fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e04e      	b.n	8008072 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0201 	orr.w	r2, r2, #1
 8007fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a23      	ldr	r2, [pc, #140]	; (8008080 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d022      	beq.n	800803c <HAL_TIM_Base_Start_IT+0x80>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ffe:	d01d      	beq.n	800803c <HAL_TIM_Base_Start_IT+0x80>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a1f      	ldr	r2, [pc, #124]	; (8008084 <HAL_TIM_Base_Start_IT+0xc8>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d018      	beq.n	800803c <HAL_TIM_Base_Start_IT+0x80>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a1e      	ldr	r2, [pc, #120]	; (8008088 <HAL_TIM_Base_Start_IT+0xcc>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d013      	beq.n	800803c <HAL_TIM_Base_Start_IT+0x80>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a1c      	ldr	r2, [pc, #112]	; (800808c <HAL_TIM_Base_Start_IT+0xd0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d00e      	beq.n	800803c <HAL_TIM_Base_Start_IT+0x80>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a1b      	ldr	r2, [pc, #108]	; (8008090 <HAL_TIM_Base_Start_IT+0xd4>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d009      	beq.n	800803c <HAL_TIM_Base_Start_IT+0x80>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a19      	ldr	r2, [pc, #100]	; (8008094 <HAL_TIM_Base_Start_IT+0xd8>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d004      	beq.n	800803c <HAL_TIM_Base_Start_IT+0x80>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a18      	ldr	r2, [pc, #96]	; (8008098 <HAL_TIM_Base_Start_IT+0xdc>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d111      	bne.n	8008060 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b06      	cmp	r3, #6
 800804c:	d010      	beq.n	8008070 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f042 0201 	orr.w	r2, r2, #1
 800805c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800805e:	e007      	b.n	8008070 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f042 0201 	orr.w	r2, r2, #1
 800806e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	40010000 	.word	0x40010000
 8008084:	40000400 	.word	0x40000400
 8008088:	40000800 	.word	0x40000800
 800808c:	40000c00 	.word	0x40000c00
 8008090:	40010400 	.word	0x40010400
 8008094:	40014000 	.word	0x40014000
 8008098:	40001800 	.word	0x40001800

0800809c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d020      	beq.n	8008100 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d01b      	beq.n	8008100 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f06f 0202 	mvn.w	r2, #2
 80080d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	f003 0303 	and.w	r3, r3, #3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f8d2 	bl	8008290 <HAL_TIM_IC_CaptureCallback>
 80080ec:	e005      	b.n	80080fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f8c4 	bl	800827c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f8d5 	bl	80082a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b00      	cmp	r3, #0
 8008108:	d020      	beq.n	800814c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d01b      	beq.n	800814c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0204 	mvn.w	r2, #4
 800811c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2202      	movs	r2, #2
 8008122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f8ac 	bl	8008290 <HAL_TIM_IC_CaptureCallback>
 8008138:	e005      	b.n	8008146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f89e 	bl	800827c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f8af 	bl	80082a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f003 0308 	and.w	r3, r3, #8
 8008152:	2b00      	cmp	r3, #0
 8008154:	d020      	beq.n	8008198 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f003 0308 	and.w	r3, r3, #8
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01b      	beq.n	8008198 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0208 	mvn.w	r2, #8
 8008168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2204      	movs	r2, #4
 800816e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f886 	bl	8008290 <HAL_TIM_IC_CaptureCallback>
 8008184:	e005      	b.n	8008192 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f878 	bl	800827c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f889 	bl	80082a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f003 0310 	and.w	r3, r3, #16
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d020      	beq.n	80081e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f003 0310 	and.w	r3, r3, #16
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01b      	beq.n	80081e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f06f 0210 	mvn.w	r2, #16
 80081b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2208      	movs	r2, #8
 80081ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f860 	bl	8008290 <HAL_TIM_IC_CaptureCallback>
 80081d0:	e005      	b.n	80081de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f852 	bl	800827c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f863 	bl	80082a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00c      	beq.n	8008208 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f003 0301 	and.w	r3, r3, #1
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d007      	beq.n	8008208 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f06f 0201 	mvn.w	r2, #1
 8008200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7f9 f9c0 	bl	8001588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00c      	beq.n	800822c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008218:	2b00      	cmp	r3, #0
 800821a:	d007      	beq.n	800822c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f906 	bl	8008438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00c      	beq.n	8008250 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823c:	2b00      	cmp	r3, #0
 800823e:	d007      	beq.n	8008250 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f834 	bl	80082b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f003 0320 	and.w	r3, r3, #32
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00c      	beq.n	8008274 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f003 0320 	and.w	r3, r3, #32
 8008260:	2b00      	cmp	r3, #0
 8008262:	d007      	beq.n	8008274 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f06f 0220 	mvn.w	r2, #32
 800826c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f8d8 	bl	8008424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008274:	bf00      	nop
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a46      	ldr	r2, [pc, #280]	; (80083f8 <TIM_Base_SetConfig+0x12c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d013      	beq.n	800830c <TIM_Base_SetConfig+0x40>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ea:	d00f      	beq.n	800830c <TIM_Base_SetConfig+0x40>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a43      	ldr	r2, [pc, #268]	; (80083fc <TIM_Base_SetConfig+0x130>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00b      	beq.n	800830c <TIM_Base_SetConfig+0x40>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a42      	ldr	r2, [pc, #264]	; (8008400 <TIM_Base_SetConfig+0x134>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d007      	beq.n	800830c <TIM_Base_SetConfig+0x40>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a41      	ldr	r2, [pc, #260]	; (8008404 <TIM_Base_SetConfig+0x138>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d003      	beq.n	800830c <TIM_Base_SetConfig+0x40>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a40      	ldr	r2, [pc, #256]	; (8008408 <TIM_Base_SetConfig+0x13c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d108      	bne.n	800831e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a35      	ldr	r2, [pc, #212]	; (80083f8 <TIM_Base_SetConfig+0x12c>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d02b      	beq.n	800837e <TIM_Base_SetConfig+0xb2>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800832c:	d027      	beq.n	800837e <TIM_Base_SetConfig+0xb2>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a32      	ldr	r2, [pc, #200]	; (80083fc <TIM_Base_SetConfig+0x130>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d023      	beq.n	800837e <TIM_Base_SetConfig+0xb2>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a31      	ldr	r2, [pc, #196]	; (8008400 <TIM_Base_SetConfig+0x134>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d01f      	beq.n	800837e <TIM_Base_SetConfig+0xb2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a30      	ldr	r2, [pc, #192]	; (8008404 <TIM_Base_SetConfig+0x138>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d01b      	beq.n	800837e <TIM_Base_SetConfig+0xb2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a2f      	ldr	r2, [pc, #188]	; (8008408 <TIM_Base_SetConfig+0x13c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d017      	beq.n	800837e <TIM_Base_SetConfig+0xb2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a2e      	ldr	r2, [pc, #184]	; (800840c <TIM_Base_SetConfig+0x140>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d013      	beq.n	800837e <TIM_Base_SetConfig+0xb2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a2d      	ldr	r2, [pc, #180]	; (8008410 <TIM_Base_SetConfig+0x144>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d00f      	beq.n	800837e <TIM_Base_SetConfig+0xb2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a2c      	ldr	r2, [pc, #176]	; (8008414 <TIM_Base_SetConfig+0x148>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d00b      	beq.n	800837e <TIM_Base_SetConfig+0xb2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a2b      	ldr	r2, [pc, #172]	; (8008418 <TIM_Base_SetConfig+0x14c>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d007      	beq.n	800837e <TIM_Base_SetConfig+0xb2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a2a      	ldr	r2, [pc, #168]	; (800841c <TIM_Base_SetConfig+0x150>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d003      	beq.n	800837e <TIM_Base_SetConfig+0xb2>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a29      	ldr	r2, [pc, #164]	; (8008420 <TIM_Base_SetConfig+0x154>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d108      	bne.n	8008390 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	4313      	orrs	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	4313      	orrs	r3, r2
 800839c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a10      	ldr	r2, [pc, #64]	; (80083f8 <TIM_Base_SetConfig+0x12c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d003      	beq.n	80083c4 <TIM_Base_SetConfig+0xf8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a12      	ldr	r2, [pc, #72]	; (8008408 <TIM_Base_SetConfig+0x13c>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d103      	bne.n	80083cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	691a      	ldr	r2, [r3, #16]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d105      	bne.n	80083ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	f023 0201 	bic.w	r2, r3, #1
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	611a      	str	r2, [r3, #16]
  }
}
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	40010000 	.word	0x40010000
 80083fc:	40000400 	.word	0x40000400
 8008400:	40000800 	.word	0x40000800
 8008404:	40000c00 	.word	0x40000c00
 8008408:	40010400 	.word	0x40010400
 800840c:	40014000 	.word	0x40014000
 8008410:	40014400 	.word	0x40014400
 8008414:	40014800 	.word	0x40014800
 8008418:	40001800 	.word	0x40001800
 800841c:	40001c00 	.word	0x40001c00
 8008420:	40002000 	.word	0x40002000

08008424 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d123      	bne.n	80084a6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008466:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	6851      	ldr	r1, [r2, #4]
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	6892      	ldr	r2, [r2, #8]
 8008472:	4311      	orrs	r1, r2
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	68d2      	ldr	r2, [r2, #12]
 8008478:	4311      	orrs	r1, r2
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	6912      	ldr	r2, [r2, #16]
 800847e:	4311      	orrs	r1, r2
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	6952      	ldr	r2, [r2, #20]
 8008484:	4311      	orrs	r1, r2
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	6992      	ldr	r2, [r2, #24]
 800848a:	4311      	orrs	r1, r2
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	69d2      	ldr	r2, [r2, #28]
 8008490:	4311      	orrs	r1, r2
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	6a12      	ldr	r2, [r2, #32]
 8008496:	4311      	orrs	r1, r2
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800849c:	430a      	orrs	r2, r1
 800849e:	431a      	orrs	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	e028      	b.n	80084f8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	69d9      	ldr	r1, [r3, #28]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	4319      	orrs	r1, r3
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	430b      	orrs	r3, r1
 80084be:	431a      	orrs	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80084cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	6851      	ldr	r1, [r2, #4]
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	6892      	ldr	r2, [r2, #8]
 80084d8:	4311      	orrs	r1, r2
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	68d2      	ldr	r2, [r2, #12]
 80084de:	4311      	orrs	r1, r2
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	6912      	ldr	r2, [r2, #16]
 80084e4:	4311      	orrs	r1, r2
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	6952      	ldr	r2, [r2, #20]
 80084ea:	4311      	orrs	r1, r2
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	6992      	ldr	r2, [r2, #24]
 80084f0:	430a      	orrs	r2, r1
 80084f2:	431a      	orrs	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008506:	b480      	push	{r7}
 8008508:	b085      	sub	sp, #20
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d128      	bne.n	800856a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	1e59      	subs	r1, r3, #1
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	3b01      	subs	r3, #1
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	4319      	orrs	r1, r3
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	3b01      	subs	r3, #1
 8008536:	021b      	lsls	r3, r3, #8
 8008538:	4319      	orrs	r1, r3
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	3b01      	subs	r3, #1
 8008540:	031b      	lsls	r3, r3, #12
 8008542:	4319      	orrs	r1, r3
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	3b01      	subs	r3, #1
 800854a:	041b      	lsls	r3, r3, #16
 800854c:	4319      	orrs	r1, r3
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	3b01      	subs	r3, #1
 8008554:	051b      	lsls	r3, r3, #20
 8008556:	4319      	orrs	r1, r3
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	3b01      	subs	r3, #1
 800855e:	061b      	lsls	r3, r3, #24
 8008560:	430b      	orrs	r3, r1
 8008562:	431a      	orrs	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	609a      	str	r2, [r3, #8]
 8008568:	e02f      	b.n	80085ca <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008572:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	68d2      	ldr	r2, [r2, #12]
 800857a:	3a01      	subs	r2, #1
 800857c:	0311      	lsls	r1, r2, #12
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	6952      	ldr	r2, [r2, #20]
 8008582:	3a01      	subs	r2, #1
 8008584:	0512      	lsls	r2, r2, #20
 8008586:	430a      	orrs	r2, r1
 8008588:	431a      	orrs	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	1e59      	subs	r1, r3, #1
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	3b01      	subs	r3, #1
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	4319      	orrs	r1, r3
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	3b01      	subs	r3, #1
 80085ac:	021b      	lsls	r3, r3, #8
 80085ae:	4319      	orrs	r1, r3
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	4319      	orrs	r1, r3
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	3b01      	subs	r3, #1
 80085c0:	061b      	lsls	r3, r3, #24
 80085c2:	430b      	orrs	r3, r1
 80085c4:	431a      	orrs	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	0d9b      	lsrs	r3, r3, #22
 80085ee:	059b      	lsls	r3, r3, #22
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	6811      	ldr	r1, [r2, #0]
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	6852      	ldr	r2, [r2, #4]
 80085f8:	4311      	orrs	r1, r2
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	6892      	ldr	r2, [r2, #8]
 80085fe:	3a01      	subs	r2, #1
 8008600:	0152      	lsls	r2, r2, #5
 8008602:	4311      	orrs	r1, r2
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	68d2      	ldr	r2, [r2, #12]
 8008608:	0252      	lsls	r2, r2, #9
 800860a:	430a      	orrs	r2, r1
 800860c:	431a      	orrs	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008612:	f7fb f893 	bl	800373c <HAL_GetTick>
 8008616:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008618:	e010      	b.n	800863c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008620:	d00c      	beq.n	800863c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d007      	beq.n	8008638 <FMC_SDRAM_SendCommand+0x60>
 8008628:	f7fb f888 	bl	800373c <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	429a      	cmp	r2, r3
 8008636:	d201      	bcs.n	800863c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e006      	b.n	800864a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	f003 0320 	and.w	r3, r3, #32
 8008644:	2b20      	cmp	r3, #32
 8008646:	d0e8      	beq.n	800861a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008652:	b480      	push	{r7}
 8008654:	b083      	sub	sp, #12
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008664:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	0052      	lsls	r2, r2, #1
 800866c:	431a      	orrs	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008680:	b084      	sub	sp, #16
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	f107 001c 	add.w	r0, r7, #28
 800868e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008692:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008696:	2b01      	cmp	r3, #1
 8008698:	d123      	bne.n	80086e2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80086ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80086c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d105      	bne.n	80086d6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f001 fae2 	bl	8009ca0 <USB_CoreReset>
 80086dc:	4603      	mov	r3, r0
 80086de:	73fb      	strb	r3, [r7, #15]
 80086e0:	e01b      	b.n	800871a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f001 fad6 	bl	8009ca0 <USB_CoreReset>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80086f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d106      	bne.n	800870e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008704:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	639a      	str	r2, [r3, #56]	; 0x38
 800870c:	e005      	b.n	800871a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008712:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800871a:	7fbb      	ldrb	r3, [r7, #30]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d10b      	bne.n	8008738 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f043 0206 	orr.w	r2, r3, #6
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	f043 0220 	orr.w	r2, r3, #32
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008738:	7bfb      	ldrb	r3, [r7, #15]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008744:	b004      	add	sp, #16
 8008746:	4770      	bx	lr

08008748 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	4613      	mov	r3, r2
 8008754:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d165      	bne.n	8008828 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	4a41      	ldr	r2, [pc, #260]	; (8008864 <USB_SetTurnaroundTime+0x11c>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d906      	bls.n	8008772 <USB_SetTurnaroundTime+0x2a>
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	4a40      	ldr	r2, [pc, #256]	; (8008868 <USB_SetTurnaroundTime+0x120>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d202      	bcs.n	8008772 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800876c:	230f      	movs	r3, #15
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	e062      	b.n	8008838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	4a3c      	ldr	r2, [pc, #240]	; (8008868 <USB_SetTurnaroundTime+0x120>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d306      	bcc.n	8008788 <USB_SetTurnaroundTime+0x40>
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	4a3b      	ldr	r2, [pc, #236]	; (800886c <USB_SetTurnaroundTime+0x124>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d202      	bcs.n	8008788 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008782:	230e      	movs	r3, #14
 8008784:	617b      	str	r3, [r7, #20]
 8008786:	e057      	b.n	8008838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4a38      	ldr	r2, [pc, #224]	; (800886c <USB_SetTurnaroundTime+0x124>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d306      	bcc.n	800879e <USB_SetTurnaroundTime+0x56>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	4a37      	ldr	r2, [pc, #220]	; (8008870 <USB_SetTurnaroundTime+0x128>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d202      	bcs.n	800879e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008798:	230d      	movs	r3, #13
 800879a:	617b      	str	r3, [r7, #20]
 800879c:	e04c      	b.n	8008838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4a33      	ldr	r2, [pc, #204]	; (8008870 <USB_SetTurnaroundTime+0x128>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d306      	bcc.n	80087b4 <USB_SetTurnaroundTime+0x6c>
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	4a32      	ldr	r2, [pc, #200]	; (8008874 <USB_SetTurnaroundTime+0x12c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d802      	bhi.n	80087b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80087ae:	230c      	movs	r3, #12
 80087b0:	617b      	str	r3, [r7, #20]
 80087b2:	e041      	b.n	8008838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	4a2f      	ldr	r2, [pc, #188]	; (8008874 <USB_SetTurnaroundTime+0x12c>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d906      	bls.n	80087ca <USB_SetTurnaroundTime+0x82>
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	4a2e      	ldr	r2, [pc, #184]	; (8008878 <USB_SetTurnaroundTime+0x130>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d802      	bhi.n	80087ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80087c4:	230b      	movs	r3, #11
 80087c6:	617b      	str	r3, [r7, #20]
 80087c8:	e036      	b.n	8008838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	4a2a      	ldr	r2, [pc, #168]	; (8008878 <USB_SetTurnaroundTime+0x130>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d906      	bls.n	80087e0 <USB_SetTurnaroundTime+0x98>
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	4a29      	ldr	r2, [pc, #164]	; (800887c <USB_SetTurnaroundTime+0x134>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d802      	bhi.n	80087e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80087da:	230a      	movs	r3, #10
 80087dc:	617b      	str	r3, [r7, #20]
 80087de:	e02b      	b.n	8008838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4a26      	ldr	r2, [pc, #152]	; (800887c <USB_SetTurnaroundTime+0x134>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d906      	bls.n	80087f6 <USB_SetTurnaroundTime+0xae>
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	4a25      	ldr	r2, [pc, #148]	; (8008880 <USB_SetTurnaroundTime+0x138>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d202      	bcs.n	80087f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80087f0:	2309      	movs	r3, #9
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	e020      	b.n	8008838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	4a21      	ldr	r2, [pc, #132]	; (8008880 <USB_SetTurnaroundTime+0x138>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d306      	bcc.n	800880c <USB_SetTurnaroundTime+0xc4>
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	4a20      	ldr	r2, [pc, #128]	; (8008884 <USB_SetTurnaroundTime+0x13c>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d802      	bhi.n	800880c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008806:	2308      	movs	r3, #8
 8008808:	617b      	str	r3, [r7, #20]
 800880a:	e015      	b.n	8008838 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	4a1d      	ldr	r2, [pc, #116]	; (8008884 <USB_SetTurnaroundTime+0x13c>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d906      	bls.n	8008822 <USB_SetTurnaroundTime+0xda>
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	4a1c      	ldr	r2, [pc, #112]	; (8008888 <USB_SetTurnaroundTime+0x140>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d202      	bcs.n	8008822 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800881c:	2307      	movs	r3, #7
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	e00a      	b.n	8008838 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008822:	2306      	movs	r3, #6
 8008824:	617b      	str	r3, [r7, #20]
 8008826:	e007      	b.n	8008838 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008828:	79fb      	ldrb	r3, [r7, #7]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d102      	bne.n	8008834 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800882e:	2309      	movs	r3, #9
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	e001      	b.n	8008838 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008834:	2309      	movs	r3, #9
 8008836:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	029b      	lsls	r3, r3, #10
 800884c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008850:	431a      	orrs	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	371c      	adds	r7, #28
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	00d8acbf 	.word	0x00d8acbf
 8008868:	00e4e1c0 	.word	0x00e4e1c0
 800886c:	00f42400 	.word	0x00f42400
 8008870:	01067380 	.word	0x01067380
 8008874:	011a499f 	.word	0x011a499f
 8008878:	01312cff 	.word	0x01312cff
 800887c:	014ca43f 	.word	0x014ca43f
 8008880:	016e3600 	.word	0x016e3600
 8008884:	01a6ab1f 	.word	0x01a6ab1f
 8008888:	01e84800 	.word	0x01e84800

0800888c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f043 0201 	orr.w	r2, r3, #1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b083      	sub	sp, #12
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f023 0201 	bic.w	r2, r3, #1
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80088ec:	78fb      	ldrb	r3, [r7, #3]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d115      	bne.n	800891e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80088fe:	200a      	movs	r0, #10
 8008900:	f7fa ff28 	bl	8003754 <HAL_Delay>
      ms += 10U;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	330a      	adds	r3, #10
 8008908:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f001 f939 	bl	8009b82 <USB_GetMode>
 8008910:	4603      	mov	r3, r0
 8008912:	2b01      	cmp	r3, #1
 8008914:	d01e      	beq.n	8008954 <USB_SetCurrentMode+0x84>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2bc7      	cmp	r3, #199	; 0xc7
 800891a:	d9f0      	bls.n	80088fe <USB_SetCurrentMode+0x2e>
 800891c:	e01a      	b.n	8008954 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800891e:	78fb      	ldrb	r3, [r7, #3]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d115      	bne.n	8008950 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008930:	200a      	movs	r0, #10
 8008932:	f7fa ff0f 	bl	8003754 <HAL_Delay>
      ms += 10U;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	330a      	adds	r3, #10
 800893a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 f920 	bl	8009b82 <USB_GetMode>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d005      	beq.n	8008954 <USB_SetCurrentMode+0x84>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2bc7      	cmp	r3, #199	; 0xc7
 800894c:	d9f0      	bls.n	8008930 <USB_SetCurrentMode+0x60>
 800894e:	e001      	b.n	8008954 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e005      	b.n	8008960 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2bc8      	cmp	r3, #200	; 0xc8
 8008958:	d101      	bne.n	800895e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e000      	b.n	8008960 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008968:	b084      	sub	sp, #16
 800896a:	b580      	push	{r7, lr}
 800896c:	b086      	sub	sp, #24
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008982:	2300      	movs	r3, #0
 8008984:	613b      	str	r3, [r7, #16]
 8008986:	e009      	b.n	800899c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	3340      	adds	r3, #64	; 0x40
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	2200      	movs	r2, #0
 8008994:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	3301      	adds	r3, #1
 800899a:	613b      	str	r3, [r7, #16]
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	2b0e      	cmp	r3, #14
 80089a0:	d9f2      	bls.n	8008988 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80089a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d11c      	bne.n	80089e4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089b8:	f043 0302 	orr.w	r3, r3, #2
 80089bc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	639a      	str	r2, [r3, #56]	; 0x38
 80089e2:	e00b      	b.n	80089fc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a02:	461a      	mov	r2, r3
 8008a04:	2300      	movs	r3, #0
 8008a06:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a08:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d10d      	bne.n	8008a2c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d104      	bne.n	8008a22 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008a18:	2100      	movs	r1, #0
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f968 	bl	8008cf0 <USB_SetDevSpeed>
 8008a20:	e008      	b.n	8008a34 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008a22:	2101      	movs	r1, #1
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f963 	bl	8008cf0 <USB_SetDevSpeed>
 8008a2a:	e003      	b.n	8008a34 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a2c:	2103      	movs	r1, #3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f95e 	bl	8008cf0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a34:	2110      	movs	r1, #16
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f8fa 	bl	8008c30 <USB_FlushTxFifo>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f924 	bl	8008c94 <USB_FlushRxFifo>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	2300      	movs	r3, #0
 8008a60:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a68:	461a      	mov	r2, r3
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a74:	461a      	mov	r2, r3
 8008a76:	2300      	movs	r3, #0
 8008a78:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	613b      	str	r3, [r7, #16]
 8008a7e:	e043      	b.n	8008b08 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a96:	d118      	bne.n	8008aca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10a      	bne.n	8008ab4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	015a      	lsls	r2, r3, #5
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ab0:	6013      	str	r3, [r2, #0]
 8008ab2:	e013      	b.n	8008adc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	e008      	b.n	8008adc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	2300      	movs	r3, #0
 8008ada:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae8:	461a      	mov	r2, r3
 8008aea:	2300      	movs	r3, #0
 8008aec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afa:	461a      	mov	r2, r3
 8008afc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	3301      	adds	r3, #1
 8008b06:	613b      	str	r3, [r7, #16]
 8008b08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d3b5      	bcc.n	8008a80 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b14:	2300      	movs	r3, #0
 8008b16:	613b      	str	r3, [r7, #16]
 8008b18:	e043      	b.n	8008ba2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b30:	d118      	bne.n	8008b64 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10a      	bne.n	8008b4e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b44:	461a      	mov	r2, r3
 8008b46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	e013      	b.n	8008b76 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	e008      	b.n	8008b76 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	015a      	lsls	r2, r3, #5
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b70:	461a      	mov	r2, r3
 8008b72:	2300      	movs	r3, #0
 8008b74:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b82:	461a      	mov	r2, r3
 8008b84:	2300      	movs	r3, #0
 8008b86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	015a      	lsls	r2, r3, #5
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b94:	461a      	mov	r2, r3
 8008b96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	613b      	str	r3, [r7, #16]
 8008ba2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d3b5      	bcc.n	8008b1a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bc0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008bce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008bd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d105      	bne.n	8008be4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	f043 0210 	orr.w	r2, r3, #16
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	699a      	ldr	r2, [r3, #24]
 8008be8:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <USB_DevInit+0x2c4>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008bf0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d005      	beq.n	8008c04 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	f043 0208 	orr.w	r2, r3, #8
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d107      	bne.n	8008c1c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c14:	f043 0304 	orr.w	r3, r3, #4
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c28:	b004      	add	sp, #16
 8008c2a:	4770      	bx	lr
 8008c2c:	803c3800 	.word	0x803c3800

08008c30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3301      	adds	r3, #1
 8008c42:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c4a:	d901      	bls.n	8008c50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e01b      	b.n	8008c88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	daf2      	bge.n	8008c3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	019b      	lsls	r3, r3, #6
 8008c60:	f043 0220 	orr.w	r2, r3, #32
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008c74:	d901      	bls.n	8008c7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e006      	b.n	8008c88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	f003 0320 	and.w	r3, r3, #32
 8008c82:	2b20      	cmp	r3, #32
 8008c84:	d0f0      	beq.n	8008c68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008cac:	d901      	bls.n	8008cb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e018      	b.n	8008ce4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	daf2      	bge.n	8008ca0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2210      	movs	r2, #16
 8008cc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008cd0:	d901      	bls.n	8008cd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e006      	b.n	8008ce4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	f003 0310 	and.w	r3, r3, #16
 8008cde:	2b10      	cmp	r3, #16
 8008ce0:	d0f0      	beq.n	8008cc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	78fb      	ldrb	r3, [r7, #3]
 8008d0a:	68f9      	ldr	r1, [r7, #12]
 8008d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d10:	4313      	orrs	r3, r2
 8008d12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b087      	sub	sp, #28
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f003 0306 	and.w	r3, r3, #6
 8008d3a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d102      	bne.n	8008d48 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008d42:	2300      	movs	r3, #0
 8008d44:	75fb      	strb	r3, [r7, #23]
 8008d46:	e00a      	b.n	8008d5e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d002      	beq.n	8008d54 <USB_GetDevSpeed+0x32>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2b06      	cmp	r3, #6
 8008d52:	d102      	bne.n	8008d5a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008d54:	2302      	movs	r3, #2
 8008d56:	75fb      	strb	r3, [r7, #23]
 8008d58:	e001      	b.n	8008d5e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008d5a:	230f      	movs	r3, #15
 8008d5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	371c      	adds	r7, #28
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d13a      	bne.n	8008dfe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8e:	69da      	ldr	r2, [r3, #28]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	f003 030f 	and.w	r3, r3, #15
 8008d98:	2101      	movs	r1, #1
 8008d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	68f9      	ldr	r1, [r7, #12]
 8008da2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008da6:	4313      	orrs	r3, r2
 8008da8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d155      	bne.n	8008e6c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	015a      	lsls	r2, r3, #5
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	791b      	ldrb	r3, [r3, #4]
 8008dda:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ddc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	059b      	lsls	r3, r3, #22
 8008de2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008de4:	4313      	orrs	r3, r2
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	0151      	lsls	r1, r2, #5
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	440a      	add	r2, r1
 8008dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dfa:	6013      	str	r3, [r2, #0]
 8008dfc:	e036      	b.n	8008e6c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e04:	69da      	ldr	r2, [r3, #28]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	f003 030f 	and.w	r3, r3, #15
 8008e0e:	2101      	movs	r1, #1
 8008e10:	fa01 f303 	lsl.w	r3, r1, r3
 8008e14:	041b      	lsls	r3, r3, #16
 8008e16:	68f9      	ldr	r1, [r7, #12]
 8008e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d11a      	bne.n	8008e6c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	791b      	ldrb	r3, [r3, #4]
 8008e50:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e52:	430b      	orrs	r3, r1
 8008e54:	4313      	orrs	r3, r2
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	0151      	lsls	r1, r2, #5
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	440a      	add	r2, r1
 8008e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e6a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
	...

08008e7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	785b      	ldrb	r3, [r3, #1]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d161      	bne.n	8008f5c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eae:	d11f      	bne.n	8008ef0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	0151      	lsls	r1, r2, #5
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	440a      	add	r2, r1
 8008ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ece:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	015a      	lsls	r2, r3, #5
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	4413      	add	r3, r2
 8008ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	0151      	lsls	r1, r2, #5
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	440a      	add	r2, r1
 8008ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008eee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	f003 030f 	and.w	r3, r3, #15
 8008f00:	2101      	movs	r1, #1
 8008f02:	fa01 f303 	lsl.w	r3, r1, r3
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	68f9      	ldr	r1, [r7, #12]
 8008f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f10:	4013      	ands	r3, r2
 8008f12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f1a:	69da      	ldr	r2, [r3, #28]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	f003 030f 	and.w	r3, r3, #15
 8008f24:	2101      	movs	r1, #1
 8008f26:	fa01 f303 	lsl.w	r3, r1, r3
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	43db      	mvns	r3, r3
 8008f2e:	68f9      	ldr	r1, [r7, #12]
 8008f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f34:	4013      	ands	r3, r2
 8008f36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	0159      	lsls	r1, r3, #5
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	440b      	add	r3, r1
 8008f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f52:	4619      	mov	r1, r3
 8008f54:	4b35      	ldr	r3, [pc, #212]	; (800902c <USB_DeactivateEndpoint+0x1b0>)
 8008f56:	4013      	ands	r3, r2
 8008f58:	600b      	str	r3, [r1, #0]
 8008f5a:	e060      	b.n	800901e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f72:	d11f      	bne.n	8008fb4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	015a      	lsls	r2, r3, #5
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	0151      	lsls	r1, r2, #5
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	440a      	add	r2, r1
 8008f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f92:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	0151      	lsls	r1, r2, #5
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	440a      	add	r2, r1
 8008faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	f003 030f 	and.w	r3, r3, #15
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8008fca:	041b      	lsls	r3, r3, #16
 8008fcc:	43db      	mvns	r3, r3
 8008fce:	68f9      	ldr	r1, [r7, #12]
 8008fd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fde:	69da      	ldr	r2, [r3, #28]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	f003 030f 	and.w	r3, r3, #15
 8008fe8:	2101      	movs	r1, #1
 8008fea:	fa01 f303 	lsl.w	r3, r1, r3
 8008fee:	041b      	lsls	r3, r3, #16
 8008ff0:	43db      	mvns	r3, r3
 8008ff2:	68f9      	ldr	r1, [r7, #12]
 8008ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	0159      	lsls	r1, r3, #5
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	440b      	add	r3, r1
 8009012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009016:	4619      	mov	r1, r3
 8009018:	4b05      	ldr	r3, [pc, #20]	; (8009030 <USB_DeactivateEndpoint+0x1b4>)
 800901a:	4013      	ands	r3, r2
 800901c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	ec337800 	.word	0xec337800
 8009030:	eff37800 	.word	0xeff37800

08009034 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b08a      	sub	sp, #40	; 0x28
 8009038:	af02      	add	r7, sp, #8
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	4613      	mov	r3, r2
 8009040:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	785b      	ldrb	r3, [r3, #1]
 8009050:	2b01      	cmp	r3, #1
 8009052:	f040 817a 	bne.w	800934a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d132      	bne.n	80090c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	015a      	lsls	r2, r3, #5
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	4413      	add	r3, r2
 8009066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	69ba      	ldr	r2, [r7, #24]
 800906e:	0151      	lsls	r1, r2, #5
 8009070:	69fa      	ldr	r2, [r7, #28]
 8009072:	440a      	add	r2, r1
 8009074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009078:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800907c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009080:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	015a      	lsls	r2, r3, #5
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	4413      	add	r3, r2
 800908a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	69ba      	ldr	r2, [r7, #24]
 8009092:	0151      	lsls	r1, r2, #5
 8009094:	69fa      	ldr	r2, [r7, #28]
 8009096:	440a      	add	r2, r1
 8009098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800909c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	0151      	lsls	r1, r2, #5
 80090b4:	69fa      	ldr	r2, [r7, #28]
 80090b6:	440a      	add	r2, r1
 80090b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090bc:	0cdb      	lsrs	r3, r3, #19
 80090be:	04db      	lsls	r3, r3, #19
 80090c0:	6113      	str	r3, [r2, #16]
 80090c2:	e092      	b.n	80091ea <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	015a      	lsls	r2, r3, #5
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	4413      	add	r3, r2
 80090cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	69ba      	ldr	r2, [r7, #24]
 80090d4:	0151      	lsls	r1, r2, #5
 80090d6:	69fa      	ldr	r2, [r7, #28]
 80090d8:	440a      	add	r2, r1
 80090da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090de:	0cdb      	lsrs	r3, r3, #19
 80090e0:	04db      	lsls	r3, r3, #19
 80090e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	0151      	lsls	r1, r2, #5
 80090f6:	69fa      	ldr	r2, [r7, #28]
 80090f8:	440a      	add	r2, r1
 80090fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009102:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009106:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d11a      	bne.n	8009144 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	691a      	ldr	r2, [r3, #16]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	429a      	cmp	r2, r3
 8009118:	d903      	bls.n	8009122 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	015a      	lsls	r2, r3, #5
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	4413      	add	r3, r2
 800912a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	0151      	lsls	r1, r2, #5
 8009134:	69fa      	ldr	r2, [r7, #28]
 8009136:	440a      	add	r2, r1
 8009138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800913c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009140:	6113      	str	r3, [r2, #16]
 8009142:	e01b      	b.n	800917c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009150:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	6919      	ldr	r1, [r3, #16]
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	440b      	add	r3, r1
 800915c:	1e59      	subs	r1, r3, #1
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	fbb1 f3f3 	udiv	r3, r1, r3
 8009166:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009168:	4ba2      	ldr	r3, [pc, #648]	; (80093f4 <USB_EPStartXfer+0x3c0>)
 800916a:	400b      	ands	r3, r1
 800916c:	69b9      	ldr	r1, [r7, #24]
 800916e:	0148      	lsls	r0, r1, #5
 8009170:	69f9      	ldr	r1, [r7, #28]
 8009172:	4401      	add	r1, r0
 8009174:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009178:	4313      	orrs	r3, r2
 800917a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009188:	691a      	ldr	r2, [r3, #16]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009192:	69b9      	ldr	r1, [r7, #24]
 8009194:	0148      	lsls	r0, r1, #5
 8009196:	69f9      	ldr	r1, [r7, #28]
 8009198:	4401      	add	r1, r0
 800919a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800919e:	4313      	orrs	r3, r2
 80091a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	791b      	ldrb	r3, [r3, #4]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d11f      	bne.n	80091ea <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	015a      	lsls	r2, r3, #5
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	4413      	add	r3, r2
 80091b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	0151      	lsls	r1, r2, #5
 80091bc:	69fa      	ldr	r2, [r7, #28]
 80091be:	440a      	add	r2, r1
 80091c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80091c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	0151      	lsls	r1, r2, #5
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	440a      	add	r2, r1
 80091e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d14b      	bne.n	8009288 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d009      	beq.n	800920c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009204:	461a      	mov	r2, r3
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	69db      	ldr	r3, [r3, #28]
 800920a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	791b      	ldrb	r3, [r3, #4]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d128      	bne.n	8009266 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009220:	2b00      	cmp	r3, #0
 8009222:	d110      	bne.n	8009246 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	0151      	lsls	r1, r2, #5
 8009236:	69fa      	ldr	r2, [r7, #28]
 8009238:	440a      	add	r2, r1
 800923a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800923e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009242:	6013      	str	r3, [r2, #0]
 8009244:	e00f      	b.n	8009266 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69ba      	ldr	r2, [r7, #24]
 8009256:	0151      	lsls	r1, r2, #5
 8009258:	69fa      	ldr	r2, [r7, #28]
 800925a:	440a      	add	r2, r1
 800925c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009264:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	0151      	lsls	r1, r2, #5
 8009278:	69fa      	ldr	r2, [r7, #28]
 800927a:	440a      	add	r2, r1
 800927c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009280:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	e165      	b.n	8009554 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	69ba      	ldr	r2, [r7, #24]
 8009298:	0151      	lsls	r1, r2, #5
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	440a      	add	r2, r1
 800929e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	791b      	ldrb	r3, [r3, #4]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d015      	beq.n	80092dc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 814d 	beq.w	8009554 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	f003 030f 	and.w	r3, r3, #15
 80092ca:	2101      	movs	r1, #1
 80092cc:	fa01 f303 	lsl.w	r3, r1, r3
 80092d0:	69f9      	ldr	r1, [r7, #28]
 80092d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092d6:	4313      	orrs	r3, r2
 80092d8:	634b      	str	r3, [r1, #52]	; 0x34
 80092da:	e13b      	b.n	8009554 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d110      	bne.n	800930e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	69ba      	ldr	r2, [r7, #24]
 80092fc:	0151      	lsls	r1, r2, #5
 80092fe:	69fa      	ldr	r2, [r7, #28]
 8009300:	440a      	add	r2, r1
 8009302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009306:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800930a:	6013      	str	r3, [r2, #0]
 800930c:	e00f      	b.n	800932e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	4413      	add	r3, r2
 8009316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	0151      	lsls	r1, r2, #5
 8009320:	69fa      	ldr	r2, [r7, #28]
 8009322:	440a      	add	r2, r1
 8009324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800932c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	68d9      	ldr	r1, [r3, #12]
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	781a      	ldrb	r2, [r3, #0]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	b298      	uxth	r0, r3
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	4603      	mov	r3, r0
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f000 f9b8 	bl	80096b8 <USB_WritePacket>
 8009348:	e104      	b.n	8009554 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	4413      	add	r3, r2
 8009352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	0151      	lsls	r1, r2, #5
 800935c:	69fa      	ldr	r2, [r7, #28]
 800935e:	440a      	add	r2, r1
 8009360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009364:	0cdb      	lsrs	r3, r3, #19
 8009366:	04db      	lsls	r3, r3, #19
 8009368:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	0151      	lsls	r1, r2, #5
 800937c:	69fa      	ldr	r2, [r7, #28]
 800937e:	440a      	add	r2, r1
 8009380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009384:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009388:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800938c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d131      	bne.n	80093f8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d003      	beq.n	80093a4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	689a      	ldr	r2, [r3, #8]
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b8:	691a      	ldr	r2, [r3, #16]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093c2:	69b9      	ldr	r1, [r7, #24]
 80093c4:	0148      	lsls	r0, r1, #5
 80093c6:	69f9      	ldr	r1, [r7, #28]
 80093c8:	4401      	add	r1, r0
 80093ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093ce:	4313      	orrs	r3, r2
 80093d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	0151      	lsls	r1, r2, #5
 80093e4:	69fa      	ldr	r2, [r7, #28]
 80093e6:	440a      	add	r2, r1
 80093e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093f0:	6113      	str	r3, [r2, #16]
 80093f2:	e061      	b.n	80094b8 <USB_EPStartXfer+0x484>
 80093f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d123      	bne.n	8009448 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	015a      	lsls	r2, r3, #5
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	4413      	add	r3, r2
 8009408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940c:	691a      	ldr	r2, [r3, #16]
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009416:	69b9      	ldr	r1, [r7, #24]
 8009418:	0148      	lsls	r0, r1, #5
 800941a:	69f9      	ldr	r1, [r7, #28]
 800941c:	4401      	add	r1, r0
 800941e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009422:	4313      	orrs	r3, r2
 8009424:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	015a      	lsls	r2, r3, #5
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	4413      	add	r3, r2
 800942e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	0151      	lsls	r1, r2, #5
 8009438:	69fa      	ldr	r2, [r7, #28]
 800943a:	440a      	add	r2, r1
 800943c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009440:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009444:	6113      	str	r3, [r2, #16]
 8009446:	e037      	b.n	80094b8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	691a      	ldr	r2, [r3, #16]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	4413      	add	r3, r2
 8009452:	1e5a      	subs	r2, r3, #1
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	fbb2 f3f3 	udiv	r3, r2, r3
 800945c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	8afa      	ldrh	r2, [r7, #22]
 8009464:	fb03 f202 	mul.w	r2, r3, r2
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	4413      	add	r3, r2
 8009474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009478:	691a      	ldr	r2, [r3, #16]
 800947a:	8afb      	ldrh	r3, [r7, #22]
 800947c:	04d9      	lsls	r1, r3, #19
 800947e:	4b38      	ldr	r3, [pc, #224]	; (8009560 <USB_EPStartXfer+0x52c>)
 8009480:	400b      	ands	r3, r1
 8009482:	69b9      	ldr	r1, [r7, #24]
 8009484:	0148      	lsls	r0, r1, #5
 8009486:	69f9      	ldr	r1, [r7, #28]
 8009488:	4401      	add	r1, r0
 800948a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800948e:	4313      	orrs	r3, r2
 8009490:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	015a      	lsls	r2, r3, #5
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	4413      	add	r3, r2
 800949a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800949e:	691a      	ldr	r2, [r3, #16]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	6a1b      	ldr	r3, [r3, #32]
 80094a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094a8:	69b9      	ldr	r1, [r7, #24]
 80094aa:	0148      	lsls	r0, r1, #5
 80094ac:	69f9      	ldr	r1, [r7, #28]
 80094ae:	4401      	add	r1, r0
 80094b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80094b4:	4313      	orrs	r3, r2
 80094b6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80094b8:	79fb      	ldrb	r3, [r7, #7]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d10d      	bne.n	80094da <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d009      	beq.n	80094da <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	68d9      	ldr	r1, [r3, #12]
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d6:	460a      	mov	r2, r1
 80094d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	791b      	ldrb	r3, [r3, #4]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d128      	bne.n	8009534 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d110      	bne.n	8009514 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	015a      	lsls	r2, r3, #5
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	4413      	add	r3, r2
 80094fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	0151      	lsls	r1, r2, #5
 8009504:	69fa      	ldr	r2, [r7, #28]
 8009506:	440a      	add	r2, r1
 8009508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800950c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	e00f      	b.n	8009534 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	0151      	lsls	r1, r2, #5
 8009526:	69fa      	ldr	r2, [r7, #28]
 8009528:	440a      	add	r2, r1
 800952a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800952e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009532:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	4413      	add	r3, r2
 800953c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69ba      	ldr	r2, [r7, #24]
 8009544:	0151      	lsls	r1, r2, #5
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	440a      	add	r2, r1
 800954a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800954e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009552:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3720      	adds	r7, #32
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	1ff80000 	.word	0x1ff80000

08009564 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009564:	b480      	push	{r7}
 8009566:	b087      	sub	sp, #28
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	785b      	ldrb	r3, [r3, #1]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d14a      	bne.n	8009618 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	4413      	add	r3, r2
 800958c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009596:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800959a:	f040 8086 	bne.w	80096aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	7812      	ldrb	r2, [r2, #0]
 80095b2:	0151      	lsls	r1, r2, #5
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	440a      	add	r2, r1
 80095b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80095c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	015a      	lsls	r2, r3, #5
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	7812      	ldrb	r2, [r2, #0]
 80095d6:	0151      	lsls	r1, r2, #5
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	440a      	add	r2, r1
 80095dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	3301      	adds	r3, #1
 80095ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d902      	bls.n	80095fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	75fb      	strb	r3, [r7, #23]
          break;
 80095fa:	e056      	b.n	80096aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	015a      	lsls	r2, r3, #5
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	4413      	add	r3, r2
 8009606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009614:	d0e7      	beq.n	80095e6 <USB_EPStopXfer+0x82>
 8009616:	e048      	b.n	80096aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	015a      	lsls	r2, r3, #5
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	4413      	add	r3, r2
 8009622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800962c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009630:	d13b      	bne.n	80096aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	7812      	ldrb	r2, [r2, #0]
 8009646:	0151      	lsls	r1, r2, #5
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	440a      	add	r2, r1
 800964c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009650:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009654:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	015a      	lsls	r2, r3, #5
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	4413      	add	r3, r2
 8009660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	7812      	ldrb	r2, [r2, #0]
 800966a:	0151      	lsls	r1, r2, #5
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	440a      	add	r2, r1
 8009670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009674:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009678:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3301      	adds	r3, #1
 800967e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f242 7210 	movw	r2, #10000	; 0x2710
 8009686:	4293      	cmp	r3, r2
 8009688:	d902      	bls.n	8009690 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	75fb      	strb	r3, [r7, #23]
          break;
 800968e:	e00c      	b.n	80096aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	015a      	lsls	r2, r3, #5
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	4413      	add	r3, r2
 800969a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096a8:	d0e7      	beq.n	800967a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	371c      	adds	r7, #28
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b089      	sub	sp, #36	; 0x24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	4611      	mov	r1, r2
 80096c4:	461a      	mov	r2, r3
 80096c6:	460b      	mov	r3, r1
 80096c8:	71fb      	strb	r3, [r7, #7]
 80096ca:	4613      	mov	r3, r2
 80096cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80096d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d123      	bne.n	8009726 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80096de:	88bb      	ldrh	r3, [r7, #4]
 80096e0:	3303      	adds	r3, #3
 80096e2:	089b      	lsrs	r3, r3, #2
 80096e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80096e6:	2300      	movs	r3, #0
 80096e8:	61bb      	str	r3, [r7, #24]
 80096ea:	e018      	b.n	800971e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80096ec:	79fb      	ldrb	r3, [r7, #7]
 80096ee:	031a      	lsls	r2, r3, #12
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096f8:	461a      	mov	r2, r3
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	3301      	adds	r3, #1
 8009704:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	3301      	adds	r3, #1
 800970a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	3301      	adds	r3, #1
 8009710:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	3301      	adds	r3, #1
 8009716:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	3301      	adds	r3, #1
 800971c:	61bb      	str	r3, [r7, #24]
 800971e:	69ba      	ldr	r2, [r7, #24]
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	429a      	cmp	r2, r3
 8009724:	d3e2      	bcc.n	80096ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3724      	adds	r7, #36	; 0x24
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009734:	b480      	push	{r7}
 8009736:	b08b      	sub	sp, #44	; 0x2c
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	4613      	mov	r3, r2
 8009740:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800974a:	88fb      	ldrh	r3, [r7, #6]
 800974c:	089b      	lsrs	r3, r3, #2
 800974e:	b29b      	uxth	r3, r3
 8009750:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009752:	88fb      	ldrh	r3, [r7, #6]
 8009754:	f003 0303 	and.w	r3, r3, #3
 8009758:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800975a:	2300      	movs	r3, #0
 800975c:	623b      	str	r3, [r7, #32]
 800975e:	e014      	b.n	800978a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	601a      	str	r2, [r3, #0]
    pDest++;
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	3301      	adds	r3, #1
 8009770:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009774:	3301      	adds	r3, #1
 8009776:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977a:	3301      	adds	r3, #1
 800977c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	3301      	adds	r3, #1
 8009782:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	3301      	adds	r3, #1
 8009788:	623b      	str	r3, [r7, #32]
 800978a:	6a3a      	ldr	r2, [r7, #32]
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	429a      	cmp	r2, r3
 8009790:	d3e6      	bcc.n	8009760 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009792:	8bfb      	ldrh	r3, [r7, #30]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01e      	beq.n	80097d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009798:	2300      	movs	r3, #0
 800979a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097a2:	461a      	mov	r2, r3
 80097a4:	f107 0310 	add.w	r3, r7, #16
 80097a8:	6812      	ldr	r2, [r2, #0]
 80097aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	6a3b      	ldr	r3, [r7, #32]
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	fa22 f303 	lsr.w	r3, r2, r3
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	701a      	strb	r2, [r3, #0]
      i++;
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	3301      	adds	r3, #1
 80097c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	3301      	adds	r3, #1
 80097c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80097ca:	8bfb      	ldrh	r3, [r7, #30]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80097d0:	8bfb      	ldrh	r3, [r7, #30]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1ea      	bne.n	80097ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80097d8:	4618      	mov	r0, r3
 80097da:	372c      	adds	r7, #44	; 0x2c
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	785b      	ldrb	r3, [r3, #1]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d12c      	bne.n	800985a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	015a      	lsls	r2, r3, #5
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4413      	add	r3, r2
 8009808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	db12      	blt.n	8009838 <USB_EPSetStall+0x54>
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00f      	beq.n	8009838 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	015a      	lsls	r2, r3, #5
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	4413      	add	r3, r2
 8009820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	0151      	lsls	r1, r2, #5
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	440a      	add	r2, r1
 800982e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009832:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009836:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	0151      	lsls	r1, r2, #5
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	440a      	add	r2, r1
 800984e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009852:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	e02b      	b.n	80098b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	015a      	lsls	r2, r3, #5
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	4413      	add	r3, r2
 8009862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	db12      	blt.n	8009892 <USB_EPSetStall+0xae>
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00f      	beq.n	8009892 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	4413      	add	r3, r2
 800987a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	0151      	lsls	r1, r2, #5
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	440a      	add	r2, r1
 8009888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800988c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009890:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	4413      	add	r3, r2
 800989a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80098b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	785b      	ldrb	r3, [r3, #1]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d128      	bne.n	800992e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	0151      	lsls	r1, r2, #5
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	440a      	add	r2, r1
 80098f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	791b      	ldrb	r3, [r3, #4]
 8009900:	2b03      	cmp	r3, #3
 8009902:	d003      	beq.n	800990c <USB_EPClearStall+0x4c>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	791b      	ldrb	r3, [r3, #4]
 8009908:	2b02      	cmp	r3, #2
 800990a:	d138      	bne.n	800997e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4413      	add	r3, r2
 8009914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	0151      	lsls	r1, r2, #5
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	440a      	add	r2, r1
 8009922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	e027      	b.n	800997e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	015a      	lsls	r2, r3, #5
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	4413      	add	r3, r2
 8009936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	0151      	lsls	r1, r2, #5
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	440a      	add	r2, r1
 8009944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009948:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800994c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	791b      	ldrb	r3, [r3, #4]
 8009952:	2b03      	cmp	r3, #3
 8009954:	d003      	beq.n	800995e <USB_EPClearStall+0x9e>
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	791b      	ldrb	r3, [r3, #4]
 800995a:	2b02      	cmp	r3, #2
 800995c:	d10f      	bne.n	800997e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	4413      	add	r3, r2
 8009966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	0151      	lsls	r1, r2, #5
 8009970:	68fa      	ldr	r2, [r7, #12]
 8009972:	440a      	add	r2, r1
 8009974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800997c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80099ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	011b      	lsls	r3, r3, #4
 80099bc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80099c0:	68f9      	ldr	r1, [r7, #12]
 80099c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099c6:	4313      	orrs	r3, r2
 80099c8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099f2:	f023 0303 	bic.w	r3, r3, #3
 80099f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a06:	f023 0302 	bic.w	r3, r3, #2
 8009a0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a1a:	b480      	push	{r7}
 8009a1c:	b085      	sub	sp, #20
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a34:	f023 0303 	bic.w	r3, r3, #3
 8009a38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a48:	f043 0302 	orr.w	r3, r3, #2
 8009a4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3714      	adds	r7, #20
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	695b      	ldr	r3, [r3, #20]
 8009a68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	4013      	ands	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009a74:	68fb      	ldr	r3, [r7, #12]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b085      	sub	sp, #20
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a9e:	69db      	ldr	r3, [r3, #28]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	0c1b      	lsrs	r3, r3, #16
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b085      	sub	sp, #20
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	b29b      	uxth	r3, r3
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b085      	sub	sp, #20
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	460b      	mov	r3, r1
 8009af4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009afa:	78fb      	ldrb	r3, [r7, #3]
 8009afc:	015a      	lsls	r2, r3, #5
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	4013      	ands	r3, r2
 8009b16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b18:	68bb      	ldr	r3, [r7, #8]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3714      	adds	r7, #20
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr

08009b26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b087      	sub	sp, #28
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	460b      	mov	r3, r1
 8009b30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009b4a:	78fb      	ldrb	r3, [r7, #3]
 8009b4c:	f003 030f 	and.w	r3, r3, #15
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	fa22 f303 	lsr.w	r3, r2, r3
 8009b56:	01db      	lsls	r3, r3, #7
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	693a      	ldr	r2, [r7, #16]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009b60:	78fb      	ldrb	r3, [r7, #3]
 8009b62:	015a      	lsls	r2, r3, #5
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	4413      	add	r3, r2
 8009b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	4013      	ands	r3, r2
 8009b72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b74:	68bb      	ldr	r3, [r7, #8]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	371c      	adds	r7, #28
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b083      	sub	sp, #12
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	f003 0301 	and.w	r3, r3, #1
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b085      	sub	sp, #20
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bb8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009bbc:	f023 0307 	bic.w	r3, r3, #7
 8009bc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b087      	sub	sp, #28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	460b      	mov	r3, r1
 8009bee:	607a      	str	r2, [r7, #4]
 8009bf0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	333c      	adds	r3, #60	; 0x3c
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	4a26      	ldr	r2, [pc, #152]	; (8009c9c <USB_EP0_OutStart+0xb8>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d90a      	bls.n	8009c1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c18:	d101      	bne.n	8009c1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e037      	b.n	8009c8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c24:	461a      	mov	r2, r3
 8009c26:	2300      	movs	r3, #0
 8009c28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c4c:	f043 0318 	orr.w	r3, r3, #24
 8009c50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	697a      	ldr	r2, [r7, #20]
 8009c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009c64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009c66:	7afb      	ldrb	r3, [r7, #11]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d10f      	bne.n	8009c8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c72:	461a      	mov	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009c8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	371c      	adds	r7, #28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	4f54300a 	.word	0x4f54300a

08009ca0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009cb8:	d901      	bls.n	8009cbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009cba:	2303      	movs	r3, #3
 8009cbc:	e01b      	b.n	8009cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	daf2      	bge.n	8009cac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	f043 0201 	orr.w	r2, r3, #1
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009ce2:	d901      	bls.n	8009ce8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e006      	b.n	8009cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	f003 0301 	and.w	r3, r3, #1
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d0f0      	beq.n	8009cd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009d02:	b480      	push	{r7}
 8009d04:	b085      	sub	sp, #20
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	4603      	mov	r3, r0
 8009d0a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d14:	2b84      	cmp	r3, #132	; 0x84
 8009d16:	d005      	beq.n	8009d24 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009d18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4413      	add	r3, r2
 8009d20:	3303      	adds	r3, #3
 8009d22:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009d24:	68fb      	ldr	r3, [r7, #12]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b083      	sub	sp, #12
 8009d36:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d38:	f3ef 8305 	mrs	r3, IPSR
 8009d3c:	607b      	str	r3, [r7, #4]
  return(result);
 8009d3e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	bf14      	ite	ne
 8009d44:	2301      	movne	r3, #1
 8009d46:	2300      	moveq	r3, #0
 8009d48:	b2db      	uxtb	r3, r3
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	370c      	adds	r7, #12
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009d5a:	f001 fe77 	bl	800ba4c <vTaskStartScheduler>
  
  return osOK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d66:	b089      	sub	sp, #36	; 0x24
 8009d68:	af04      	add	r7, sp, #16
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d020      	beq.n	8009db8 <osThreadCreate+0x54>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d01c      	beq.n	8009db8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	685c      	ldr	r4, [r3, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	691e      	ldr	r6, [r3, #16]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7ff ffb6 	bl	8009d02 <makeFreeRtosPriority>
 8009d96:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	695b      	ldr	r3, [r3, #20]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009da0:	9202      	str	r2, [sp, #8]
 8009da2:	9301      	str	r3, [sp, #4]
 8009da4:	9100      	str	r1, [sp, #0]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	4632      	mov	r2, r6
 8009daa:	4629      	mov	r1, r5
 8009dac:	4620      	mov	r0, r4
 8009dae:	f001 fbdf 	bl	800b570 <xTaskCreateStatic>
 8009db2:	4603      	mov	r3, r0
 8009db4:	60fb      	str	r3, [r7, #12]
 8009db6:	e01c      	b.n	8009df2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685c      	ldr	r4, [r3, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dc4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7ff ff98 	bl	8009d02 <makeFreeRtosPriority>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	f107 030c 	add.w	r3, r7, #12
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	9200      	str	r2, [sp, #0]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	4632      	mov	r2, r6
 8009de0:	4629      	mov	r1, r5
 8009de2:	4620      	mov	r0, r4
 8009de4:	f001 fc21 	bl	800b62a <xTaskCreate>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d001      	beq.n	8009df2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009dee:	2300      	movs	r3, #0
 8009df0:	e000      	b.n	8009df4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009df2:	68fb      	ldr	r3, [r7, #12]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009dfc <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f001 fd5d 	bl	800b8c4 <vTaskDelete>
  return osOK;
 8009e0a:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d001      	beq.n	8009e2a <osDelay+0x16>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	e000      	b.n	8009e2c <osDelay+0x18>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f001 fdd9 	bl	800b9e4 <vTaskDelay>
  
  return osOK;
 8009e32:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af02      	add	r7, sp, #8
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8009e4e:	f7ff ff70 	bl	8009d32 <inHandlerMode>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d01c      	beq.n	8009e92 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	f107 0208 	add.w	r2, r7, #8
 8009e5e:	f107 030c 	add.w	r3, r7, #12
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	4613      	mov	r3, r2
 8009e66:	2201      	movs	r2, #1
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f002 fbc3 	bl	800c5f4 <xTaskGenericNotifyFromISR>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d002      	beq.n	8009e7a <osSignalSet+0x3e>
      return 0x80000000;
 8009e74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e78:	e019      	b.n	8009eae <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d015      	beq.n	8009eac <osSignalSet+0x70>
 8009e80:	4b0d      	ldr	r3, [pc, #52]	; (8009eb8 <osSignalSet+0x7c>)
 8009e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e86:	601a      	str	r2, [r3, #0]
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	e00c      	b.n	8009eac <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	f107 0308 	add.w	r3, r7, #8
 8009e98:	2201      	movs	r2, #1
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f002 faec 	bl	800c478 <xTaskGenericNotify>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d002      	beq.n	8009eac <osSignalSet+0x70>
    return 0x80000000;
 8009ea6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009eaa:	e000      	b.n	8009eae <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8009eac:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	e000ed04 	.word	0xe000ed04

08009ebc <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8009ebc:	b590      	push	{r4, r7, lr}
 8009ebe:	b089      	sub	sp, #36	; 0x24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8009ec8:	2300      	movs	r3, #0
 8009eca:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed6:	d103      	bne.n	8009ee0 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8009ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8009edc:	61fb      	str	r3, [r7, #28]
 8009ede:	e009      	b.n	8009ef4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d006      	beq.n	8009ef4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <osSignalWait+0x38>
      ticks = 1;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8009ef4:	f7ff ff1d 	bl	8009d32 <inHandlerMode>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8009efe:	2382      	movs	r3, #130	; 0x82
 8009f00:	613b      	str	r3, [r7, #16]
 8009f02:	e01b      	b.n	8009f3c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8009f04:	68b9      	ldr	r1, [r7, #8]
 8009f06:	f107 0310 	add.w	r3, r7, #16
 8009f0a:	1d1a      	adds	r2, r3, #4
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	2000      	movs	r0, #0
 8009f10:	f002 fa52 	bl	800c3b8 <xTaskNotifyWait>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d008      	beq.n	8009f2c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d102      	bne.n	8009f26 <osSignalWait+0x6a>
 8009f20:	2300      	movs	r3, #0
 8009f22:	613b      	str	r3, [r7, #16]
 8009f24:	e00a      	b.n	8009f3c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8009f26:	2340      	movs	r3, #64	; 0x40
 8009f28:	613b      	str	r3, [r7, #16]
 8009f2a:	e007      	b.n	8009f3c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	da02      	bge.n	8009f38 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8009f32:	2386      	movs	r3, #134	; 0x86
 8009f34:	613b      	str	r3, [r7, #16]
 8009f36:	e001      	b.n	8009f3c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8009f38:	2308      	movs	r3, #8
 8009f3a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	461c      	mov	r4, r3
 8009f40:	f107 0310 	add.w	r3, r7, #16
 8009f44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	3724      	adds	r7, #36	; 0x24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd90      	pop	{r4, r7, pc}

08009f54 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009f54:	b590      	push	{r4, r7, lr}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af02      	add	r7, sp, #8
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d011      	beq.n	8009f8a <osMessageCreate+0x36>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00d      	beq.n	8009f8a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6818      	ldr	r0, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6859      	ldr	r1, [r3, #4]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	2400      	movs	r4, #0
 8009f80:	9400      	str	r4, [sp, #0]
 8009f82:	f000 fe19 	bl	800abb8 <xQueueGenericCreateStatic>
 8009f86:	4603      	mov	r3, r0
 8009f88:	e008      	b.n	8009f9c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6818      	ldr	r0, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	4619      	mov	r1, r3
 8009f96:	f000 fe87 	bl	800aca8 <xQueueGenericCreate>
 8009f9a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd90      	pop	{r4, r7, pc}

08009fa4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b086      	sub	sp, #24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <osMessagePut+0x1e>
    ticks = 1;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009fc2:	f7ff feb6 	bl	8009d32 <inHandlerMode>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d018      	beq.n	8009ffe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009fcc:	f107 0210 	add.w	r2, r7, #16
 8009fd0:	f107 0108 	add.w	r1, r7, #8
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f000 ffbe 	bl	800af58 <xQueueGenericSendFromISR>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d001      	beq.n	8009fe6 <osMessagePut+0x42>
      return osErrorOS;
 8009fe2:	23ff      	movs	r3, #255	; 0xff
 8009fe4:	e018      	b.n	800a018 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d014      	beq.n	800a016 <osMessagePut+0x72>
 8009fec:	4b0c      	ldr	r3, [pc, #48]	; (800a020 <osMessagePut+0x7c>)
 8009fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	e00b      	b.n	800a016 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009ffe:	f107 0108 	add.w	r1, r7, #8
 800a002:	2300      	movs	r3, #0
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 fea8 	bl	800ad5c <xQueueGenericSend>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d001      	beq.n	800a016 <osMessagePut+0x72>
      return osErrorOS;
 800a012:	23ff      	movs	r3, #255	; 0xff
 800a014:	e000      	b.n	800a018 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	e000ed04 	.word	0xe000ed04

0800a024 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a024:	b590      	push	{r4, r7, lr}
 800a026:	b08b      	sub	sp, #44	; 0x2c
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a034:	2300      	movs	r3, #0
 800a036:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10a      	bne.n	800a054 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a03e:	2380      	movs	r3, #128	; 0x80
 800a040:	617b      	str	r3, [r7, #20]
    return event;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	461c      	mov	r4, r3
 800a046:	f107 0314 	add.w	r3, r7, #20
 800a04a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a04e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a052:	e054      	b.n	800a0fe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a054:	2300      	movs	r3, #0
 800a056:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a058:	2300      	movs	r3, #0
 800a05a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a062:	d103      	bne.n	800a06c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a064:	f04f 33ff 	mov.w	r3, #4294967295
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
 800a06a:	e009      	b.n	800a080 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d006      	beq.n	800a080 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d101      	bne.n	800a080 <osMessageGet+0x5c>
      ticks = 1;
 800a07c:	2301      	movs	r3, #1
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a080:	f7ff fe57 	bl	8009d32 <inHandlerMode>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d01c      	beq.n	800a0c4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a08a:	f107 0220 	add.w	r2, r7, #32
 800a08e:	f107 0314 	add.w	r3, r7, #20
 800a092:	3304      	adds	r3, #4
 800a094:	4619      	mov	r1, r3
 800a096:	68b8      	ldr	r0, [r7, #8]
 800a098:	f001 f8da 	bl	800b250 <xQueueReceiveFromISR>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d102      	bne.n	800a0a8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a0a2:	2310      	movs	r3, #16
 800a0a4:	617b      	str	r3, [r7, #20]
 800a0a6:	e001      	b.n	800a0ac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d01d      	beq.n	800a0ee <osMessageGet+0xca>
 800a0b2:	4b15      	ldr	r3, [pc, #84]	; (800a108 <osMessageGet+0xe4>)
 800a0b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b8:	601a      	str	r2, [r3, #0]
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	e014      	b.n	800a0ee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a0c4:	f107 0314 	add.w	r3, r7, #20
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	68b8      	ldr	r0, [r7, #8]
 800a0d0:	f000 ffde 	bl	800b090 <xQueueReceive>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d102      	bne.n	800a0e0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a0da:	2310      	movs	r3, #16
 800a0dc:	617b      	str	r3, [r7, #20]
 800a0de:	e006      	b.n	800a0ee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <osMessageGet+0xc6>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	e000      	b.n	800a0ec <osMessageGet+0xc8>
 800a0ea:	2340      	movs	r3, #64	; 0x40
 800a0ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	461c      	mov	r4, r3
 800a0f2:	f107 0314 	add.w	r3, r7, #20
 800a0f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	372c      	adds	r7, #44	; 0x2c
 800a102:	46bd      	mov	sp, r7
 800a104:	bd90      	pop	{r4, r7, pc}
 800a106:	bf00      	nop
 800a108:	e000ed04 	.word	0xe000ed04

0800a10c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08a      	sub	sp, #40	; 0x28
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a114:	2300      	movs	r3, #0
 800a116:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a118:	f001 fd02 	bl	800bb20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a11c:	4b5b      	ldr	r3, [pc, #364]	; (800a28c <pvPortMalloc+0x180>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a124:	f000 f920 	bl	800a368 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a128:	4b59      	ldr	r3, [pc, #356]	; (800a290 <pvPortMalloc+0x184>)
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4013      	ands	r3, r2
 800a130:	2b00      	cmp	r3, #0
 800a132:	f040 8093 	bne.w	800a25c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d01d      	beq.n	800a178 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a13c:	2208      	movs	r2, #8
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4413      	add	r3, r2
 800a142:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d014      	beq.n	800a178 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f023 0307 	bic.w	r3, r3, #7
 800a154:	3308      	adds	r3, #8
 800a156:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f003 0307 	and.w	r3, r3, #7
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00a      	beq.n	800a178 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	f383 8811 	msr	BASEPRI, r3
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a174:	bf00      	nop
 800a176:	e7fe      	b.n	800a176 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d06e      	beq.n	800a25c <pvPortMalloc+0x150>
 800a17e:	4b45      	ldr	r3, [pc, #276]	; (800a294 <pvPortMalloc+0x188>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	429a      	cmp	r2, r3
 800a186:	d869      	bhi.n	800a25c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a188:	4b43      	ldr	r3, [pc, #268]	; (800a298 <pvPortMalloc+0x18c>)
 800a18a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a18c:	4b42      	ldr	r3, [pc, #264]	; (800a298 <pvPortMalloc+0x18c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a192:	e004      	b.n	800a19e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d903      	bls.n	800a1b0 <pvPortMalloc+0xa4>
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1f1      	bne.n	800a194 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1b0:	4b36      	ldr	r3, [pc, #216]	; (800a28c <pvPortMalloc+0x180>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d050      	beq.n	800a25c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2208      	movs	r2, #8
 800a1c0:	4413      	add	r3, r2
 800a1c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	1ad2      	subs	r2, r2, r3
 800a1d4:	2308      	movs	r3, #8
 800a1d6:	005b      	lsls	r3, r3, #1
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d91f      	bls.n	800a21c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	f003 0307 	and.w	r3, r3, #7
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00a      	beq.n	800a204 <pvPortMalloc+0xf8>
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	613b      	str	r3, [r7, #16]
}
 800a200:	bf00      	nop
 800a202:	e7fe      	b.n	800a202 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	1ad2      	subs	r2, r2, r3
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a216:	69b8      	ldr	r0, [r7, #24]
 800a218:	f000 f908 	bl	800a42c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a21c:	4b1d      	ldr	r3, [pc, #116]	; (800a294 <pvPortMalloc+0x188>)
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	4a1b      	ldr	r2, [pc, #108]	; (800a294 <pvPortMalloc+0x188>)
 800a228:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a22a:	4b1a      	ldr	r3, [pc, #104]	; (800a294 <pvPortMalloc+0x188>)
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	4b1b      	ldr	r3, [pc, #108]	; (800a29c <pvPortMalloc+0x190>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	429a      	cmp	r2, r3
 800a234:	d203      	bcs.n	800a23e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a236:	4b17      	ldr	r3, [pc, #92]	; (800a294 <pvPortMalloc+0x188>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a18      	ldr	r2, [pc, #96]	; (800a29c <pvPortMalloc+0x190>)
 800a23c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	4b13      	ldr	r3, [pc, #76]	; (800a290 <pvPortMalloc+0x184>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	431a      	orrs	r2, r3
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24e:	2200      	movs	r2, #0
 800a250:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a252:	4b13      	ldr	r3, [pc, #76]	; (800a2a0 <pvPortMalloc+0x194>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3301      	adds	r3, #1
 800a258:	4a11      	ldr	r2, [pc, #68]	; (800a2a0 <pvPortMalloc+0x194>)
 800a25a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a25c:	f001 fc6e 	bl	800bb3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	f003 0307 	and.w	r3, r3, #7
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00a      	beq.n	800a280 <pvPortMalloc+0x174>
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	60fb      	str	r3, [r7, #12]
}
 800a27c:	bf00      	nop
 800a27e:	e7fe      	b.n	800a27e <pvPortMalloc+0x172>
	return pvReturn;
 800a280:	69fb      	ldr	r3, [r7, #28]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3728      	adds	r7, #40	; 0x28
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	20004428 	.word	0x20004428
 800a290:	2000443c 	.word	0x2000443c
 800a294:	2000442c 	.word	0x2000442c
 800a298:	20004420 	.word	0x20004420
 800a29c:	20004430 	.word	0x20004430
 800a2a0:	20004434 	.word	0x20004434

0800a2a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d04d      	beq.n	800a352 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2b6:	2308      	movs	r3, #8
 800a2b8:	425b      	negs	r3, r3
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	4413      	add	r3, r2
 800a2be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	4b24      	ldr	r3, [pc, #144]	; (800a35c <vPortFree+0xb8>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <vPortFree+0x44>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	60fb      	str	r3, [r7, #12]
}
 800a2e4:	bf00      	nop
 800a2e6:	e7fe      	b.n	800a2e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00a      	beq.n	800a306 <vPortFree+0x62>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	60bb      	str	r3, [r7, #8]
}
 800a302:	bf00      	nop
 800a304:	e7fe      	b.n	800a304 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	685a      	ldr	r2, [r3, #4]
 800a30a:	4b14      	ldr	r3, [pc, #80]	; (800a35c <vPortFree+0xb8>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4013      	ands	r3, r2
 800a310:	2b00      	cmp	r3, #0
 800a312:	d01e      	beq.n	800a352 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d11a      	bne.n	800a352 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	4b0e      	ldr	r3, [pc, #56]	; (800a35c <vPortFree+0xb8>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	43db      	mvns	r3, r3
 800a326:	401a      	ands	r2, r3
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a32c:	f001 fbf8 	bl	800bb20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	685a      	ldr	r2, [r3, #4]
 800a334:	4b0a      	ldr	r3, [pc, #40]	; (800a360 <vPortFree+0xbc>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4413      	add	r3, r2
 800a33a:	4a09      	ldr	r2, [pc, #36]	; (800a360 <vPortFree+0xbc>)
 800a33c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a33e:	6938      	ldr	r0, [r7, #16]
 800a340:	f000 f874 	bl	800a42c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a344:	4b07      	ldr	r3, [pc, #28]	; (800a364 <vPortFree+0xc0>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	3301      	adds	r3, #1
 800a34a:	4a06      	ldr	r2, [pc, #24]	; (800a364 <vPortFree+0xc0>)
 800a34c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a34e:	f001 fbf5 	bl	800bb3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a352:	bf00      	nop
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	2000443c 	.word	0x2000443c
 800a360:	2000442c 	.word	0x2000442c
 800a364:	20004438 	.word	0x20004438

0800a368 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a36e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a372:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a374:	4b27      	ldr	r3, [pc, #156]	; (800a414 <prvHeapInit+0xac>)
 800a376:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f003 0307 	and.w	r3, r3, #7
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00c      	beq.n	800a39c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3307      	adds	r3, #7
 800a386:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f023 0307 	bic.w	r3, r3, #7
 800a38e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	4a1f      	ldr	r2, [pc, #124]	; (800a414 <prvHeapInit+0xac>)
 800a398:	4413      	add	r3, r2
 800a39a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3a0:	4a1d      	ldr	r2, [pc, #116]	; (800a418 <prvHeapInit+0xb0>)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3a6:	4b1c      	ldr	r3, [pc, #112]	; (800a418 <prvHeapInit+0xb0>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3b4:	2208      	movs	r2, #8
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	1a9b      	subs	r3, r3, r2
 800a3ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f023 0307 	bic.w	r3, r3, #7
 800a3c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	4a15      	ldr	r2, [pc, #84]	; (800a41c <prvHeapInit+0xb4>)
 800a3c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3ca:	4b14      	ldr	r3, [pc, #80]	; (800a41c <prvHeapInit+0xb4>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3d2:	4b12      	ldr	r3, [pc, #72]	; (800a41c <prvHeapInit+0xb4>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	1ad2      	subs	r2, r2, r3
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3e8:	4b0c      	ldr	r3, [pc, #48]	; (800a41c <prvHeapInit+0xb4>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	4a0a      	ldr	r2, [pc, #40]	; (800a420 <prvHeapInit+0xb8>)
 800a3f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	4a09      	ldr	r2, [pc, #36]	; (800a424 <prvHeapInit+0xbc>)
 800a3fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a400:	4b09      	ldr	r3, [pc, #36]	; (800a428 <prvHeapInit+0xc0>)
 800a402:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a406:	601a      	str	r2, [r3, #0]
}
 800a408:	bf00      	nop
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	20000820 	.word	0x20000820
 800a418:	20004420 	.word	0x20004420
 800a41c:	20004428 	.word	0x20004428
 800a420:	20004430 	.word	0x20004430
 800a424:	2000442c 	.word	0x2000442c
 800a428:	2000443c 	.word	0x2000443c

0800a42c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a434:	4b28      	ldr	r3, [pc, #160]	; (800a4d8 <prvInsertBlockIntoFreeList+0xac>)
 800a436:	60fb      	str	r3, [r7, #12]
 800a438:	e002      	b.n	800a440 <prvInsertBlockIntoFreeList+0x14>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	60fb      	str	r3, [r7, #12]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	429a      	cmp	r2, r3
 800a448:	d8f7      	bhi.n	800a43a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	4413      	add	r3, r2
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d108      	bne.n	800a46e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	685a      	ldr	r2, [r3, #4]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	441a      	add	r2, r3
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	441a      	add	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d118      	bne.n	800a4b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	4b15      	ldr	r3, [pc, #84]	; (800a4dc <prvInsertBlockIntoFreeList+0xb0>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d00d      	beq.n	800a4aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	441a      	add	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	601a      	str	r2, [r3, #0]
 800a4a8:	e008      	b.n	800a4bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4aa:	4b0c      	ldr	r3, [pc, #48]	; (800a4dc <prvInsertBlockIntoFreeList+0xb0>)
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	e003      	b.n	800a4bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d002      	beq.n	800a4ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4ca:	bf00      	nop
 800a4cc:	3714      	adds	r7, #20
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	20004420 	.word	0x20004420
 800a4dc:	20004428 	.word	0x20004428

0800a4e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f103 0208 	add.w	r2, r3, #8
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f103 0208 	add.w	r2, r3, #8
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f103 0208 	add.w	r2, r3, #8
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a52e:	bf00      	nop
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr

0800a53a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a53a:	b480      	push	{r7}
 800a53c:	b085      	sub	sp, #20
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	689a      	ldr	r2, [r3, #8]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	1c5a      	adds	r2, r3, #1
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	601a      	str	r2, [r3, #0]
}
 800a576:	bf00      	nop
 800a578:	3714      	adds	r7, #20
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a582:	b480      	push	{r7}
 800a584:	b085      	sub	sp, #20
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a598:	d103      	bne.n	800a5a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	e00c      	b.n	800a5bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	3308      	adds	r3, #8
 800a5a6:	60fb      	str	r3, [r7, #12]
 800a5a8:	e002      	b.n	800a5b0 <vListInsert+0x2e>
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d2f6      	bcs.n	800a5aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	683a      	ldr	r2, [r7, #0]
 800a5d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	1c5a      	adds	r2, r3, #1
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	601a      	str	r2, [r3, #0]
}
 800a5e8:	bf00      	nop
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	6892      	ldr	r2, [r2, #8]
 800a60a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	6852      	ldr	r2, [r2, #4]
 800a614:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d103      	bne.n	800a628 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	689a      	ldr	r2, [r3, #8]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	1e5a      	subs	r2, r3, #1
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	3b04      	subs	r3, #4
 800a658:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3b04      	subs	r3, #4
 800a666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	f023 0201 	bic.w	r2, r3, #1
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	3b04      	subs	r3, #4
 800a676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a678:	4a0c      	ldr	r2, [pc, #48]	; (800a6ac <pxPortInitialiseStack+0x64>)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	3b14      	subs	r3, #20
 800a682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3b04      	subs	r3, #4
 800a68e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f06f 0202 	mvn.w	r2, #2
 800a696:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3b20      	subs	r3, #32
 800a69c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a69e:	68fb      	ldr	r3, [r7, #12]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3714      	adds	r7, #20
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	0800a6b1 	.word	0x0800a6b1

0800a6b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6ba:	4b12      	ldr	r3, [pc, #72]	; (800a704 <prvTaskExitError+0x54>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c2:	d00a      	beq.n	800a6da <prvTaskExitError+0x2a>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	60fb      	str	r3, [r7, #12]
}
 800a6d6:	bf00      	nop
 800a6d8:	e7fe      	b.n	800a6d8 <prvTaskExitError+0x28>
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	60bb      	str	r3, [r7, #8]
}
 800a6ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a6ee:	bf00      	nop
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d0fc      	beq.n	800a6f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6f6:	bf00      	nop
 800a6f8:	bf00      	nop
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	20000094 	.word	0x20000094
	...

0800a710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a710:	4b07      	ldr	r3, [pc, #28]	; (800a730 <pxCurrentTCBConst2>)
 800a712:	6819      	ldr	r1, [r3, #0]
 800a714:	6808      	ldr	r0, [r1, #0]
 800a716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71a:	f380 8809 	msr	PSP, r0
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f04f 0000 	mov.w	r0, #0
 800a726:	f380 8811 	msr	BASEPRI, r0
 800a72a:	4770      	bx	lr
 800a72c:	f3af 8000 	nop.w

0800a730 <pxCurrentTCBConst2>:
 800a730:	20004448 	.word	0x20004448
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a734:	bf00      	nop
 800a736:	bf00      	nop

0800a738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a738:	4808      	ldr	r0, [pc, #32]	; (800a75c <prvPortStartFirstTask+0x24>)
 800a73a:	6800      	ldr	r0, [r0, #0]
 800a73c:	6800      	ldr	r0, [r0, #0]
 800a73e:	f380 8808 	msr	MSP, r0
 800a742:	f04f 0000 	mov.w	r0, #0
 800a746:	f380 8814 	msr	CONTROL, r0
 800a74a:	b662      	cpsie	i
 800a74c:	b661      	cpsie	f
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	df00      	svc	0
 800a758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a75a:	bf00      	nop
 800a75c:	e000ed08 	.word	0xe000ed08

0800a760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a766:	4b46      	ldr	r3, [pc, #280]	; (800a880 <xPortStartScheduler+0x120>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a46      	ldr	r2, [pc, #280]	; (800a884 <xPortStartScheduler+0x124>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d10a      	bne.n	800a786 <xPortStartScheduler+0x26>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	613b      	str	r3, [r7, #16]
}
 800a782:	bf00      	nop
 800a784:	e7fe      	b.n	800a784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a786:	4b3e      	ldr	r3, [pc, #248]	; (800a880 <xPortStartScheduler+0x120>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a3f      	ldr	r2, [pc, #252]	; (800a888 <xPortStartScheduler+0x128>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d10a      	bne.n	800a7a6 <xPortStartScheduler+0x46>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	60fb      	str	r3, [r7, #12]
}
 800a7a2:	bf00      	nop
 800a7a4:	e7fe      	b.n	800a7a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a7a6:	4b39      	ldr	r3, [pc, #228]	; (800a88c <xPortStartScheduler+0x12c>)
 800a7a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	22ff      	movs	r2, #255	; 0xff
 800a7b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7c0:	78fb      	ldrb	r3, [r7, #3]
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a7c8:	b2da      	uxtb	r2, r3
 800a7ca:	4b31      	ldr	r3, [pc, #196]	; (800a890 <xPortStartScheduler+0x130>)
 800a7cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a7ce:	4b31      	ldr	r3, [pc, #196]	; (800a894 <xPortStartScheduler+0x134>)
 800a7d0:	2207      	movs	r2, #7
 800a7d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7d4:	e009      	b.n	800a7ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a7d6:	4b2f      	ldr	r3, [pc, #188]	; (800a894 <xPortStartScheduler+0x134>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	4a2d      	ldr	r2, [pc, #180]	; (800a894 <xPortStartScheduler+0x134>)
 800a7de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	005b      	lsls	r3, r3, #1
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a7ea:	78fb      	ldrb	r3, [r7, #3]
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7f2:	2b80      	cmp	r3, #128	; 0x80
 800a7f4:	d0ef      	beq.n	800a7d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7f6:	4b27      	ldr	r3, [pc, #156]	; (800a894 <xPortStartScheduler+0x134>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f1c3 0307 	rsb	r3, r3, #7
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	d00a      	beq.n	800a818 <xPortStartScheduler+0xb8>
	__asm volatile
 800a802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	60bb      	str	r3, [r7, #8]
}
 800a814:	bf00      	nop
 800a816:	e7fe      	b.n	800a816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a818:	4b1e      	ldr	r3, [pc, #120]	; (800a894 <xPortStartScheduler+0x134>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	021b      	lsls	r3, r3, #8
 800a81e:	4a1d      	ldr	r2, [pc, #116]	; (800a894 <xPortStartScheduler+0x134>)
 800a820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a822:	4b1c      	ldr	r3, [pc, #112]	; (800a894 <xPortStartScheduler+0x134>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a82a:	4a1a      	ldr	r2, [pc, #104]	; (800a894 <xPortStartScheduler+0x134>)
 800a82c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	b2da      	uxtb	r2, r3
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a836:	4b18      	ldr	r3, [pc, #96]	; (800a898 <xPortStartScheduler+0x138>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a17      	ldr	r2, [pc, #92]	; (800a898 <xPortStartScheduler+0x138>)
 800a83c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a842:	4b15      	ldr	r3, [pc, #84]	; (800a898 <xPortStartScheduler+0x138>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a14      	ldr	r2, [pc, #80]	; (800a898 <xPortStartScheduler+0x138>)
 800a848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a84c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a84e:	f000 f8dd 	bl	800aa0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a852:	4b12      	ldr	r3, [pc, #72]	; (800a89c <xPortStartScheduler+0x13c>)
 800a854:	2200      	movs	r2, #0
 800a856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a858:	f000 f8fc 	bl	800aa54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a85c:	4b10      	ldr	r3, [pc, #64]	; (800a8a0 <xPortStartScheduler+0x140>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a0f      	ldr	r2, [pc, #60]	; (800a8a0 <xPortStartScheduler+0x140>)
 800a862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a868:	f7ff ff66 	bl	800a738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a86c:	f001 faba 	bl	800bde4 <vTaskSwitchContext>
	prvTaskExitError();
 800a870:	f7ff ff1e 	bl	800a6b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	e000ed00 	.word	0xe000ed00
 800a884:	410fc271 	.word	0x410fc271
 800a888:	410fc270 	.word	0x410fc270
 800a88c:	e000e400 	.word	0xe000e400
 800a890:	20004440 	.word	0x20004440
 800a894:	20004444 	.word	0x20004444
 800a898:	e000ed20 	.word	0xe000ed20
 800a89c:	20000094 	.word	0x20000094
 800a8a0:	e000ef34 	.word	0xe000ef34

0800a8a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
	__asm volatile
 800a8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	607b      	str	r3, [r7, #4]
}
 800a8bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a8be:	4b0f      	ldr	r3, [pc, #60]	; (800a8fc <vPortEnterCritical+0x58>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	4a0d      	ldr	r2, [pc, #52]	; (800a8fc <vPortEnterCritical+0x58>)
 800a8c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8c8:	4b0c      	ldr	r3, [pc, #48]	; (800a8fc <vPortEnterCritical+0x58>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d10f      	bne.n	800a8f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a8d0:	4b0b      	ldr	r3, [pc, #44]	; (800a900 <vPortEnterCritical+0x5c>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	603b      	str	r3, [r7, #0]
}
 800a8ec:	bf00      	nop
 800a8ee:	e7fe      	b.n	800a8ee <vPortEnterCritical+0x4a>
	}
}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr
 800a8fc:	20000094 	.word	0x20000094
 800a900:	e000ed04 	.word	0xe000ed04

0800a904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a90a:	4b12      	ldr	r3, [pc, #72]	; (800a954 <vPortExitCritical+0x50>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10a      	bne.n	800a928 <vPortExitCritical+0x24>
	__asm volatile
 800a912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	607b      	str	r3, [r7, #4]
}
 800a924:	bf00      	nop
 800a926:	e7fe      	b.n	800a926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a928:	4b0a      	ldr	r3, [pc, #40]	; (800a954 <vPortExitCritical+0x50>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	4a09      	ldr	r2, [pc, #36]	; (800a954 <vPortExitCritical+0x50>)
 800a930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a932:	4b08      	ldr	r3, [pc, #32]	; (800a954 <vPortExitCritical+0x50>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d105      	bne.n	800a946 <vPortExitCritical+0x42>
 800a93a:	2300      	movs	r3, #0
 800a93c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a946:	bf00      	nop
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	20000094 	.word	0x20000094
	...

0800a960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a960:	f3ef 8009 	mrs	r0, PSP
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <pxCurrentTCBConst>)
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	f01e 0f10 	tst.w	lr, #16
 800a970:	bf08      	it	eq
 800a972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97a:	6010      	str	r0, [r2, #0]
 800a97c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a980:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a984:	f380 8811 	msr	BASEPRI, r0
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f001 fa28 	bl	800bde4 <vTaskSwitchContext>
 800a994:	f04f 0000 	mov.w	r0, #0
 800a998:	f380 8811 	msr	BASEPRI, r0
 800a99c:	bc09      	pop	{r0, r3}
 800a99e:	6819      	ldr	r1, [r3, #0]
 800a9a0:	6808      	ldr	r0, [r1, #0]
 800a9a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a6:	f01e 0f10 	tst.w	lr, #16
 800a9aa:	bf08      	it	eq
 800a9ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9b0:	f380 8809 	msr	PSP, r0
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	f3af 8000 	nop.w

0800a9c0 <pxCurrentTCBConst>:
 800a9c0:	20004448 	.word	0x20004448
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9c4:	bf00      	nop
 800a9c6:	bf00      	nop

0800a9c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	607b      	str	r3, [r7, #4]
}
 800a9e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a9e2:	f001 f947 	bl	800bc74 <xTaskIncrementTick>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d003      	beq.n	800a9f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a9ec:	4b06      	ldr	r3, [pc, #24]	; (800aa08 <SysTick_Handler+0x40>)
 800a9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9f2:	601a      	str	r2, [r3, #0]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	f383 8811 	msr	BASEPRI, r3
}
 800a9fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa00:	bf00      	nop
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	e000ed04 	.word	0xe000ed04

0800aa0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa10:	4b0b      	ldr	r3, [pc, #44]	; (800aa40 <vPortSetupTimerInterrupt+0x34>)
 800aa12:	2200      	movs	r2, #0
 800aa14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa16:	4b0b      	ldr	r3, [pc, #44]	; (800aa44 <vPortSetupTimerInterrupt+0x38>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa1c:	4b0a      	ldr	r3, [pc, #40]	; (800aa48 <vPortSetupTimerInterrupt+0x3c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a0a      	ldr	r2, [pc, #40]	; (800aa4c <vPortSetupTimerInterrupt+0x40>)
 800aa22:	fba2 2303 	umull	r2, r3, r2, r3
 800aa26:	099b      	lsrs	r3, r3, #6
 800aa28:	4a09      	ldr	r2, [pc, #36]	; (800aa50 <vPortSetupTimerInterrupt+0x44>)
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa2e:	4b04      	ldr	r3, [pc, #16]	; (800aa40 <vPortSetupTimerInterrupt+0x34>)
 800aa30:	2207      	movs	r2, #7
 800aa32:	601a      	str	r2, [r3, #0]
}
 800aa34:	bf00      	nop
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	e000e010 	.word	0xe000e010
 800aa44:	e000e018 	.word	0xe000e018
 800aa48:	2000000c 	.word	0x2000000c
 800aa4c:	10624dd3 	.word	0x10624dd3
 800aa50:	e000e014 	.word	0xe000e014

0800aa54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa64 <vPortEnableVFP+0x10>
 800aa58:	6801      	ldr	r1, [r0, #0]
 800aa5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aa5e:	6001      	str	r1, [r0, #0]
 800aa60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa62:	bf00      	nop
 800aa64:	e000ed88 	.word	0xe000ed88

0800aa68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa6e:	f3ef 8305 	mrs	r3, IPSR
 800aa72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2b0f      	cmp	r3, #15
 800aa78:	d914      	bls.n	800aaa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa7a:	4a17      	ldr	r2, [pc, #92]	; (800aad8 <vPortValidateInterruptPriority+0x70>)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	4413      	add	r3, r2
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa84:	4b15      	ldr	r3, [pc, #84]	; (800aadc <vPortValidateInterruptPriority+0x74>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	7afa      	ldrb	r2, [r7, #11]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d20a      	bcs.n	800aaa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	607b      	str	r3, [r7, #4]
}
 800aaa0:	bf00      	nop
 800aaa2:	e7fe      	b.n	800aaa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aaa4:	4b0e      	ldr	r3, [pc, #56]	; (800aae0 <vPortValidateInterruptPriority+0x78>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aaac:	4b0d      	ldr	r3, [pc, #52]	; (800aae4 <vPortValidateInterruptPriority+0x7c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d90a      	bls.n	800aaca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	603b      	str	r3, [r7, #0]
}
 800aac6:	bf00      	nop
 800aac8:	e7fe      	b.n	800aac8 <vPortValidateInterruptPriority+0x60>
	}
 800aaca:	bf00      	nop
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	e000e3f0 	.word	0xe000e3f0
 800aadc:	20004440 	.word	0x20004440
 800aae0:	e000ed0c 	.word	0xe000ed0c
 800aae4:	20004444 	.word	0x20004444

0800aae8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d10a      	bne.n	800ab12 <xQueueGenericReset+0x2a>
	__asm volatile
 800aafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	60bb      	str	r3, [r7, #8]
}
 800ab0e:	bf00      	nop
 800ab10:	e7fe      	b.n	800ab10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab12:	f7ff fec7 	bl	800a8a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab1e:	68f9      	ldr	r1, [r7, #12]
 800ab20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab22:	fb01 f303 	mul.w	r3, r1, r3
 800ab26:	441a      	add	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab42:	3b01      	subs	r3, #1
 800ab44:	68f9      	ldr	r1, [r7, #12]
 800ab46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab48:	fb01 f303 	mul.w	r3, r1, r3
 800ab4c:	441a      	add	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	22ff      	movs	r2, #255	; 0xff
 800ab56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	22ff      	movs	r2, #255	; 0xff
 800ab5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d114      	bne.n	800ab92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d01a      	beq.n	800aba6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	3310      	adds	r3, #16
 800ab74:	4618      	mov	r0, r3
 800ab76:	f001 f9bb 	bl	800bef0 <xTaskRemoveFromEventList>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d012      	beq.n	800aba6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab80:	4b0c      	ldr	r3, [pc, #48]	; (800abb4 <xQueueGenericReset+0xcc>)
 800ab82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab86:	601a      	str	r2, [r3, #0]
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	e009      	b.n	800aba6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3310      	adds	r3, #16
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7ff fca2 	bl	800a4e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	3324      	adds	r3, #36	; 0x24
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7ff fc9d 	bl	800a4e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aba6:	f7ff fead 	bl	800a904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800abaa:	2301      	movs	r3, #1
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	e000ed04 	.word	0xe000ed04

0800abb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b08e      	sub	sp, #56	; 0x38
 800abbc:	af02      	add	r7, sp, #8
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
 800abc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10a      	bne.n	800abe2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abde:	bf00      	nop
 800abe0:	e7fe      	b.n	800abe0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10a      	bne.n	800abfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800abe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abfa:	bf00      	nop
 800abfc:	e7fe      	b.n	800abfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d002      	beq.n	800ac0a <xQueueGenericCreateStatic+0x52>
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d001      	beq.n	800ac0e <xQueueGenericCreateStatic+0x56>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e000      	b.n	800ac10 <xQueueGenericCreateStatic+0x58>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10a      	bne.n	800ac2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac18:	f383 8811 	msr	BASEPRI, r3
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	623b      	str	r3, [r7, #32]
}
 800ac26:	bf00      	nop
 800ac28:	e7fe      	b.n	800ac28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d102      	bne.n	800ac36 <xQueueGenericCreateStatic+0x7e>
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <xQueueGenericCreateStatic+0x82>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e000      	b.n	800ac3c <xQueueGenericCreateStatic+0x84>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10a      	bne.n	800ac56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	61fb      	str	r3, [r7, #28]
}
 800ac52:	bf00      	nop
 800ac54:	e7fe      	b.n	800ac54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac56:	2348      	movs	r3, #72	; 0x48
 800ac58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	2b48      	cmp	r3, #72	; 0x48
 800ac5e:	d00a      	beq.n	800ac76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	61bb      	str	r3, [r7, #24]
}
 800ac72:	bf00      	nop
 800ac74:	e7fe      	b.n	800ac74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00d      	beq.n	800ac9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	4613      	mov	r3, r2
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	68b9      	ldr	r1, [r7, #8]
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f000 f83f 	bl	800ad1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3730      	adds	r7, #48	; 0x30
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b08a      	sub	sp, #40	; 0x28
 800acac:	af02      	add	r7, sp, #8
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	4613      	mov	r3, r2
 800acb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10a      	bne.n	800acd2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800acbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	613b      	str	r3, [r7, #16]
}
 800acce:	bf00      	nop
 800acd0:	e7fe      	b.n	800acd0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	fb02 f303 	mul.w	r3, r2, r3
 800acda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	3348      	adds	r3, #72	; 0x48
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7ff fa13 	bl	800a10c <pvPortMalloc>
 800ace6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d011      	beq.n	800ad12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	3348      	adds	r3, #72	; 0x48
 800acf6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad00:	79fa      	ldrb	r2, [r7, #7]
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	4613      	mov	r3, r2
 800ad08:	697a      	ldr	r2, [r7, #20]
 800ad0a:	68b9      	ldr	r1, [r7, #8]
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f000 f805 	bl	800ad1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad12:	69bb      	ldr	r3, [r7, #24]
	}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3720      	adds	r7, #32
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	607a      	str	r2, [r7, #4]
 800ad28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d103      	bne.n	800ad38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	69ba      	ldr	r2, [r7, #24]
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	e002      	b.n	800ad3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	69b8      	ldr	r0, [r7, #24]
 800ad4e:	f7ff fecb 	bl	800aae8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad52:	bf00      	nop
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
	...

0800ad5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b08e      	sub	sp, #56	; 0x38
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
 800ad68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10a      	bne.n	800ad8e <xQueueGenericSend+0x32>
	__asm volatile
 800ad78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad8a:	bf00      	nop
 800ad8c:	e7fe      	b.n	800ad8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d103      	bne.n	800ad9c <xQueueGenericSend+0x40>
 800ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d101      	bne.n	800ada0 <xQueueGenericSend+0x44>
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e000      	b.n	800ada2 <xQueueGenericSend+0x46>
 800ada0:	2300      	movs	r3, #0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10a      	bne.n	800adbc <xQueueGenericSend+0x60>
	__asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adb8:	bf00      	nop
 800adba:	e7fe      	b.n	800adba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d103      	bne.n	800adca <xQueueGenericSend+0x6e>
 800adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d101      	bne.n	800adce <xQueueGenericSend+0x72>
 800adca:	2301      	movs	r3, #1
 800adcc:	e000      	b.n	800add0 <xQueueGenericSend+0x74>
 800adce:	2300      	movs	r3, #0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10a      	bne.n	800adea <xQueueGenericSend+0x8e>
	__asm volatile
 800add4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	623b      	str	r3, [r7, #32]
}
 800ade6:	bf00      	nop
 800ade8:	e7fe      	b.n	800ade8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adea:	f001 fa41 	bl	800c270 <xTaskGetSchedulerState>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d102      	bne.n	800adfa <xQueueGenericSend+0x9e>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <xQueueGenericSend+0xa2>
 800adfa:	2301      	movs	r3, #1
 800adfc:	e000      	b.n	800ae00 <xQueueGenericSend+0xa4>
 800adfe:	2300      	movs	r3, #0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10a      	bne.n	800ae1a <xQueueGenericSend+0xbe>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	61fb      	str	r3, [r7, #28]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae1a:	f7ff fd43 	bl	800a8a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d302      	bcc.n	800ae30 <xQueueGenericSend+0xd4>
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d129      	bne.n	800ae84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	68b9      	ldr	r1, [r7, #8]
 800ae34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae36:	f000 fa8b 	bl	800b350 <prvCopyDataToQueue>
 800ae3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d010      	beq.n	800ae66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae46:	3324      	adds	r3, #36	; 0x24
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f001 f851 	bl	800bef0 <xTaskRemoveFromEventList>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d013      	beq.n	800ae7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae54:	4b3f      	ldr	r3, [pc, #252]	; (800af54 <xQueueGenericSend+0x1f8>)
 800ae56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae5a:	601a      	str	r2, [r3, #0]
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	f3bf 8f6f 	isb	sy
 800ae64:	e00a      	b.n	800ae7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d007      	beq.n	800ae7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae6c:	4b39      	ldr	r3, [pc, #228]	; (800af54 <xQueueGenericSend+0x1f8>)
 800ae6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	f3bf 8f4f 	dsb	sy
 800ae78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae7c:	f7ff fd42 	bl	800a904 <vPortExitCritical>
				return pdPASS;
 800ae80:	2301      	movs	r3, #1
 800ae82:	e063      	b.n	800af4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d103      	bne.n	800ae92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae8a:	f7ff fd3b 	bl	800a904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	e05c      	b.n	800af4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d106      	bne.n	800aea6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae98:	f107 0314 	add.w	r3, r7, #20
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f001 f889 	bl	800bfb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aea2:	2301      	movs	r3, #1
 800aea4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aea6:	f7ff fd2d 	bl	800a904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aeaa:	f000 fe39 	bl	800bb20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aeae:	f7ff fcf9 	bl	800a8a4 <vPortEnterCritical>
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeb8:	b25b      	sxtb	r3, r3
 800aeba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aebe:	d103      	bne.n	800aec8 <xQueueGenericSend+0x16c>
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aece:	b25b      	sxtb	r3, r3
 800aed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed4:	d103      	bne.n	800aede <xQueueGenericSend+0x182>
 800aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aede:	f7ff fd11 	bl	800a904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aee2:	1d3a      	adds	r2, r7, #4
 800aee4:	f107 0314 	add.w	r3, r7, #20
 800aee8:	4611      	mov	r1, r2
 800aeea:	4618      	mov	r0, r3
 800aeec:	f001 f878 	bl	800bfe0 <xTaskCheckForTimeOut>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d124      	bne.n	800af40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aef8:	f000 fb22 	bl	800b540 <prvIsQueueFull>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d018      	beq.n	800af34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af04:	3310      	adds	r3, #16
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	4611      	mov	r1, r2
 800af0a:	4618      	mov	r0, r3
 800af0c:	f000 ffcc 	bl	800bea8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af12:	f000 faad 	bl	800b470 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af16:	f000 fe11 	bl	800bb3c <xTaskResumeAll>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f47f af7c 	bne.w	800ae1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af22:	4b0c      	ldr	r3, [pc, #48]	; (800af54 <xQueueGenericSend+0x1f8>)
 800af24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	f3bf 8f6f 	isb	sy
 800af32:	e772      	b.n	800ae1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af36:	f000 fa9b 	bl	800b470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af3a:	f000 fdff 	bl	800bb3c <xTaskResumeAll>
 800af3e:	e76c      	b.n	800ae1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af42:	f000 fa95 	bl	800b470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af46:	f000 fdf9 	bl	800bb3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3738      	adds	r7, #56	; 0x38
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	e000ed04 	.word	0xe000ed04

0800af58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b090      	sub	sp, #64	; 0x40
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
 800af64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800af6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10a      	bne.n	800af86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af82:	bf00      	nop
 800af84:	e7fe      	b.n	800af84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d103      	bne.n	800af94 <xQueueGenericSendFromISR+0x3c>
 800af8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af90:	2b00      	cmp	r3, #0
 800af92:	d101      	bne.n	800af98 <xQueueGenericSendFromISR+0x40>
 800af94:	2301      	movs	r3, #1
 800af96:	e000      	b.n	800af9a <xQueueGenericSendFromISR+0x42>
 800af98:	2300      	movs	r3, #0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d10a      	bne.n	800afb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa2:	f383 8811 	msr	BASEPRI, r3
 800afa6:	f3bf 8f6f 	isb	sy
 800afaa:	f3bf 8f4f 	dsb	sy
 800afae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afb0:	bf00      	nop
 800afb2:	e7fe      	b.n	800afb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d103      	bne.n	800afc2 <xQueueGenericSendFromISR+0x6a>
 800afba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d101      	bne.n	800afc6 <xQueueGenericSendFromISR+0x6e>
 800afc2:	2301      	movs	r3, #1
 800afc4:	e000      	b.n	800afc8 <xQueueGenericSendFromISR+0x70>
 800afc6:	2300      	movs	r3, #0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10a      	bne.n	800afe2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	623b      	str	r3, [r7, #32]
}
 800afde:	bf00      	nop
 800afe0:	e7fe      	b.n	800afe0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afe2:	f7ff fd41 	bl	800aa68 <vPortValidateInterruptPriority>
	__asm volatile
 800afe6:	f3ef 8211 	mrs	r2, BASEPRI
 800afea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afee:	f383 8811 	msr	BASEPRI, r3
 800aff2:	f3bf 8f6f 	isb	sy
 800aff6:	f3bf 8f4f 	dsb	sy
 800affa:	61fa      	str	r2, [r7, #28]
 800affc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800affe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b000:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d302      	bcc.n	800b014 <xQueueGenericSendFromISR+0xbc>
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	2b02      	cmp	r3, #2
 800b012:	d12f      	bne.n	800b074 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b01a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b022:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b024:	683a      	ldr	r2, [r7, #0]
 800b026:	68b9      	ldr	r1, [r7, #8]
 800b028:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b02a:	f000 f991 	bl	800b350 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b02e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b036:	d112      	bne.n	800b05e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d016      	beq.n	800b06e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b042:	3324      	adds	r3, #36	; 0x24
 800b044:	4618      	mov	r0, r3
 800b046:	f000 ff53 	bl	800bef0 <xTaskRemoveFromEventList>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00e      	beq.n	800b06e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00b      	beq.n	800b06e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2201      	movs	r2, #1
 800b05a:	601a      	str	r2, [r3, #0]
 800b05c:	e007      	b.n	800b06e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b05e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b062:	3301      	adds	r3, #1
 800b064:	b2db      	uxtb	r3, r3
 800b066:	b25a      	sxtb	r2, r3
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b06e:	2301      	movs	r3, #1
 800b070:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b072:	e001      	b.n	800b078 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b074:	2300      	movs	r3, #0
 800b076:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b07a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	f383 8811 	msr	BASEPRI, r3
}
 800b082:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b086:	4618      	mov	r0, r3
 800b088:	3740      	adds	r7, #64	; 0x40
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
	...

0800b090 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08c      	sub	sp, #48	; 0x30
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b09c:	2300      	movs	r3, #0
 800b09e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10a      	bne.n	800b0c0 <xQueueReceive+0x30>
	__asm volatile
 800b0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ae:	f383 8811 	msr	BASEPRI, r3
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	623b      	str	r3, [r7, #32]
}
 800b0bc:	bf00      	nop
 800b0be:	e7fe      	b.n	800b0be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d103      	bne.n	800b0ce <xQueueReceive+0x3e>
 800b0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d101      	bne.n	800b0d2 <xQueueReceive+0x42>
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e000      	b.n	800b0d4 <xQueueReceive+0x44>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10a      	bne.n	800b0ee <xQueueReceive+0x5e>
	__asm volatile
 800b0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0dc:	f383 8811 	msr	BASEPRI, r3
 800b0e0:	f3bf 8f6f 	isb	sy
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	61fb      	str	r3, [r7, #28]
}
 800b0ea:	bf00      	nop
 800b0ec:	e7fe      	b.n	800b0ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0ee:	f001 f8bf 	bl	800c270 <xTaskGetSchedulerState>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d102      	bne.n	800b0fe <xQueueReceive+0x6e>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d101      	bne.n	800b102 <xQueueReceive+0x72>
 800b0fe:	2301      	movs	r3, #1
 800b100:	e000      	b.n	800b104 <xQueueReceive+0x74>
 800b102:	2300      	movs	r3, #0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10a      	bne.n	800b11e <xQueueReceive+0x8e>
	__asm volatile
 800b108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	61bb      	str	r3, [r7, #24]
}
 800b11a:	bf00      	nop
 800b11c:	e7fe      	b.n	800b11c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b11e:	f7ff fbc1 	bl	800a8a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b126:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d01f      	beq.n	800b16e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b12e:	68b9      	ldr	r1, [r7, #8]
 800b130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b132:	f000 f977 	bl	800b424 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b138:	1e5a      	subs	r2, r3, #1
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00f      	beq.n	800b166 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b148:	3310      	adds	r3, #16
 800b14a:	4618      	mov	r0, r3
 800b14c:	f000 fed0 	bl	800bef0 <xTaskRemoveFromEventList>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d007      	beq.n	800b166 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b156:	4b3d      	ldr	r3, [pc, #244]	; (800b24c <xQueueReceive+0x1bc>)
 800b158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b15c:	601a      	str	r2, [r3, #0]
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b166:	f7ff fbcd 	bl	800a904 <vPortExitCritical>
				return pdPASS;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e069      	b.n	800b242 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d103      	bne.n	800b17c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b174:	f7ff fbc6 	bl	800a904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b178:	2300      	movs	r3, #0
 800b17a:	e062      	b.n	800b242 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d106      	bne.n	800b190 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b182:	f107 0310 	add.w	r3, r7, #16
 800b186:	4618      	mov	r0, r3
 800b188:	f000 ff14 	bl	800bfb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b18c:	2301      	movs	r3, #1
 800b18e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b190:	f7ff fbb8 	bl	800a904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b194:	f000 fcc4 	bl	800bb20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b198:	f7ff fb84 	bl	800a8a4 <vPortEnterCritical>
 800b19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1a2:	b25b      	sxtb	r3, r3
 800b1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a8:	d103      	bne.n	800b1b2 <xQueueReceive+0x122>
 800b1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1b8:	b25b      	sxtb	r3, r3
 800b1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1be:	d103      	bne.n	800b1c8 <xQueueReceive+0x138>
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1c8:	f7ff fb9c 	bl	800a904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1cc:	1d3a      	adds	r2, r7, #4
 800b1ce:	f107 0310 	add.w	r3, r7, #16
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f000 ff03 	bl	800bfe0 <xTaskCheckForTimeOut>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d123      	bne.n	800b228 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1e2:	f000 f997 	bl	800b514 <prvIsQueueEmpty>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d017      	beq.n	800b21c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ee:	3324      	adds	r3, #36	; 0x24
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 fe57 	bl	800bea8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1fc:	f000 f938 	bl	800b470 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b200:	f000 fc9c 	bl	800bb3c <xTaskResumeAll>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d189      	bne.n	800b11e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b20a:	4b10      	ldr	r3, [pc, #64]	; (800b24c <xQueueReceive+0x1bc>)
 800b20c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b210:	601a      	str	r2, [r3, #0]
 800b212:	f3bf 8f4f 	dsb	sy
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	e780      	b.n	800b11e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b21c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b21e:	f000 f927 	bl	800b470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b222:	f000 fc8b 	bl	800bb3c <xTaskResumeAll>
 800b226:	e77a      	b.n	800b11e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b22a:	f000 f921 	bl	800b470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b22e:	f000 fc85 	bl	800bb3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b234:	f000 f96e 	bl	800b514 <prvIsQueueEmpty>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	f43f af6f 	beq.w	800b11e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b240:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b242:	4618      	mov	r0, r3
 800b244:	3730      	adds	r7, #48	; 0x30
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	e000ed04 	.word	0xe000ed04

0800b250 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08e      	sub	sp, #56	; 0x38
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b262:	2b00      	cmp	r3, #0
 800b264:	d10a      	bne.n	800b27c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	623b      	str	r3, [r7, #32]
}
 800b278:	bf00      	nop
 800b27a:	e7fe      	b.n	800b27a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d103      	bne.n	800b28a <xQueueReceiveFromISR+0x3a>
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b286:	2b00      	cmp	r3, #0
 800b288:	d101      	bne.n	800b28e <xQueueReceiveFromISR+0x3e>
 800b28a:	2301      	movs	r3, #1
 800b28c:	e000      	b.n	800b290 <xQueueReceiveFromISR+0x40>
 800b28e:	2300      	movs	r3, #0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10a      	bne.n	800b2aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b298:	f383 8811 	msr	BASEPRI, r3
 800b29c:	f3bf 8f6f 	isb	sy
 800b2a0:	f3bf 8f4f 	dsb	sy
 800b2a4:	61fb      	str	r3, [r7, #28]
}
 800b2a6:	bf00      	nop
 800b2a8:	e7fe      	b.n	800b2a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2aa:	f7ff fbdd 	bl	800aa68 <vPortValidateInterruptPriority>
	__asm volatile
 800b2ae:	f3ef 8211 	mrs	r2, BASEPRI
 800b2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b6:	f383 8811 	msr	BASEPRI, r3
 800b2ba:	f3bf 8f6f 	isb	sy
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	61ba      	str	r2, [r7, #24]
 800b2c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b2c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d02f      	beq.n	800b336 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2e0:	68b9      	ldr	r1, [r7, #8]
 800b2e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2e4:	f000 f89e 	bl	800b424 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ea:	1e5a      	subs	r2, r3, #1
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b2f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f8:	d112      	bne.n	800b320 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d016      	beq.n	800b330 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b304:	3310      	adds	r3, #16
 800b306:	4618      	mov	r0, r3
 800b308:	f000 fdf2 	bl	800bef0 <xTaskRemoveFromEventList>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00e      	beq.n	800b330 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00b      	beq.n	800b330 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	601a      	str	r2, [r3, #0]
 800b31e:	e007      	b.n	800b330 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b324:	3301      	adds	r3, #1
 800b326:	b2db      	uxtb	r3, r3
 800b328:	b25a      	sxtb	r2, r3
 800b32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b330:	2301      	movs	r3, #1
 800b332:	637b      	str	r3, [r7, #52]	; 0x34
 800b334:	e001      	b.n	800b33a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b336:	2300      	movs	r3, #0
 800b338:	637b      	str	r3, [r7, #52]	; 0x34
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	f383 8811 	msr	BASEPRI, r3
}
 800b344:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3738      	adds	r7, #56	; 0x38
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b35c:	2300      	movs	r3, #0
 800b35e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b364:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d10d      	bne.n	800b38a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d14d      	bne.n	800b412 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 ff96 	bl	800c2ac <xTaskPriorityDisinherit>
 800b380:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	609a      	str	r2, [r3, #8]
 800b388:	e043      	b.n	800b412 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d119      	bne.n	800b3c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6858      	ldr	r0, [r3, #4]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b398:	461a      	mov	r2, r3
 800b39a:	68b9      	ldr	r1, [r7, #8]
 800b39c:	f004 f808 	bl	800f3b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a8:	441a      	add	r2, r3
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d32b      	bcc.n	800b412 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	605a      	str	r2, [r3, #4]
 800b3c2:	e026      	b.n	800b412 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	68d8      	ldr	r0, [r3, #12]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	68b9      	ldr	r1, [r7, #8]
 800b3d0:	f003 ffee 	bl	800f3b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	68da      	ldr	r2, [r3, #12]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3dc:	425b      	negs	r3, r3
 800b3de:	441a      	add	r2, r3
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	68da      	ldr	r2, [r3, #12]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d207      	bcs.n	800b400 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	689a      	ldr	r2, [r3, #8]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f8:	425b      	negs	r3, r3
 800b3fa:	441a      	add	r2, r3
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b02      	cmp	r3, #2
 800b404:	d105      	bne.n	800b412 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	3b01      	subs	r3, #1
 800b410:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	1c5a      	adds	r2, r3, #1
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b41a:	697b      	ldr	r3, [r7, #20]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3718      	adds	r7, #24
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b432:	2b00      	cmp	r3, #0
 800b434:	d018      	beq.n	800b468 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	68da      	ldr	r2, [r3, #12]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b43e:	441a      	add	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	68da      	ldr	r2, [r3, #12]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d303      	bcc.n	800b458 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68d9      	ldr	r1, [r3, #12]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b460:	461a      	mov	r2, r3
 800b462:	6838      	ldr	r0, [r7, #0]
 800b464:	f003 ffa4 	bl	800f3b0 <memcpy>
	}
}
 800b468:	bf00      	nop
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b478:	f7ff fa14 	bl	800a8a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b482:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b484:	e011      	b.n	800b4aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d012      	beq.n	800b4b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	3324      	adds	r3, #36	; 0x24
 800b492:	4618      	mov	r0, r3
 800b494:	f000 fd2c 	bl	800bef0 <xTaskRemoveFromEventList>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d001      	beq.n	800b4a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b49e:	f000 fe01 	bl	800c0a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b4aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	dce9      	bgt.n	800b486 <prvUnlockQueue+0x16>
 800b4b2:	e000      	b.n	800b4b6 <prvUnlockQueue+0x46>
					break;
 800b4b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	22ff      	movs	r2, #255	; 0xff
 800b4ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b4be:	f7ff fa21 	bl	800a904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b4c2:	f7ff f9ef 	bl	800a8a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4ce:	e011      	b.n	800b4f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d012      	beq.n	800b4fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	3310      	adds	r3, #16
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f000 fd07 	bl	800bef0 <xTaskRemoveFromEventList>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d001      	beq.n	800b4ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b4e8:	f000 fddc 	bl	800c0a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b4ec:	7bbb      	ldrb	r3, [r7, #14]
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	dce9      	bgt.n	800b4d0 <prvUnlockQueue+0x60>
 800b4fc:	e000      	b.n	800b500 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b4fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	22ff      	movs	r2, #255	; 0xff
 800b504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b508:	f7ff f9fc 	bl	800a904 <vPortExitCritical>
}
 800b50c:	bf00      	nop
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b51c:	f7ff f9c2 	bl	800a8a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b524:	2b00      	cmp	r3, #0
 800b526:	d102      	bne.n	800b52e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b528:	2301      	movs	r3, #1
 800b52a:	60fb      	str	r3, [r7, #12]
 800b52c:	e001      	b.n	800b532 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b52e:	2300      	movs	r3, #0
 800b530:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b532:	f7ff f9e7 	bl	800a904 <vPortExitCritical>

	return xReturn;
 800b536:	68fb      	ldr	r3, [r7, #12]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b548:	f7ff f9ac 	bl	800a8a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b554:	429a      	cmp	r2, r3
 800b556:	d102      	bne.n	800b55e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b558:	2301      	movs	r3, #1
 800b55a:	60fb      	str	r3, [r7, #12]
 800b55c:	e001      	b.n	800b562 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b55e:	2300      	movs	r3, #0
 800b560:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b562:	f7ff f9cf 	bl	800a904 <vPortExitCritical>

	return xReturn;
 800b566:	68fb      	ldr	r3, [r7, #12]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b570:	b580      	push	{r7, lr}
 800b572:	b08e      	sub	sp, #56	; 0x38
 800b574:	af04      	add	r7, sp, #16
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
 800b57c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10a      	bne.n	800b59a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b588:	f383 8811 	msr	BASEPRI, r3
 800b58c:	f3bf 8f6f 	isb	sy
 800b590:	f3bf 8f4f 	dsb	sy
 800b594:	623b      	str	r3, [r7, #32]
}
 800b596:	bf00      	nop
 800b598:	e7fe      	b.n	800b598 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d10a      	bne.n	800b5b6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	61fb      	str	r3, [r7, #28]
}
 800b5b2:	bf00      	nop
 800b5b4:	e7fe      	b.n	800b5b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b5b6:	23a0      	movs	r3, #160	; 0xa0
 800b5b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	2ba0      	cmp	r3, #160	; 0xa0
 800b5be:	d00a      	beq.n	800b5d6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	61bb      	str	r3, [r7, #24]
}
 800b5d2:	bf00      	nop
 800b5d4:	e7fe      	b.n	800b5d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b5d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d01e      	beq.n	800b61c <xTaskCreateStatic+0xac>
 800b5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d01b      	beq.n	800b61c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	9303      	str	r3, [sp, #12]
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	9302      	str	r3, [sp, #8]
 800b5fe:	f107 0314 	add.w	r3, r7, #20
 800b602:	9301      	str	r3, [sp, #4]
 800b604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	68b9      	ldr	r1, [r7, #8]
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f000 f850 	bl	800b6b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b614:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b616:	f000 f8eb 	bl	800b7f0 <prvAddNewTaskToReadyList>
 800b61a:	e001      	b.n	800b620 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b61c:	2300      	movs	r3, #0
 800b61e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b620:	697b      	ldr	r3, [r7, #20]
	}
 800b622:	4618      	mov	r0, r3
 800b624:	3728      	adds	r7, #40	; 0x28
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b08c      	sub	sp, #48	; 0x30
 800b62e:	af04      	add	r7, sp, #16
 800b630:	60f8      	str	r0, [r7, #12]
 800b632:	60b9      	str	r1, [r7, #8]
 800b634:	603b      	str	r3, [r7, #0]
 800b636:	4613      	mov	r3, r2
 800b638:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b63a:	88fb      	ldrh	r3, [r7, #6]
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fe fd64 	bl	800a10c <pvPortMalloc>
 800b644:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00e      	beq.n	800b66a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b64c:	20a0      	movs	r0, #160	; 0xa0
 800b64e:	f7fe fd5d 	bl	800a10c <pvPortMalloc>
 800b652:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d003      	beq.n	800b662 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	697a      	ldr	r2, [r7, #20]
 800b65e:	631a      	str	r2, [r3, #48]	; 0x30
 800b660:	e005      	b.n	800b66e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b662:	6978      	ldr	r0, [r7, #20]
 800b664:	f7fe fe1e 	bl	800a2a4 <vPortFree>
 800b668:	e001      	b.n	800b66e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b66a:	2300      	movs	r3, #0
 800b66c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d017      	beq.n	800b6a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	2200      	movs	r2, #0
 800b678:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b67c:	88fa      	ldrh	r2, [r7, #6]
 800b67e:	2300      	movs	r3, #0
 800b680:	9303      	str	r3, [sp, #12]
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	9302      	str	r3, [sp, #8]
 800b686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b688:	9301      	str	r3, [sp, #4]
 800b68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	68b9      	ldr	r1, [r7, #8]
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f000 f80e 	bl	800b6b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b698:	69f8      	ldr	r0, [r7, #28]
 800b69a:	f000 f8a9 	bl	800b7f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	61bb      	str	r3, [r7, #24]
 800b6a2:	e002      	b.n	800b6aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b6aa:	69bb      	ldr	r3, [r7, #24]
	}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3720      	adds	r7, #32
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b088      	sub	sp, #32
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	f023 0307 	bic.w	r3, r3, #7
 800b6da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	f003 0307 	and.w	r3, r3, #7
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00a      	beq.n	800b6fc <prvInitialiseNewTask+0x48>
	__asm volatile
 800b6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ea:	f383 8811 	msr	BASEPRI, r3
 800b6ee:	f3bf 8f6f 	isb	sy
 800b6f2:	f3bf 8f4f 	dsb	sy
 800b6f6:	617b      	str	r3, [r7, #20]
}
 800b6f8:	bf00      	nop
 800b6fa:	e7fe      	b.n	800b6fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d01f      	beq.n	800b742 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b702:	2300      	movs	r3, #0
 800b704:	61fb      	str	r3, [r7, #28]
 800b706:	e012      	b.n	800b72e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	4413      	add	r3, r2
 800b70e:	7819      	ldrb	r1, [r3, #0]
 800b710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	4413      	add	r3, r2
 800b716:	3334      	adds	r3, #52	; 0x34
 800b718:	460a      	mov	r2, r1
 800b71a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	4413      	add	r3, r2
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d006      	beq.n	800b736 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	3301      	adds	r3, #1
 800b72c:	61fb      	str	r3, [r7, #28]
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	2b0f      	cmp	r3, #15
 800b732:	d9e9      	bls.n	800b708 <prvInitialiseNewTask+0x54>
 800b734:	e000      	b.n	800b738 <prvInitialiseNewTask+0x84>
			{
				break;
 800b736:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73a:	2200      	movs	r2, #0
 800b73c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b740:	e003      	b.n	800b74a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	2200      	movs	r2, #0
 800b746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74c:	2b06      	cmp	r3, #6
 800b74e:	d901      	bls.n	800b754 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b750:	2306      	movs	r3, #6
 800b752:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b758:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b75e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b762:	2200      	movs	r2, #0
 800b764:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b768:	3304      	adds	r3, #4
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fe fed8 	bl	800a520 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b772:	3318      	adds	r3, #24
 800b774:	4618      	mov	r0, r3
 800b776:	f7fe fed3 	bl	800a520 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b77e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b782:	f1c3 0207 	rsb	r2, r3, #7
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b792:	2200      	movs	r2, #0
 800b794:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79a:	2200      	movs	r2, #0
 800b79c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a2:	334c      	adds	r3, #76	; 0x4c
 800b7a4:	224c      	movs	r2, #76	; 0x4c
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f003 fd77 	bl	800f29c <memset>
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b0:	4a0c      	ldr	r2, [pc, #48]	; (800b7e4 <prvInitialiseNewTask+0x130>)
 800b7b2:	651a      	str	r2, [r3, #80]	; 0x50
 800b7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b6:	4a0c      	ldr	r2, [pc, #48]	; (800b7e8 <prvInitialiseNewTask+0x134>)
 800b7b8:	655a      	str	r2, [r3, #84]	; 0x54
 800b7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7bc:	4a0b      	ldr	r2, [pc, #44]	; (800b7ec <prvInitialiseNewTask+0x138>)
 800b7be:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7c0:	683a      	ldr	r2, [r7, #0]
 800b7c2:	68f9      	ldr	r1, [r7, #12]
 800b7c4:	69b8      	ldr	r0, [r7, #24]
 800b7c6:	f7fe ff3f 	bl	800a648 <pxPortInitialiseStack>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d002      	beq.n	800b7dc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7dc:	bf00      	nop
 800b7de:	3720      	adds	r7, #32
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	20006158 	.word	0x20006158
 800b7e8:	200061c0 	.word	0x200061c0
 800b7ec:	20006228 	.word	0x20006228

0800b7f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7f8:	f7ff f854 	bl	800a8a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7fc:	4b2a      	ldr	r3, [pc, #168]	; (800b8a8 <prvAddNewTaskToReadyList+0xb8>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	3301      	adds	r3, #1
 800b802:	4a29      	ldr	r2, [pc, #164]	; (800b8a8 <prvAddNewTaskToReadyList+0xb8>)
 800b804:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b806:	4b29      	ldr	r3, [pc, #164]	; (800b8ac <prvAddNewTaskToReadyList+0xbc>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d109      	bne.n	800b822 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b80e:	4a27      	ldr	r2, [pc, #156]	; (800b8ac <prvAddNewTaskToReadyList+0xbc>)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b814:	4b24      	ldr	r3, [pc, #144]	; (800b8a8 <prvAddNewTaskToReadyList+0xb8>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d110      	bne.n	800b83e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b81c:	f000 fc66 	bl	800c0ec <prvInitialiseTaskLists>
 800b820:	e00d      	b.n	800b83e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b822:	4b23      	ldr	r3, [pc, #140]	; (800b8b0 <prvAddNewTaskToReadyList+0xc0>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d109      	bne.n	800b83e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b82a:	4b20      	ldr	r3, [pc, #128]	; (800b8ac <prvAddNewTaskToReadyList+0xbc>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b834:	429a      	cmp	r2, r3
 800b836:	d802      	bhi.n	800b83e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b838:	4a1c      	ldr	r2, [pc, #112]	; (800b8ac <prvAddNewTaskToReadyList+0xbc>)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b83e:	4b1d      	ldr	r3, [pc, #116]	; (800b8b4 <prvAddNewTaskToReadyList+0xc4>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	3301      	adds	r3, #1
 800b844:	4a1b      	ldr	r2, [pc, #108]	; (800b8b4 <prvAddNewTaskToReadyList+0xc4>)
 800b846:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	2201      	movs	r2, #1
 800b84e:	409a      	lsls	r2, r3
 800b850:	4b19      	ldr	r3, [pc, #100]	; (800b8b8 <prvAddNewTaskToReadyList+0xc8>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4313      	orrs	r3, r2
 800b856:	4a18      	ldr	r2, [pc, #96]	; (800b8b8 <prvAddNewTaskToReadyList+0xc8>)
 800b858:	6013      	str	r3, [r2, #0]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85e:	4613      	mov	r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	4413      	add	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4a15      	ldr	r2, [pc, #84]	; (800b8bc <prvAddNewTaskToReadyList+0xcc>)
 800b868:	441a      	add	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	3304      	adds	r3, #4
 800b86e:	4619      	mov	r1, r3
 800b870:	4610      	mov	r0, r2
 800b872:	f7fe fe62 	bl	800a53a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b876:	f7ff f845 	bl	800a904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b87a:	4b0d      	ldr	r3, [pc, #52]	; (800b8b0 <prvAddNewTaskToReadyList+0xc0>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00e      	beq.n	800b8a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b882:	4b0a      	ldr	r3, [pc, #40]	; (800b8ac <prvAddNewTaskToReadyList+0xbc>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88c:	429a      	cmp	r2, r3
 800b88e:	d207      	bcs.n	800b8a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b890:	4b0b      	ldr	r3, [pc, #44]	; (800b8c0 <prvAddNewTaskToReadyList+0xd0>)
 800b892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b896:	601a      	str	r2, [r3, #0]
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	20004548 	.word	0x20004548
 800b8ac:	20004448 	.word	0x20004448
 800b8b0:	20004554 	.word	0x20004554
 800b8b4:	20004564 	.word	0x20004564
 800b8b8:	20004550 	.word	0x20004550
 800b8bc:	2000444c 	.word	0x2000444c
 800b8c0:	e000ed04 	.word	0xe000ed04

0800b8c4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b8cc:	f7fe ffea 	bl	800a8a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d102      	bne.n	800b8dc <vTaskDelete+0x18>
 800b8d6:	4b39      	ldr	r3, [pc, #228]	; (800b9bc <vTaskDelete+0xf8>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	e000      	b.n	800b8de <vTaskDelete+0x1a>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fe fe85 	bl	800a5f4 <uxListRemove>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d115      	bne.n	800b91c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f4:	4932      	ldr	r1, [pc, #200]	; (800b9c0 <vTaskDelete+0xfc>)
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4413      	add	r3, r2
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	440b      	add	r3, r1
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10a      	bne.n	800b91c <vTaskDelete+0x58>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90a:	2201      	movs	r2, #1
 800b90c:	fa02 f303 	lsl.w	r3, r2, r3
 800b910:	43da      	mvns	r2, r3
 800b912:	4b2c      	ldr	r3, [pc, #176]	; (800b9c4 <vTaskDelete+0x100>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4013      	ands	r3, r2
 800b918:	4a2a      	ldr	r2, [pc, #168]	; (800b9c4 <vTaskDelete+0x100>)
 800b91a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b920:	2b00      	cmp	r3, #0
 800b922:	d004      	beq.n	800b92e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	3318      	adds	r3, #24
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fe fe63 	bl	800a5f4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b92e:	4b26      	ldr	r3, [pc, #152]	; (800b9c8 <vTaskDelete+0x104>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	3301      	adds	r3, #1
 800b934:	4a24      	ldr	r2, [pc, #144]	; (800b9c8 <vTaskDelete+0x104>)
 800b936:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b938:	4b20      	ldr	r3, [pc, #128]	; (800b9bc <vTaskDelete+0xf8>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d10b      	bne.n	800b95a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	3304      	adds	r3, #4
 800b946:	4619      	mov	r1, r3
 800b948:	4820      	ldr	r0, [pc, #128]	; (800b9cc <vTaskDelete+0x108>)
 800b94a:	f7fe fdf6 	bl	800a53a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b94e:	4b20      	ldr	r3, [pc, #128]	; (800b9d0 <vTaskDelete+0x10c>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	3301      	adds	r3, #1
 800b954:	4a1e      	ldr	r2, [pc, #120]	; (800b9d0 <vTaskDelete+0x10c>)
 800b956:	6013      	str	r3, [r2, #0]
 800b958:	e009      	b.n	800b96e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b95a:	4b1e      	ldr	r3, [pc, #120]	; (800b9d4 <vTaskDelete+0x110>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	3b01      	subs	r3, #1
 800b960:	4a1c      	ldr	r2, [pc, #112]	; (800b9d4 <vTaskDelete+0x110>)
 800b962:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f000 fc2f 	bl	800c1c8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b96a:	f000 fc61 	bl	800c230 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b96e:	f7fe ffc9 	bl	800a904 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b972:	4b19      	ldr	r3, [pc, #100]	; (800b9d8 <vTaskDelete+0x114>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d01b      	beq.n	800b9b2 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800b97a:	4b10      	ldr	r3, [pc, #64]	; (800b9bc <vTaskDelete+0xf8>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	429a      	cmp	r2, r3
 800b982:	d116      	bne.n	800b9b2 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b984:	4b15      	ldr	r3, [pc, #84]	; (800b9dc <vTaskDelete+0x118>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00a      	beq.n	800b9a2 <vTaskDelete+0xde>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	60bb      	str	r3, [r7, #8]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b9a2:	4b0f      	ldr	r3, [pc, #60]	; (800b9e0 <vTaskDelete+0x11c>)
 800b9a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9a8:	601a      	str	r2, [r3, #0]
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b9b2:	bf00      	nop
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	20004448 	.word	0x20004448
 800b9c0:	2000444c 	.word	0x2000444c
 800b9c4:	20004550 	.word	0x20004550
 800b9c8:	20004564 	.word	0x20004564
 800b9cc:	2000451c 	.word	0x2000451c
 800b9d0:	20004530 	.word	0x20004530
 800b9d4:	20004548 	.word	0x20004548
 800b9d8:	20004554 	.word	0x20004554
 800b9dc:	20004570 	.word	0x20004570
 800b9e0:	e000ed04 	.word	0xe000ed04

0800b9e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d017      	beq.n	800ba26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b9f6:	4b13      	ldr	r3, [pc, #76]	; (800ba44 <vTaskDelay+0x60>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00a      	beq.n	800ba14 <vTaskDelay+0x30>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	60bb      	str	r3, [r7, #8]
}
 800ba10:	bf00      	nop
 800ba12:	e7fe      	b.n	800ba12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba14:	f000 f884 	bl	800bb20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba18:	2100      	movs	r1, #0
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fece 	bl	800c7bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba20:	f000 f88c 	bl	800bb3c <xTaskResumeAll>
 800ba24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d107      	bne.n	800ba3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ba2c:	4b06      	ldr	r3, [pc, #24]	; (800ba48 <vTaskDelay+0x64>)
 800ba2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba32:	601a      	str	r2, [r3, #0]
 800ba34:	f3bf 8f4f 	dsb	sy
 800ba38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba3c:	bf00      	nop
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	20004570 	.word	0x20004570
 800ba48:	e000ed04 	.word	0xe000ed04

0800ba4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b08a      	sub	sp, #40	; 0x28
 800ba50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ba52:	2300      	movs	r3, #0
 800ba54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ba56:	2300      	movs	r3, #0
 800ba58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ba5a:	463a      	mov	r2, r7
 800ba5c:	1d39      	adds	r1, r7, #4
 800ba5e:	f107 0308 	add.w	r3, r7, #8
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7f5 f8d0 	bl	8000c08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ba68:	6839      	ldr	r1, [r7, #0]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	68ba      	ldr	r2, [r7, #8]
 800ba6e:	9202      	str	r2, [sp, #8]
 800ba70:	9301      	str	r3, [sp, #4]
 800ba72:	2300      	movs	r3, #0
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	2300      	movs	r3, #0
 800ba78:	460a      	mov	r2, r1
 800ba7a:	4921      	ldr	r1, [pc, #132]	; (800bb00 <vTaskStartScheduler+0xb4>)
 800ba7c:	4821      	ldr	r0, [pc, #132]	; (800bb04 <vTaskStartScheduler+0xb8>)
 800ba7e:	f7ff fd77 	bl	800b570 <xTaskCreateStatic>
 800ba82:	4603      	mov	r3, r0
 800ba84:	4a20      	ldr	r2, [pc, #128]	; (800bb08 <vTaskStartScheduler+0xbc>)
 800ba86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ba88:	4b1f      	ldr	r3, [pc, #124]	; (800bb08 <vTaskStartScheduler+0xbc>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d002      	beq.n	800ba96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ba90:	2301      	movs	r3, #1
 800ba92:	617b      	str	r3, [r7, #20]
 800ba94:	e001      	b.n	800ba9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ba96:	2300      	movs	r3, #0
 800ba98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d11b      	bne.n	800bad8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	613b      	str	r3, [r7, #16]
}
 800bab2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bab4:	4b15      	ldr	r3, [pc, #84]	; (800bb0c <vTaskStartScheduler+0xc0>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	334c      	adds	r3, #76	; 0x4c
 800baba:	4a15      	ldr	r2, [pc, #84]	; (800bb10 <vTaskStartScheduler+0xc4>)
 800babc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800babe:	4b15      	ldr	r3, [pc, #84]	; (800bb14 <vTaskStartScheduler+0xc8>)
 800bac0:	f04f 32ff 	mov.w	r2, #4294967295
 800bac4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bac6:	4b14      	ldr	r3, [pc, #80]	; (800bb18 <vTaskStartScheduler+0xcc>)
 800bac8:	2201      	movs	r2, #1
 800baca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bacc:	4b13      	ldr	r3, [pc, #76]	; (800bb1c <vTaskStartScheduler+0xd0>)
 800bace:	2200      	movs	r2, #0
 800bad0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bad2:	f7fe fe45 	bl	800a760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bad6:	e00e      	b.n	800baf6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bade:	d10a      	bne.n	800baf6 <vTaskStartScheduler+0xaa>
	__asm volatile
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	60fb      	str	r3, [r7, #12]
}
 800baf2:	bf00      	nop
 800baf4:	e7fe      	b.n	800baf4 <vTaskStartScheduler+0xa8>
}
 800baf6:	bf00      	nop
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	0800fd70 	.word	0x0800fd70
 800bb04:	0800c0bd 	.word	0x0800c0bd
 800bb08:	2000456c 	.word	0x2000456c
 800bb0c:	20004448 	.word	0x20004448
 800bb10:	200001d4 	.word	0x200001d4
 800bb14:	20004568 	.word	0x20004568
 800bb18:	20004554 	.word	0x20004554
 800bb1c:	2000454c 	.word	0x2000454c

0800bb20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bb20:	b480      	push	{r7}
 800bb22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bb24:	4b04      	ldr	r3, [pc, #16]	; (800bb38 <vTaskSuspendAll+0x18>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	4a03      	ldr	r2, [pc, #12]	; (800bb38 <vTaskSuspendAll+0x18>)
 800bb2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bb2e:	bf00      	nop
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr
 800bb38:	20004570 	.word	0x20004570

0800bb3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bb42:	2300      	movs	r3, #0
 800bb44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bb46:	2300      	movs	r3, #0
 800bb48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bb4a:	4b41      	ldr	r3, [pc, #260]	; (800bc50 <xTaskResumeAll+0x114>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10a      	bne.n	800bb68 <xTaskResumeAll+0x2c>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	603b      	str	r3, [r7, #0]
}
 800bb64:	bf00      	nop
 800bb66:	e7fe      	b.n	800bb66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb68:	f7fe fe9c 	bl	800a8a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb6c:	4b38      	ldr	r3, [pc, #224]	; (800bc50 <xTaskResumeAll+0x114>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	3b01      	subs	r3, #1
 800bb72:	4a37      	ldr	r2, [pc, #220]	; (800bc50 <xTaskResumeAll+0x114>)
 800bb74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb76:	4b36      	ldr	r3, [pc, #216]	; (800bc50 <xTaskResumeAll+0x114>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d161      	bne.n	800bc42 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb7e:	4b35      	ldr	r3, [pc, #212]	; (800bc54 <xTaskResumeAll+0x118>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d05d      	beq.n	800bc42 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb86:	e02e      	b.n	800bbe6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb88:	4b33      	ldr	r3, [pc, #204]	; (800bc58 <xTaskResumeAll+0x11c>)
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	3318      	adds	r3, #24
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fe fd2d 	bl	800a5f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	3304      	adds	r3, #4
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fe fd28 	bl	800a5f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba8:	2201      	movs	r2, #1
 800bbaa:	409a      	lsls	r2, r3
 800bbac:	4b2b      	ldr	r3, [pc, #172]	; (800bc5c <xTaskResumeAll+0x120>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	4a2a      	ldr	r2, [pc, #168]	; (800bc5c <xTaskResumeAll+0x120>)
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbba:	4613      	mov	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4a27      	ldr	r2, [pc, #156]	; (800bc60 <xTaskResumeAll+0x124>)
 800bbc4:	441a      	add	r2, r3
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	3304      	adds	r3, #4
 800bbca:	4619      	mov	r1, r3
 800bbcc:	4610      	mov	r0, r2
 800bbce:	f7fe fcb4 	bl	800a53a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd6:	4b23      	ldr	r3, [pc, #140]	; (800bc64 <xTaskResumeAll+0x128>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d302      	bcc.n	800bbe6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bbe0:	4b21      	ldr	r3, [pc, #132]	; (800bc68 <xTaskResumeAll+0x12c>)
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbe6:	4b1c      	ldr	r3, [pc, #112]	; (800bc58 <xTaskResumeAll+0x11c>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1cc      	bne.n	800bb88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d001      	beq.n	800bbf8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bbf4:	f000 fb1c 	bl	800c230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bbf8:	4b1c      	ldr	r3, [pc, #112]	; (800bc6c <xTaskResumeAll+0x130>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d010      	beq.n	800bc26 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bc04:	f000 f836 	bl	800bc74 <xTaskIncrementTick>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d002      	beq.n	800bc14 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bc0e:	4b16      	ldr	r3, [pc, #88]	; (800bc68 <xTaskResumeAll+0x12c>)
 800bc10:	2201      	movs	r2, #1
 800bc12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1f1      	bne.n	800bc04 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bc20:	4b12      	ldr	r3, [pc, #72]	; (800bc6c <xTaskResumeAll+0x130>)
 800bc22:	2200      	movs	r2, #0
 800bc24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bc26:	4b10      	ldr	r3, [pc, #64]	; (800bc68 <xTaskResumeAll+0x12c>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d009      	beq.n	800bc42 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bc32:	4b0f      	ldr	r3, [pc, #60]	; (800bc70 <xTaskResumeAll+0x134>)
 800bc34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc38:	601a      	str	r2, [r3, #0]
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc42:	f7fe fe5f 	bl	800a904 <vPortExitCritical>

	return xAlreadyYielded;
 800bc46:	68bb      	ldr	r3, [r7, #8]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	20004570 	.word	0x20004570
 800bc54:	20004548 	.word	0x20004548
 800bc58:	20004508 	.word	0x20004508
 800bc5c:	20004550 	.word	0x20004550
 800bc60:	2000444c 	.word	0x2000444c
 800bc64:	20004448 	.word	0x20004448
 800bc68:	2000455c 	.word	0x2000455c
 800bc6c:	20004558 	.word	0x20004558
 800bc70:	e000ed04 	.word	0xe000ed04

0800bc74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b086      	sub	sp, #24
 800bc78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc7e:	4b4e      	ldr	r3, [pc, #312]	; (800bdb8 <xTaskIncrementTick+0x144>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f040 808e 	bne.w	800bda4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc88:	4b4c      	ldr	r3, [pc, #304]	; (800bdbc <xTaskIncrementTick+0x148>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc90:	4a4a      	ldr	r2, [pc, #296]	; (800bdbc <xTaskIncrementTick+0x148>)
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d120      	bne.n	800bcde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bc9c:	4b48      	ldr	r3, [pc, #288]	; (800bdc0 <xTaskIncrementTick+0x14c>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00a      	beq.n	800bcbc <xTaskIncrementTick+0x48>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	603b      	str	r3, [r7, #0]
}
 800bcb8:	bf00      	nop
 800bcba:	e7fe      	b.n	800bcba <xTaskIncrementTick+0x46>
 800bcbc:	4b40      	ldr	r3, [pc, #256]	; (800bdc0 <xTaskIncrementTick+0x14c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	60fb      	str	r3, [r7, #12]
 800bcc2:	4b40      	ldr	r3, [pc, #256]	; (800bdc4 <xTaskIncrementTick+0x150>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a3e      	ldr	r2, [pc, #248]	; (800bdc0 <xTaskIncrementTick+0x14c>)
 800bcc8:	6013      	str	r3, [r2, #0]
 800bcca:	4a3e      	ldr	r2, [pc, #248]	; (800bdc4 <xTaskIncrementTick+0x150>)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6013      	str	r3, [r2, #0]
 800bcd0:	4b3d      	ldr	r3, [pc, #244]	; (800bdc8 <xTaskIncrementTick+0x154>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	4a3c      	ldr	r2, [pc, #240]	; (800bdc8 <xTaskIncrementTick+0x154>)
 800bcd8:	6013      	str	r3, [r2, #0]
 800bcda:	f000 faa9 	bl	800c230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bcde:	4b3b      	ldr	r3, [pc, #236]	; (800bdcc <xTaskIncrementTick+0x158>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d348      	bcc.n	800bd7a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bce8:	4b35      	ldr	r3, [pc, #212]	; (800bdc0 <xTaskIncrementTick+0x14c>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d104      	bne.n	800bcfc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcf2:	4b36      	ldr	r3, [pc, #216]	; (800bdcc <xTaskIncrementTick+0x158>)
 800bcf4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf8:	601a      	str	r2, [r3, #0]
					break;
 800bcfa:	e03e      	b.n	800bd7a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcfc:	4b30      	ldr	r3, [pc, #192]	; (800bdc0 <xTaskIncrementTick+0x14c>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bd0c:	693a      	ldr	r2, [r7, #16]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d203      	bcs.n	800bd1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd14:	4a2d      	ldr	r2, [pc, #180]	; (800bdcc <xTaskIncrementTick+0x158>)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd1a:	e02e      	b.n	800bd7a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	3304      	adds	r3, #4
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7fe fc67 	bl	800a5f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d004      	beq.n	800bd38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	3318      	adds	r3, #24
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7fe fc5e 	bl	800a5f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	409a      	lsls	r2, r3
 800bd40:	4b23      	ldr	r3, [pc, #140]	; (800bdd0 <xTaskIncrementTick+0x15c>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4313      	orrs	r3, r2
 800bd46:	4a22      	ldr	r2, [pc, #136]	; (800bdd0 <xTaskIncrementTick+0x15c>)
 800bd48:	6013      	str	r3, [r2, #0]
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4e:	4613      	mov	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4413      	add	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4a1f      	ldr	r2, [pc, #124]	; (800bdd4 <xTaskIncrementTick+0x160>)
 800bd58:	441a      	add	r2, r3
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	3304      	adds	r3, #4
 800bd5e:	4619      	mov	r1, r3
 800bd60:	4610      	mov	r0, r2
 800bd62:	f7fe fbea 	bl	800a53a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd6a:	4b1b      	ldr	r3, [pc, #108]	; (800bdd8 <xTaskIncrementTick+0x164>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d3b9      	bcc.n	800bce8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bd74:	2301      	movs	r3, #1
 800bd76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd78:	e7b6      	b.n	800bce8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd7a:	4b17      	ldr	r3, [pc, #92]	; (800bdd8 <xTaskIncrementTick+0x164>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd80:	4914      	ldr	r1, [pc, #80]	; (800bdd4 <xTaskIncrementTick+0x160>)
 800bd82:	4613      	mov	r3, r2
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	4413      	add	r3, r2
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	440b      	add	r3, r1
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d901      	bls.n	800bd96 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bd92:	2301      	movs	r3, #1
 800bd94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bd96:	4b11      	ldr	r3, [pc, #68]	; (800bddc <xTaskIncrementTick+0x168>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d007      	beq.n	800bdae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	617b      	str	r3, [r7, #20]
 800bda2:	e004      	b.n	800bdae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bda4:	4b0e      	ldr	r3, [pc, #56]	; (800bde0 <xTaskIncrementTick+0x16c>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	4a0d      	ldr	r2, [pc, #52]	; (800bde0 <xTaskIncrementTick+0x16c>)
 800bdac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bdae:	697b      	ldr	r3, [r7, #20]
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3718      	adds	r7, #24
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	20004570 	.word	0x20004570
 800bdbc:	2000454c 	.word	0x2000454c
 800bdc0:	20004500 	.word	0x20004500
 800bdc4:	20004504 	.word	0x20004504
 800bdc8:	20004560 	.word	0x20004560
 800bdcc:	20004568 	.word	0x20004568
 800bdd0:	20004550 	.word	0x20004550
 800bdd4:	2000444c 	.word	0x2000444c
 800bdd8:	20004448 	.word	0x20004448
 800bddc:	2000455c 	.word	0x2000455c
 800bde0:	20004558 	.word	0x20004558

0800bde4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bde4:	b480      	push	{r7}
 800bde6:	b087      	sub	sp, #28
 800bde8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bdea:	4b29      	ldr	r3, [pc, #164]	; (800be90 <vTaskSwitchContext+0xac>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bdf2:	4b28      	ldr	r3, [pc, #160]	; (800be94 <vTaskSwitchContext+0xb0>)
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bdf8:	e044      	b.n	800be84 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800bdfa:	4b26      	ldr	r3, [pc, #152]	; (800be94 <vTaskSwitchContext+0xb0>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be00:	4b25      	ldr	r3, [pc, #148]	; (800be98 <vTaskSwitchContext+0xb4>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	fab3 f383 	clz	r3, r3
 800be0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800be0e:	7afb      	ldrb	r3, [r7, #11]
 800be10:	f1c3 031f 	rsb	r3, r3, #31
 800be14:	617b      	str	r3, [r7, #20]
 800be16:	4921      	ldr	r1, [pc, #132]	; (800be9c <vTaskSwitchContext+0xb8>)
 800be18:	697a      	ldr	r2, [r7, #20]
 800be1a:	4613      	mov	r3, r2
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	4413      	add	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	440b      	add	r3, r1
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10a      	bne.n	800be40 <vTaskSwitchContext+0x5c>
	__asm volatile
 800be2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2e:	f383 8811 	msr	BASEPRI, r3
 800be32:	f3bf 8f6f 	isb	sy
 800be36:	f3bf 8f4f 	dsb	sy
 800be3a:	607b      	str	r3, [r7, #4]
}
 800be3c:	bf00      	nop
 800be3e:	e7fe      	b.n	800be3e <vTaskSwitchContext+0x5a>
 800be40:	697a      	ldr	r2, [r7, #20]
 800be42:	4613      	mov	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	4413      	add	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	4a14      	ldr	r2, [pc, #80]	; (800be9c <vTaskSwitchContext+0xb8>)
 800be4c:	4413      	add	r3, r2
 800be4e:	613b      	str	r3, [r7, #16]
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	685a      	ldr	r2, [r3, #4]
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	605a      	str	r2, [r3, #4]
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	685a      	ldr	r2, [r3, #4]
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	3308      	adds	r3, #8
 800be62:	429a      	cmp	r2, r3
 800be64:	d104      	bne.n	800be70 <vTaskSwitchContext+0x8c>
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	685a      	ldr	r2, [r3, #4]
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	605a      	str	r2, [r3, #4]
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	4a0a      	ldr	r2, [pc, #40]	; (800bea0 <vTaskSwitchContext+0xbc>)
 800be78:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be7a:	4b09      	ldr	r3, [pc, #36]	; (800bea0 <vTaskSwitchContext+0xbc>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	334c      	adds	r3, #76	; 0x4c
 800be80:	4a08      	ldr	r2, [pc, #32]	; (800bea4 <vTaskSwitchContext+0xc0>)
 800be82:	6013      	str	r3, [r2, #0]
}
 800be84:	bf00      	nop
 800be86:	371c      	adds	r7, #28
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr
 800be90:	20004570 	.word	0x20004570
 800be94:	2000455c 	.word	0x2000455c
 800be98:	20004550 	.word	0x20004550
 800be9c:	2000444c 	.word	0x2000444c
 800bea0:	20004448 	.word	0x20004448
 800bea4:	200001d4 	.word	0x200001d4

0800bea8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10a      	bne.n	800bece <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800beb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebc:	f383 8811 	msr	BASEPRI, r3
 800bec0:	f3bf 8f6f 	isb	sy
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	60fb      	str	r3, [r7, #12]
}
 800beca:	bf00      	nop
 800becc:	e7fe      	b.n	800becc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bece:	4b07      	ldr	r3, [pc, #28]	; (800beec <vTaskPlaceOnEventList+0x44>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	3318      	adds	r3, #24
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7fe fb53 	bl	800a582 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bedc:	2101      	movs	r1, #1
 800bede:	6838      	ldr	r0, [r7, #0]
 800bee0:	f000 fc6c 	bl	800c7bc <prvAddCurrentTaskToDelayedList>
}
 800bee4:	bf00      	nop
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	20004448 	.word	0x20004448

0800bef0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10a      	bne.n	800bf1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	60fb      	str	r3, [r7, #12]
}
 800bf18:	bf00      	nop
 800bf1a:	e7fe      	b.n	800bf1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	3318      	adds	r3, #24
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7fe fb67 	bl	800a5f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf26:	4b1d      	ldr	r3, [pc, #116]	; (800bf9c <xTaskRemoveFromEventList+0xac>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d11c      	bne.n	800bf68 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	3304      	adds	r3, #4
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7fe fb5e 	bl	800a5f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	409a      	lsls	r2, r3
 800bf40:	4b17      	ldr	r3, [pc, #92]	; (800bfa0 <xTaskRemoveFromEventList+0xb0>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4313      	orrs	r3, r2
 800bf46:	4a16      	ldr	r2, [pc, #88]	; (800bfa0 <xTaskRemoveFromEventList+0xb0>)
 800bf48:	6013      	str	r3, [r2, #0]
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf4e:	4613      	mov	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	4413      	add	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4a13      	ldr	r2, [pc, #76]	; (800bfa4 <xTaskRemoveFromEventList+0xb4>)
 800bf58:	441a      	add	r2, r3
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	3304      	adds	r3, #4
 800bf5e:	4619      	mov	r1, r3
 800bf60:	4610      	mov	r0, r2
 800bf62:	f7fe faea 	bl	800a53a <vListInsertEnd>
 800bf66:	e005      	b.n	800bf74 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	3318      	adds	r3, #24
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	480e      	ldr	r0, [pc, #56]	; (800bfa8 <xTaskRemoveFromEventList+0xb8>)
 800bf70:	f7fe fae3 	bl	800a53a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf78:	4b0c      	ldr	r3, [pc, #48]	; (800bfac <xTaskRemoveFromEventList+0xbc>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d905      	bls.n	800bf8e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf82:	2301      	movs	r3, #1
 800bf84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf86:	4b0a      	ldr	r3, [pc, #40]	; (800bfb0 <xTaskRemoveFromEventList+0xc0>)
 800bf88:	2201      	movs	r2, #1
 800bf8a:	601a      	str	r2, [r3, #0]
 800bf8c:	e001      	b.n	800bf92 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf92:	697b      	ldr	r3, [r7, #20]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3718      	adds	r7, #24
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	20004570 	.word	0x20004570
 800bfa0:	20004550 	.word	0x20004550
 800bfa4:	2000444c 	.word	0x2000444c
 800bfa8:	20004508 	.word	0x20004508
 800bfac:	20004448 	.word	0x20004448
 800bfb0:	2000455c 	.word	0x2000455c

0800bfb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bfbc:	4b06      	ldr	r3, [pc, #24]	; (800bfd8 <vTaskInternalSetTimeOutState+0x24>)
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bfc4:	4b05      	ldr	r3, [pc, #20]	; (800bfdc <vTaskInternalSetTimeOutState+0x28>)
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	605a      	str	r2, [r3, #4]
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr
 800bfd8:	20004560 	.word	0x20004560
 800bfdc:	2000454c 	.word	0x2000454c

0800bfe0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b088      	sub	sp, #32
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d10a      	bne.n	800c006 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	613b      	str	r3, [r7, #16]
}
 800c002:	bf00      	nop
 800c004:	e7fe      	b.n	800c004 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d10a      	bne.n	800c022 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	60fb      	str	r3, [r7, #12]
}
 800c01e:	bf00      	nop
 800c020:	e7fe      	b.n	800c020 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c022:	f7fe fc3f 	bl	800a8a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c026:	4b1d      	ldr	r3, [pc, #116]	; (800c09c <xTaskCheckForTimeOut+0xbc>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	69ba      	ldr	r2, [r7, #24]
 800c032:	1ad3      	subs	r3, r2, r3
 800c034:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03e:	d102      	bne.n	800c046 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c040:	2300      	movs	r3, #0
 800c042:	61fb      	str	r3, [r7, #28]
 800c044:	e023      	b.n	800c08e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	4b15      	ldr	r3, [pc, #84]	; (800c0a0 <xTaskCheckForTimeOut+0xc0>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d007      	beq.n	800c062 <xTaskCheckForTimeOut+0x82>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	69ba      	ldr	r2, [r7, #24]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d302      	bcc.n	800c062 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c05c:	2301      	movs	r3, #1
 800c05e:	61fb      	str	r3, [r7, #28]
 800c060:	e015      	b.n	800c08e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d20b      	bcs.n	800c084 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	1ad2      	subs	r2, r2, r3
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f7ff ff9b 	bl	800bfb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c07e:	2300      	movs	r3, #0
 800c080:	61fb      	str	r3, [r7, #28]
 800c082:	e004      	b.n	800c08e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	2200      	movs	r2, #0
 800c088:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c08a:	2301      	movs	r3, #1
 800c08c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c08e:	f7fe fc39 	bl	800a904 <vPortExitCritical>

	return xReturn;
 800c092:	69fb      	ldr	r3, [r7, #28]
}
 800c094:	4618      	mov	r0, r3
 800c096:	3720      	adds	r7, #32
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	2000454c 	.word	0x2000454c
 800c0a0:	20004560 	.word	0x20004560

0800c0a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c0a8:	4b03      	ldr	r3, [pc, #12]	; (800c0b8 <vTaskMissedYield+0x14>)
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	601a      	str	r2, [r3, #0]
}
 800c0ae:	bf00      	nop
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr
 800c0b8:	2000455c 	.word	0x2000455c

0800c0bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c0c4:	f000 f852 	bl	800c16c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c0c8:	4b06      	ldr	r3, [pc, #24]	; (800c0e4 <prvIdleTask+0x28>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d9f9      	bls.n	800c0c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c0d0:	4b05      	ldr	r3, [pc, #20]	; (800c0e8 <prvIdleTask+0x2c>)
 800c0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0d6:	601a      	str	r2, [r3, #0]
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c0e0:	e7f0      	b.n	800c0c4 <prvIdleTask+0x8>
 800c0e2:	bf00      	nop
 800c0e4:	2000444c 	.word	0x2000444c
 800c0e8:	e000ed04 	.word	0xe000ed04

0800c0ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	607b      	str	r3, [r7, #4]
 800c0f6:	e00c      	b.n	800c112 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	4413      	add	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4a12      	ldr	r2, [pc, #72]	; (800c14c <prvInitialiseTaskLists+0x60>)
 800c104:	4413      	add	r3, r2
 800c106:	4618      	mov	r0, r3
 800c108:	f7fe f9ea 	bl	800a4e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	3301      	adds	r3, #1
 800c110:	607b      	str	r3, [r7, #4]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2b06      	cmp	r3, #6
 800c116:	d9ef      	bls.n	800c0f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c118:	480d      	ldr	r0, [pc, #52]	; (800c150 <prvInitialiseTaskLists+0x64>)
 800c11a:	f7fe f9e1 	bl	800a4e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c11e:	480d      	ldr	r0, [pc, #52]	; (800c154 <prvInitialiseTaskLists+0x68>)
 800c120:	f7fe f9de 	bl	800a4e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c124:	480c      	ldr	r0, [pc, #48]	; (800c158 <prvInitialiseTaskLists+0x6c>)
 800c126:	f7fe f9db 	bl	800a4e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c12a:	480c      	ldr	r0, [pc, #48]	; (800c15c <prvInitialiseTaskLists+0x70>)
 800c12c:	f7fe f9d8 	bl	800a4e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c130:	480b      	ldr	r0, [pc, #44]	; (800c160 <prvInitialiseTaskLists+0x74>)
 800c132:	f7fe f9d5 	bl	800a4e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c136:	4b0b      	ldr	r3, [pc, #44]	; (800c164 <prvInitialiseTaskLists+0x78>)
 800c138:	4a05      	ldr	r2, [pc, #20]	; (800c150 <prvInitialiseTaskLists+0x64>)
 800c13a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c13c:	4b0a      	ldr	r3, [pc, #40]	; (800c168 <prvInitialiseTaskLists+0x7c>)
 800c13e:	4a05      	ldr	r2, [pc, #20]	; (800c154 <prvInitialiseTaskLists+0x68>)
 800c140:	601a      	str	r2, [r3, #0]
}
 800c142:	bf00      	nop
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	2000444c 	.word	0x2000444c
 800c150:	200044d8 	.word	0x200044d8
 800c154:	200044ec 	.word	0x200044ec
 800c158:	20004508 	.word	0x20004508
 800c15c:	2000451c 	.word	0x2000451c
 800c160:	20004534 	.word	0x20004534
 800c164:	20004500 	.word	0x20004500
 800c168:	20004504 	.word	0x20004504

0800c16c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c172:	e019      	b.n	800c1a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c174:	f7fe fb96 	bl	800a8a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c178:	4b10      	ldr	r3, [pc, #64]	; (800c1bc <prvCheckTasksWaitingTermination+0x50>)
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	3304      	adds	r3, #4
 800c184:	4618      	mov	r0, r3
 800c186:	f7fe fa35 	bl	800a5f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c18a:	4b0d      	ldr	r3, [pc, #52]	; (800c1c0 <prvCheckTasksWaitingTermination+0x54>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	3b01      	subs	r3, #1
 800c190:	4a0b      	ldr	r2, [pc, #44]	; (800c1c0 <prvCheckTasksWaitingTermination+0x54>)
 800c192:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c194:	4b0b      	ldr	r3, [pc, #44]	; (800c1c4 <prvCheckTasksWaitingTermination+0x58>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	3b01      	subs	r3, #1
 800c19a:	4a0a      	ldr	r2, [pc, #40]	; (800c1c4 <prvCheckTasksWaitingTermination+0x58>)
 800c19c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c19e:	f7fe fbb1 	bl	800a904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f810 	bl	800c1c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1a8:	4b06      	ldr	r3, [pc, #24]	; (800c1c4 <prvCheckTasksWaitingTermination+0x58>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1e1      	bne.n	800c174 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c1b0:	bf00      	nop
 800c1b2:	bf00      	nop
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	2000451c 	.word	0x2000451c
 800c1c0:	20004548 	.word	0x20004548
 800c1c4:	20004530 	.word	0x20004530

0800c1c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	334c      	adds	r3, #76	; 0x4c
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f003 f869 	bl	800f2ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d108      	bne.n	800c1f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fe f85b 	bl	800a2a4 <vPortFree>
				vPortFree( pxTCB );
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f7fe f858 	bl	800a2a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c1f4:	e018      	b.n	800c228 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d103      	bne.n	800c208 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7fe f84f 	bl	800a2a4 <vPortFree>
	}
 800c206:	e00f      	b.n	800c228 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d00a      	beq.n	800c228 <prvDeleteTCB+0x60>
	__asm volatile
 800c212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c216:	f383 8811 	msr	BASEPRI, r3
 800c21a:	f3bf 8f6f 	isb	sy
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	60fb      	str	r3, [r7, #12]
}
 800c224:	bf00      	nop
 800c226:	e7fe      	b.n	800c226 <prvDeleteTCB+0x5e>
	}
 800c228:	bf00      	nop
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c236:	4b0c      	ldr	r3, [pc, #48]	; (800c268 <prvResetNextTaskUnblockTime+0x38>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d104      	bne.n	800c24a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c240:	4b0a      	ldr	r3, [pc, #40]	; (800c26c <prvResetNextTaskUnblockTime+0x3c>)
 800c242:	f04f 32ff 	mov.w	r2, #4294967295
 800c246:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c248:	e008      	b.n	800c25c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c24a:	4b07      	ldr	r3, [pc, #28]	; (800c268 <prvResetNextTaskUnblockTime+0x38>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	4a04      	ldr	r2, [pc, #16]	; (800c26c <prvResetNextTaskUnblockTime+0x3c>)
 800c25a:	6013      	str	r3, [r2, #0]
}
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr
 800c268:	20004500 	.word	0x20004500
 800c26c:	20004568 	.word	0x20004568

0800c270 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c270:	b480      	push	{r7}
 800c272:	b083      	sub	sp, #12
 800c274:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c276:	4b0b      	ldr	r3, [pc, #44]	; (800c2a4 <xTaskGetSchedulerState+0x34>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d102      	bne.n	800c284 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c27e:	2301      	movs	r3, #1
 800c280:	607b      	str	r3, [r7, #4]
 800c282:	e008      	b.n	800c296 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c284:	4b08      	ldr	r3, [pc, #32]	; (800c2a8 <xTaskGetSchedulerState+0x38>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d102      	bne.n	800c292 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c28c:	2302      	movs	r3, #2
 800c28e:	607b      	str	r3, [r7, #4]
 800c290:	e001      	b.n	800c296 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c292:	2300      	movs	r3, #0
 800c294:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c296:	687b      	ldr	r3, [r7, #4]
	}
 800c298:	4618      	mov	r0, r3
 800c29a:	370c      	adds	r7, #12
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr
 800c2a4:	20004554 	.word	0x20004554
 800c2a8:	20004570 	.word	0x20004570

0800c2ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b086      	sub	sp, #24
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d06e      	beq.n	800c3a0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c2c2:	4b3a      	ldr	r3, [pc, #232]	; (800c3ac <xTaskPriorityDisinherit+0x100>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	693a      	ldr	r2, [r7, #16]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d00a      	beq.n	800c2e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	60fb      	str	r3, [r7, #12]
}
 800c2de:	bf00      	nop
 800c2e0:	e7fe      	b.n	800c2e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d10a      	bne.n	800c300 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	60bb      	str	r3, [r7, #8]
}
 800c2fc:	bf00      	nop
 800c2fe:	e7fe      	b.n	800c2fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c304:	1e5a      	subs	r2, r3, #1
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c312:	429a      	cmp	r2, r3
 800c314:	d044      	beq.n	800c3a0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d140      	bne.n	800c3a0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	3304      	adds	r3, #4
 800c322:	4618      	mov	r0, r3
 800c324:	f7fe f966 	bl	800a5f4 <uxListRemove>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d115      	bne.n	800c35a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c332:	491f      	ldr	r1, [pc, #124]	; (800c3b0 <xTaskPriorityDisinherit+0x104>)
 800c334:	4613      	mov	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	440b      	add	r3, r1
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10a      	bne.n	800c35a <xTaskPriorityDisinherit+0xae>
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c348:	2201      	movs	r2, #1
 800c34a:	fa02 f303 	lsl.w	r3, r2, r3
 800c34e:	43da      	mvns	r2, r3
 800c350:	4b18      	ldr	r3, [pc, #96]	; (800c3b4 <xTaskPriorityDisinherit+0x108>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4013      	ands	r3, r2
 800c356:	4a17      	ldr	r2, [pc, #92]	; (800c3b4 <xTaskPriorityDisinherit+0x108>)
 800c358:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c366:	f1c3 0207 	rsb	r2, r3, #7
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c372:	2201      	movs	r2, #1
 800c374:	409a      	lsls	r2, r3
 800c376:	4b0f      	ldr	r3, [pc, #60]	; (800c3b4 <xTaskPriorityDisinherit+0x108>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4313      	orrs	r3, r2
 800c37c:	4a0d      	ldr	r2, [pc, #52]	; (800c3b4 <xTaskPriorityDisinherit+0x108>)
 800c37e:	6013      	str	r3, [r2, #0]
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c384:	4613      	mov	r3, r2
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	4413      	add	r3, r2
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	4a08      	ldr	r2, [pc, #32]	; (800c3b0 <xTaskPriorityDisinherit+0x104>)
 800c38e:	441a      	add	r2, r3
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	3304      	adds	r3, #4
 800c394:	4619      	mov	r1, r3
 800c396:	4610      	mov	r0, r2
 800c398:	f7fe f8cf 	bl	800a53a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c39c:	2301      	movs	r3, #1
 800c39e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3a0:	697b      	ldr	r3, [r7, #20]
	}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3718      	adds	r7, #24
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	20004448 	.word	0x20004448
 800c3b0:	2000444c 	.word	0x2000444c
 800c3b4:	20004550 	.word	0x20004550

0800c3b8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
 800c3c4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c3c6:	f7fe fa6d 	bl	800a8a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c3ca:	4b29      	ldr	r3, [pc, #164]	; (800c470 <xTaskNotifyWait+0xb8>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d01c      	beq.n	800c412 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c3d8:	4b25      	ldr	r3, [pc, #148]	; (800c470 <xTaskNotifyWait+0xb8>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	43d2      	mvns	r2, r2
 800c3e4:	400a      	ands	r2, r1
 800c3e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c3ea:	4b21      	ldr	r3, [pc, #132]	; (800c470 <xTaskNotifyWait+0xb8>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00b      	beq.n	800c412 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3fa:	2101      	movs	r1, #1
 800c3fc:	6838      	ldr	r0, [r7, #0]
 800c3fe:	f000 f9dd 	bl	800c7bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c402:	4b1c      	ldr	r3, [pc, #112]	; (800c474 <xTaskNotifyWait+0xbc>)
 800c404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c408:	601a      	str	r2, [r3, #0]
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c412:	f7fe fa77 	bl	800a904 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c416:	f7fe fa45 	bl	800a8a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d005      	beq.n	800c42c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c420:	4b13      	ldr	r3, [pc, #76]	; (800c470 <xTaskNotifyWait+0xb8>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c42c:	4b10      	ldr	r3, [pc, #64]	; (800c470 <xTaskNotifyWait+0xb8>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c434:	b2db      	uxtb	r3, r3
 800c436:	2b02      	cmp	r3, #2
 800c438:	d002      	beq.n	800c440 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c43a:	2300      	movs	r3, #0
 800c43c:	617b      	str	r3, [r7, #20]
 800c43e:	e00a      	b.n	800c456 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c440:	4b0b      	ldr	r3, [pc, #44]	; (800c470 <xTaskNotifyWait+0xb8>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	43d2      	mvns	r2, r2
 800c44c:	400a      	ands	r2, r1
 800c44e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800c452:	2301      	movs	r3, #1
 800c454:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c456:	4b06      	ldr	r3, [pc, #24]	; (800c470 <xTaskNotifyWait+0xb8>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2200      	movs	r2, #0
 800c45c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800c460:	f7fe fa50 	bl	800a904 <vPortExitCritical>

		return xReturn;
 800c464:	697b      	ldr	r3, [r7, #20]
	}
 800c466:	4618      	mov	r0, r3
 800c468:	3718      	adds	r7, #24
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	20004448 	.word	0x20004448
 800c474:	e000ed04 	.word	0xe000ed04

0800c478 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08a      	sub	sp, #40	; 0x28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	603b      	str	r3, [r7, #0]
 800c484:	4613      	mov	r3, r2
 800c486:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c488:	2301      	movs	r3, #1
 800c48a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10a      	bne.n	800c4a8 <xTaskGenericNotify+0x30>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	61bb      	str	r3, [r7, #24]
}
 800c4a4:	bf00      	nop
 800c4a6:	e7fe      	b.n	800c4a6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c4ac:	f7fe f9fa 	bl	800a8a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d004      	beq.n	800c4c0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c4b6:	6a3b      	ldr	r3, [r7, #32]
 800c4b8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c4c0:	6a3b      	ldr	r3, [r7, #32]
 800c4c2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c4c6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c4c8:	6a3b      	ldr	r3, [r7, #32]
 800c4ca:	2202      	movs	r2, #2
 800c4cc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800c4d0:	79fb      	ldrb	r3, [r7, #7]
 800c4d2:	2b04      	cmp	r3, #4
 800c4d4:	d82d      	bhi.n	800c532 <xTaskGenericNotify+0xba>
 800c4d6:	a201      	add	r2, pc, #4	; (adr r2, 800c4dc <xTaskGenericNotify+0x64>)
 800c4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4dc:	0800c555 	.word	0x0800c555
 800c4e0:	0800c4f1 	.word	0x0800c4f1
 800c4e4:	0800c503 	.word	0x0800c503
 800c4e8:	0800c513 	.word	0x0800c513
 800c4ec:	0800c51d 	.word	0x0800c51d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c4f0:	6a3b      	ldr	r3, [r7, #32]
 800c4f2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	431a      	orrs	r2, r3
 800c4fa:	6a3b      	ldr	r3, [r7, #32]
 800c4fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c500:	e02b      	b.n	800c55a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c502:	6a3b      	ldr	r3, [r7, #32]
 800c504:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c508:	1c5a      	adds	r2, r3, #1
 800c50a:	6a3b      	ldr	r3, [r7, #32]
 800c50c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c510:	e023      	b.n	800c55a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c512:	6a3b      	ldr	r3, [r7, #32]
 800c514:	68ba      	ldr	r2, [r7, #8]
 800c516:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c51a:	e01e      	b.n	800c55a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c51c:	7ffb      	ldrb	r3, [r7, #31]
 800c51e:	2b02      	cmp	r3, #2
 800c520:	d004      	beq.n	800c52c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c522:	6a3b      	ldr	r3, [r7, #32]
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c52a:	e016      	b.n	800c55a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800c52c:	2300      	movs	r3, #0
 800c52e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c530:	e013      	b.n	800c55a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c532:	6a3b      	ldr	r3, [r7, #32]
 800c534:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c53c:	d00c      	beq.n	800c558 <xTaskGenericNotify+0xe0>
	__asm volatile
 800c53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	617b      	str	r3, [r7, #20]
}
 800c550:	bf00      	nop
 800c552:	e7fe      	b.n	800c552 <xTaskGenericNotify+0xda>
					break;
 800c554:	bf00      	nop
 800c556:	e000      	b.n	800c55a <xTaskGenericNotify+0xe2>

					break;
 800c558:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c55a:	7ffb      	ldrb	r3, [r7, #31]
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d139      	bne.n	800c5d4 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c560:	6a3b      	ldr	r3, [r7, #32]
 800c562:	3304      	adds	r3, #4
 800c564:	4618      	mov	r0, r3
 800c566:	f7fe f845 	bl	800a5f4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c56a:	6a3b      	ldr	r3, [r7, #32]
 800c56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56e:	2201      	movs	r2, #1
 800c570:	409a      	lsls	r2, r3
 800c572:	4b1c      	ldr	r3, [pc, #112]	; (800c5e4 <xTaskGenericNotify+0x16c>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4313      	orrs	r3, r2
 800c578:	4a1a      	ldr	r2, [pc, #104]	; (800c5e4 <xTaskGenericNotify+0x16c>)
 800c57a:	6013      	str	r3, [r2, #0]
 800c57c:	6a3b      	ldr	r3, [r7, #32]
 800c57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c580:	4613      	mov	r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4413      	add	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4a17      	ldr	r2, [pc, #92]	; (800c5e8 <xTaskGenericNotify+0x170>)
 800c58a:	441a      	add	r2, r3
 800c58c:	6a3b      	ldr	r3, [r7, #32]
 800c58e:	3304      	adds	r3, #4
 800c590:	4619      	mov	r1, r3
 800c592:	4610      	mov	r0, r2
 800c594:	f7fd ffd1 	bl	800a53a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c598:	6a3b      	ldr	r3, [r7, #32]
 800c59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00a      	beq.n	800c5b6 <xTaskGenericNotify+0x13e>
	__asm volatile
 800c5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 800c5a8:	f3bf 8f6f 	isb	sy
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	613b      	str	r3, [r7, #16]
}
 800c5b2:	bf00      	nop
 800c5b4:	e7fe      	b.n	800c5b4 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c5b6:	6a3b      	ldr	r3, [r7, #32]
 800c5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ba:	4b0c      	ldr	r3, [pc, #48]	; (800c5ec <xTaskGenericNotify+0x174>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d907      	bls.n	800c5d4 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c5c4:	4b0a      	ldr	r3, [pc, #40]	; (800c5f0 <xTaskGenericNotify+0x178>)
 800c5c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ca:	601a      	str	r2, [r3, #0]
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c5d4:	f7fe f996 	bl	800a904 <vPortExitCritical>

		return xReturn;
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3728      	adds	r7, #40	; 0x28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	20004550 	.word	0x20004550
 800c5e8:	2000444c 	.word	0x2000444c
 800c5ec:	20004448 	.word	0x20004448
 800c5f0:	e000ed04 	.word	0xe000ed04

0800c5f4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b08e      	sub	sp, #56	; 0x38
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	603b      	str	r3, [r7, #0]
 800c600:	4613      	mov	r3, r2
 800c602:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c604:	2301      	movs	r3, #1
 800c606:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10a      	bne.n	800c624 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c620:	bf00      	nop
 800c622:	e7fe      	b.n	800c622 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c624:	f7fe fa20 	bl	800aa68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c62c:	f3ef 8211 	mrs	r2, BASEPRI
 800c630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	623a      	str	r2, [r7, #32]
 800c642:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c644:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c646:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d004      	beq.n	800c658 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c650:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c65e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c664:	2202      	movs	r2, #2
 800c666:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800c66a:	79fb      	ldrb	r3, [r7, #7]
 800c66c:	2b04      	cmp	r3, #4
 800c66e:	d82f      	bhi.n	800c6d0 <xTaskGenericNotifyFromISR+0xdc>
 800c670:	a201      	add	r2, pc, #4	; (adr r2, 800c678 <xTaskGenericNotifyFromISR+0x84>)
 800c672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c676:	bf00      	nop
 800c678:	0800c6f3 	.word	0x0800c6f3
 800c67c:	0800c68d 	.word	0x0800c68d
 800c680:	0800c69f 	.word	0x0800c69f
 800c684:	0800c6af 	.word	0x0800c6af
 800c688:	0800c6b9 	.word	0x0800c6b9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	431a      	orrs	r2, r3
 800c696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c698:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c69c:	e02c      	b.n	800c6f8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c6a4:	1c5a      	adds	r2, r3, #1
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c6ac:	e024      	b.n	800c6f8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b0:	68ba      	ldr	r2, [r7, #8]
 800c6b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c6b6:	e01f      	b.n	800c6f8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c6b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d004      	beq.n	800c6ca <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c2:	68ba      	ldr	r2, [r7, #8]
 800c6c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c6c8:	e016      	b.n	800c6f8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c6ce:	e013      	b.n	800c6f8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6da:	d00c      	beq.n	800c6f6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800c6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e0:	f383 8811 	msr	BASEPRI, r3
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	61bb      	str	r3, [r7, #24]
}
 800c6ee:	bf00      	nop
 800c6f0:	e7fe      	b.n	800c6f0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800c6f2:	bf00      	nop
 800c6f4:	e000      	b.n	800c6f8 <xTaskGenericNotifyFromISR+0x104>
					break;
 800c6f6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c6f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d145      	bne.n	800c78c <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c704:	2b00      	cmp	r3, #0
 800c706:	d00a      	beq.n	800c71e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800c708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70c:	f383 8811 	msr	BASEPRI, r3
 800c710:	f3bf 8f6f 	isb	sy
 800c714:	f3bf 8f4f 	dsb	sy
 800c718:	617b      	str	r3, [r7, #20]
}
 800c71a:	bf00      	nop
 800c71c:	e7fe      	b.n	800c71c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c71e:	4b21      	ldr	r3, [pc, #132]	; (800c7a4 <xTaskGenericNotifyFromISR+0x1b0>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d11c      	bne.n	800c760 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c728:	3304      	adds	r3, #4
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7fd ff62 	bl	800a5f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c734:	2201      	movs	r2, #1
 800c736:	409a      	lsls	r2, r3
 800c738:	4b1b      	ldr	r3, [pc, #108]	; (800c7a8 <xTaskGenericNotifyFromISR+0x1b4>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4313      	orrs	r3, r2
 800c73e:	4a1a      	ldr	r2, [pc, #104]	; (800c7a8 <xTaskGenericNotifyFromISR+0x1b4>)
 800c740:	6013      	str	r3, [r2, #0]
 800c742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c746:	4613      	mov	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	4a17      	ldr	r2, [pc, #92]	; (800c7ac <xTaskGenericNotifyFromISR+0x1b8>)
 800c750:	441a      	add	r2, r3
 800c752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c754:	3304      	adds	r3, #4
 800c756:	4619      	mov	r1, r3
 800c758:	4610      	mov	r0, r2
 800c75a:	f7fd feee 	bl	800a53a <vListInsertEnd>
 800c75e:	e005      	b.n	800c76c <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c762:	3318      	adds	r3, #24
 800c764:	4619      	mov	r1, r3
 800c766:	4812      	ldr	r0, [pc, #72]	; (800c7b0 <xTaskGenericNotifyFromISR+0x1bc>)
 800c768:	f7fd fee7 	bl	800a53a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c770:	4b10      	ldr	r3, [pc, #64]	; (800c7b4 <xTaskGenericNotifyFromISR+0x1c0>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c776:	429a      	cmp	r2, r3
 800c778:	d908      	bls.n	800c78c <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c77a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d002      	beq.n	800c786 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c782:	2201      	movs	r2, #1
 800c784:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c786:	4b0c      	ldr	r3, [pc, #48]	; (800c7b8 <xTaskGenericNotifyFromISR+0x1c4>)
 800c788:	2201      	movs	r2, #1
 800c78a:	601a      	str	r2, [r3, #0]
 800c78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	f383 8811 	msr	BASEPRI, r3
}
 800c796:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3738      	adds	r7, #56	; 0x38
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	20004570 	.word	0x20004570
 800c7a8:	20004550 	.word	0x20004550
 800c7ac:	2000444c 	.word	0x2000444c
 800c7b0:	20004508 	.word	0x20004508
 800c7b4:	20004448 	.word	0x20004448
 800c7b8:	2000455c 	.word	0x2000455c

0800c7bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c7c6:	4b29      	ldr	r3, [pc, #164]	; (800c86c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7cc:	4b28      	ldr	r3, [pc, #160]	; (800c870 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	3304      	adds	r3, #4
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fd ff0e 	bl	800a5f4 <uxListRemove>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10b      	bne.n	800c7f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c7de:	4b24      	ldr	r3, [pc, #144]	; (800c870 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c7ea:	43da      	mvns	r2, r3
 800c7ec:	4b21      	ldr	r3, [pc, #132]	; (800c874 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4013      	ands	r3, r2
 800c7f2:	4a20      	ldr	r2, [pc, #128]	; (800c874 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c7f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7fc:	d10a      	bne.n	800c814 <prvAddCurrentTaskToDelayedList+0x58>
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d007      	beq.n	800c814 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c804:	4b1a      	ldr	r3, [pc, #104]	; (800c870 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	3304      	adds	r3, #4
 800c80a:	4619      	mov	r1, r3
 800c80c:	481a      	ldr	r0, [pc, #104]	; (800c878 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c80e:	f7fd fe94 	bl	800a53a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c812:	e026      	b.n	800c862 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4413      	add	r3, r2
 800c81a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c81c:	4b14      	ldr	r3, [pc, #80]	; (800c870 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c824:	68ba      	ldr	r2, [r7, #8]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d209      	bcs.n	800c840 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c82c:	4b13      	ldr	r3, [pc, #76]	; (800c87c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	4b0f      	ldr	r3, [pc, #60]	; (800c870 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	3304      	adds	r3, #4
 800c836:	4619      	mov	r1, r3
 800c838:	4610      	mov	r0, r2
 800c83a:	f7fd fea2 	bl	800a582 <vListInsert>
}
 800c83e:	e010      	b.n	800c862 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c840:	4b0f      	ldr	r3, [pc, #60]	; (800c880 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	4b0a      	ldr	r3, [pc, #40]	; (800c870 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	3304      	adds	r3, #4
 800c84a:	4619      	mov	r1, r3
 800c84c:	4610      	mov	r0, r2
 800c84e:	f7fd fe98 	bl	800a582 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c852:	4b0c      	ldr	r3, [pc, #48]	; (800c884 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68ba      	ldr	r2, [r7, #8]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d202      	bcs.n	800c862 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c85c:	4a09      	ldr	r2, [pc, #36]	; (800c884 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	6013      	str	r3, [r2, #0]
}
 800c862:	bf00      	nop
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	2000454c 	.word	0x2000454c
 800c870:	20004448 	.word	0x20004448
 800c874:	20004550 	.word	0x20004550
 800c878:	20004534 	.word	0x20004534
 800c87c:	20004504 	.word	0x20004504
 800c880:	20004500 	.word	0x20004500
 800c884:	20004568 	.word	0x20004568

0800c888 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	460b      	mov	r3, r1
 800c892:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c894:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c898:	f002 fc9c 	bl	800f1d4 <USBD_static_malloc>
 800c89c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d109      	bne.n	800c8b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	32b0      	adds	r2, #176	; 0xb0
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c8b4:	2302      	movs	r3, #2
 800c8b6:	e0d4      	b.n	800ca62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c8b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c8bc:	2100      	movs	r1, #0
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f002 fcec 	bl	800f29c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	32b0      	adds	r2, #176	; 0xb0
 800c8ce:	68f9      	ldr	r1, [r7, #12]
 800c8d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	32b0      	adds	r2, #176	; 0xb0
 800c8de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	7c1b      	ldrb	r3, [r3, #16]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d138      	bne.n	800c962 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c8f0:	4b5e      	ldr	r3, [pc, #376]	; (800ca6c <USBD_CDC_Init+0x1e4>)
 800c8f2:	7819      	ldrb	r1, [r3, #0]
 800c8f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8f8:	2202      	movs	r2, #2
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f002 fb47 	bl	800ef8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c900:	4b5a      	ldr	r3, [pc, #360]	; (800ca6c <USBD_CDC_Init+0x1e4>)
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	f003 020f 	and.w	r2, r3, #15
 800c908:	6879      	ldr	r1, [r7, #4]
 800c90a:	4613      	mov	r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4413      	add	r3, r2
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	440b      	add	r3, r1
 800c914:	3324      	adds	r3, #36	; 0x24
 800c916:	2201      	movs	r2, #1
 800c918:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c91a:	4b55      	ldr	r3, [pc, #340]	; (800ca70 <USBD_CDC_Init+0x1e8>)
 800c91c:	7819      	ldrb	r1, [r3, #0]
 800c91e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c922:	2202      	movs	r2, #2
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f002 fb32 	bl	800ef8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c92a:	4b51      	ldr	r3, [pc, #324]	; (800ca70 <USBD_CDC_Init+0x1e8>)
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	f003 020f 	and.w	r2, r3, #15
 800c932:	6879      	ldr	r1, [r7, #4]
 800c934:	4613      	mov	r3, r2
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	4413      	add	r3, r2
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	440b      	add	r3, r1
 800c93e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c942:	2201      	movs	r2, #1
 800c944:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c946:	4b4b      	ldr	r3, [pc, #300]	; (800ca74 <USBD_CDC_Init+0x1ec>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	f003 020f 	and.w	r2, r3, #15
 800c94e:	6879      	ldr	r1, [r7, #4]
 800c950:	4613      	mov	r3, r2
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	440b      	add	r3, r1
 800c95a:	3326      	adds	r3, #38	; 0x26
 800c95c:	2210      	movs	r2, #16
 800c95e:	801a      	strh	r2, [r3, #0]
 800c960:	e035      	b.n	800c9ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c962:	4b42      	ldr	r3, [pc, #264]	; (800ca6c <USBD_CDC_Init+0x1e4>)
 800c964:	7819      	ldrb	r1, [r3, #0]
 800c966:	2340      	movs	r3, #64	; 0x40
 800c968:	2202      	movs	r2, #2
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f002 fb0f 	bl	800ef8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c970:	4b3e      	ldr	r3, [pc, #248]	; (800ca6c <USBD_CDC_Init+0x1e4>)
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	f003 020f 	and.w	r2, r3, #15
 800c978:	6879      	ldr	r1, [r7, #4]
 800c97a:	4613      	mov	r3, r2
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	4413      	add	r3, r2
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	440b      	add	r3, r1
 800c984:	3324      	adds	r3, #36	; 0x24
 800c986:	2201      	movs	r2, #1
 800c988:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c98a:	4b39      	ldr	r3, [pc, #228]	; (800ca70 <USBD_CDC_Init+0x1e8>)
 800c98c:	7819      	ldrb	r1, [r3, #0]
 800c98e:	2340      	movs	r3, #64	; 0x40
 800c990:	2202      	movs	r2, #2
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f002 fafb 	bl	800ef8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c998:	4b35      	ldr	r3, [pc, #212]	; (800ca70 <USBD_CDC_Init+0x1e8>)
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	f003 020f 	and.w	r2, r3, #15
 800c9a0:	6879      	ldr	r1, [r7, #4]
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	4413      	add	r3, r2
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	440b      	add	r3, r1
 800c9ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c9b4:	4b2f      	ldr	r3, [pc, #188]	; (800ca74 <USBD_CDC_Init+0x1ec>)
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	f003 020f 	and.w	r2, r3, #15
 800c9bc:	6879      	ldr	r1, [r7, #4]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	4413      	add	r3, r2
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	440b      	add	r3, r1
 800c9c8:	3326      	adds	r3, #38	; 0x26
 800c9ca:	2210      	movs	r2, #16
 800c9cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c9ce:	4b29      	ldr	r3, [pc, #164]	; (800ca74 <USBD_CDC_Init+0x1ec>)
 800c9d0:	7819      	ldrb	r1, [r3, #0]
 800c9d2:	2308      	movs	r3, #8
 800c9d4:	2203      	movs	r2, #3
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f002 fad9 	bl	800ef8e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c9dc:	4b25      	ldr	r3, [pc, #148]	; (800ca74 <USBD_CDC_Init+0x1ec>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	f003 020f 	and.w	r2, r3, #15
 800c9e4:	6879      	ldr	r1, [r7, #4]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4413      	add	r3, r2
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	440b      	add	r3, r1
 800c9f0:	3324      	adds	r3, #36	; 0x24
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	33b0      	adds	r3, #176	; 0xb0
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4413      	add	r3, r2
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2200      	movs	r2, #0
 800ca16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d101      	bne.n	800ca30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ca2c:	2302      	movs	r3, #2
 800ca2e:	e018      	b.n	800ca62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	7c1b      	ldrb	r3, [r3, #16]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d10a      	bne.n	800ca4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ca38:	4b0d      	ldr	r3, [pc, #52]	; (800ca70 <USBD_CDC_Init+0x1e8>)
 800ca3a:	7819      	ldrb	r1, [r3, #0]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ca42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f002 fb90 	bl	800f16c <USBD_LL_PrepareReceive>
 800ca4c:	e008      	b.n	800ca60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ca4e:	4b08      	ldr	r3, [pc, #32]	; (800ca70 <USBD_CDC_Init+0x1e8>)
 800ca50:	7819      	ldrb	r1, [r3, #0]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ca58:	2340      	movs	r3, #64	; 0x40
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f002 fb86 	bl	800f16c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	2000011f 	.word	0x2000011f
 800ca70:	20000120 	.word	0x20000120
 800ca74:	20000121 	.word	0x20000121

0800ca78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	460b      	mov	r3, r1
 800ca82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ca84:	4b3a      	ldr	r3, [pc, #232]	; (800cb70 <USBD_CDC_DeInit+0xf8>)
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	4619      	mov	r1, r3
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f002 faa5 	bl	800efda <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ca90:	4b37      	ldr	r3, [pc, #220]	; (800cb70 <USBD_CDC_DeInit+0xf8>)
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	f003 020f 	and.w	r2, r3, #15
 800ca98:	6879      	ldr	r1, [r7, #4]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	4413      	add	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	440b      	add	r3, r1
 800caa4:	3324      	adds	r3, #36	; 0x24
 800caa6:	2200      	movs	r2, #0
 800caa8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800caaa:	4b32      	ldr	r3, [pc, #200]	; (800cb74 <USBD_CDC_DeInit+0xfc>)
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	4619      	mov	r1, r3
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f002 fa92 	bl	800efda <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cab6:	4b2f      	ldr	r3, [pc, #188]	; (800cb74 <USBD_CDC_DeInit+0xfc>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	f003 020f 	and.w	r2, r3, #15
 800cabe:	6879      	ldr	r1, [r7, #4]
 800cac0:	4613      	mov	r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	4413      	add	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	440b      	add	r3, r1
 800caca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cace:	2200      	movs	r2, #0
 800cad0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cad2:	4b29      	ldr	r3, [pc, #164]	; (800cb78 <USBD_CDC_DeInit+0x100>)
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	4619      	mov	r1, r3
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f002 fa7e 	bl	800efda <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cade:	4b26      	ldr	r3, [pc, #152]	; (800cb78 <USBD_CDC_DeInit+0x100>)
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	f003 020f 	and.w	r2, r3, #15
 800cae6:	6879      	ldr	r1, [r7, #4]
 800cae8:	4613      	mov	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	4413      	add	r3, r2
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	440b      	add	r3, r1
 800caf2:	3324      	adds	r3, #36	; 0x24
 800caf4:	2200      	movs	r2, #0
 800caf6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800caf8:	4b1f      	ldr	r3, [pc, #124]	; (800cb78 <USBD_CDC_DeInit+0x100>)
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	f003 020f 	and.w	r2, r3, #15
 800cb00:	6879      	ldr	r1, [r7, #4]
 800cb02:	4613      	mov	r3, r2
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	4413      	add	r3, r2
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	440b      	add	r3, r1
 800cb0c:	3326      	adds	r3, #38	; 0x26
 800cb0e:	2200      	movs	r2, #0
 800cb10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	32b0      	adds	r2, #176	; 0xb0
 800cb1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d01f      	beq.n	800cb64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	33b0      	adds	r3, #176	; 0xb0
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4413      	add	r3, r2
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	32b0      	adds	r2, #176	; 0xb0
 800cb42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb46:	4618      	mov	r0, r3
 800cb48:	f002 fb52 	bl	800f1f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	32b0      	adds	r2, #176	; 0xb0
 800cb56:	2100      	movs	r1, #0
 800cb58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	2000011f 	.word	0x2000011f
 800cb74:	20000120 	.word	0x20000120
 800cb78:	20000121 	.word	0x20000121

0800cb7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b086      	sub	sp, #24
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	32b0      	adds	r2, #176	; 0xb0
 800cb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cb96:	2300      	movs	r3, #0
 800cb98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d101      	bne.n	800cbac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cba8:	2303      	movs	r3, #3
 800cbaa:	e0bf      	b.n	800cd2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d050      	beq.n	800cc5a <USBD_CDC_Setup+0xde>
 800cbb8:	2b20      	cmp	r3, #32
 800cbba:	f040 80af 	bne.w	800cd1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	88db      	ldrh	r3, [r3, #6]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d03a      	beq.n	800cc3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	b25b      	sxtb	r3, r3
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	da1b      	bge.n	800cc08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	33b0      	adds	r3, #176	; 0xb0
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	4413      	add	r3, r2
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cbe6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cbe8:	683a      	ldr	r2, [r7, #0]
 800cbea:	88d2      	ldrh	r2, [r2, #6]
 800cbec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	88db      	ldrh	r3, [r3, #6]
 800cbf2:	2b07      	cmp	r3, #7
 800cbf4:	bf28      	it	cs
 800cbf6:	2307      	movcs	r3, #7
 800cbf8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	89fa      	ldrh	r2, [r7, #14]
 800cbfe:	4619      	mov	r1, r3
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f001 fd89 	bl	800e718 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cc06:	e090      	b.n	800cd2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	785a      	ldrb	r2, [r3, #1]
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	88db      	ldrh	r3, [r3, #6]
 800cc16:	2b3f      	cmp	r3, #63	; 0x3f
 800cc18:	d803      	bhi.n	800cc22 <USBD_CDC_Setup+0xa6>
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	88db      	ldrh	r3, [r3, #6]
 800cc1e:	b2da      	uxtb	r2, r3
 800cc20:	e000      	b.n	800cc24 <USBD_CDC_Setup+0xa8>
 800cc22:	2240      	movs	r2, #64	; 0x40
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cc2a:	6939      	ldr	r1, [r7, #16]
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cc32:	461a      	mov	r2, r3
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f001 fd9b 	bl	800e770 <USBD_CtlPrepareRx>
      break;
 800cc3a:	e076      	b.n	800cd2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	33b0      	adds	r3, #176	; 0xb0
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4413      	add	r3, r2
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	689b      	ldr	r3, [r3, #8]
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	7850      	ldrb	r0, [r2, #1]
 800cc52:	2200      	movs	r2, #0
 800cc54:	6839      	ldr	r1, [r7, #0]
 800cc56:	4798      	blx	r3
      break;
 800cc58:	e067      	b.n	800cd2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	785b      	ldrb	r3, [r3, #1]
 800cc5e:	2b0b      	cmp	r3, #11
 800cc60:	d851      	bhi.n	800cd06 <USBD_CDC_Setup+0x18a>
 800cc62:	a201      	add	r2, pc, #4	; (adr r2, 800cc68 <USBD_CDC_Setup+0xec>)
 800cc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc68:	0800cc99 	.word	0x0800cc99
 800cc6c:	0800cd15 	.word	0x0800cd15
 800cc70:	0800cd07 	.word	0x0800cd07
 800cc74:	0800cd07 	.word	0x0800cd07
 800cc78:	0800cd07 	.word	0x0800cd07
 800cc7c:	0800cd07 	.word	0x0800cd07
 800cc80:	0800cd07 	.word	0x0800cd07
 800cc84:	0800cd07 	.word	0x0800cd07
 800cc88:	0800cd07 	.word	0x0800cd07
 800cc8c:	0800cd07 	.word	0x0800cd07
 800cc90:	0800ccc3 	.word	0x0800ccc3
 800cc94:	0800cced 	.word	0x0800cced
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	2b03      	cmp	r3, #3
 800cca2:	d107      	bne.n	800ccb4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cca4:	f107 030a 	add.w	r3, r7, #10
 800cca8:	2202      	movs	r2, #2
 800ccaa:	4619      	mov	r1, r3
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f001 fd33 	bl	800e718 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ccb2:	e032      	b.n	800cd1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ccb4:	6839      	ldr	r1, [r7, #0]
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f001 fcbd 	bl	800e636 <USBD_CtlError>
            ret = USBD_FAIL;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	75fb      	strb	r3, [r7, #23]
          break;
 800ccc0:	e02b      	b.n	800cd1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b03      	cmp	r3, #3
 800cccc:	d107      	bne.n	800ccde <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ccce:	f107 030d 	add.w	r3, r7, #13
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f001 fd1e 	bl	800e718 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ccdc:	e01d      	b.n	800cd1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ccde:	6839      	ldr	r1, [r7, #0]
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f001 fca8 	bl	800e636 <USBD_CtlError>
            ret = USBD_FAIL;
 800cce6:	2303      	movs	r3, #3
 800cce8:	75fb      	strb	r3, [r7, #23]
          break;
 800ccea:	e016      	b.n	800cd1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	2b03      	cmp	r3, #3
 800ccf6:	d00f      	beq.n	800cd18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ccf8:	6839      	ldr	r1, [r7, #0]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f001 fc9b 	bl	800e636 <USBD_CtlError>
            ret = USBD_FAIL;
 800cd00:	2303      	movs	r3, #3
 800cd02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cd04:	e008      	b.n	800cd18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cd06:	6839      	ldr	r1, [r7, #0]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f001 fc94 	bl	800e636 <USBD_CtlError>
          ret = USBD_FAIL;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	75fb      	strb	r3, [r7, #23]
          break;
 800cd12:	e002      	b.n	800cd1a <USBD_CDC_Setup+0x19e>
          break;
 800cd14:	bf00      	nop
 800cd16:	e008      	b.n	800cd2a <USBD_CDC_Setup+0x1ae>
          break;
 800cd18:	bf00      	nop
      }
      break;
 800cd1a:	e006      	b.n	800cd2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cd1c:	6839      	ldr	r1, [r7, #0]
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f001 fc89 	bl	800e636 <USBD_CtlError>
      ret = USBD_FAIL;
 800cd24:	2303      	movs	r3, #3
 800cd26:	75fb      	strb	r3, [r7, #23]
      break;
 800cd28:	bf00      	nop
  }

  return (uint8_t)ret;
 800cd2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3718      	adds	r7, #24
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cd46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	32b0      	adds	r2, #176	; 0xb0
 800cd52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d101      	bne.n	800cd5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	e065      	b.n	800ce2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	32b0      	adds	r2, #176	; 0xb0
 800cd68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cd6e:	78fb      	ldrb	r3, [r7, #3]
 800cd70:	f003 020f 	and.w	r2, r3, #15
 800cd74:	6879      	ldr	r1, [r7, #4]
 800cd76:	4613      	mov	r3, r2
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4413      	add	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	440b      	add	r3, r1
 800cd80:	3318      	adds	r3, #24
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d02f      	beq.n	800cde8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cd88:	78fb      	ldrb	r3, [r7, #3]
 800cd8a:	f003 020f 	and.w	r2, r3, #15
 800cd8e:	6879      	ldr	r1, [r7, #4]
 800cd90:	4613      	mov	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	4413      	add	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	440b      	add	r3, r1
 800cd9a:	3318      	adds	r3, #24
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	78fb      	ldrb	r3, [r7, #3]
 800cda0:	f003 010f 	and.w	r1, r3, #15
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	460b      	mov	r3, r1
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	440b      	add	r3, r1
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	4403      	add	r3, r0
 800cdb0:	331c      	adds	r3, #28
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	fbb2 f1f3 	udiv	r1, r2, r3
 800cdb8:	fb01 f303 	mul.w	r3, r1, r3
 800cdbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d112      	bne.n	800cde8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cdc2:	78fb      	ldrb	r3, [r7, #3]
 800cdc4:	f003 020f 	and.w	r2, r3, #15
 800cdc8:	6879      	ldr	r1, [r7, #4]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	4413      	add	r3, r2
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	440b      	add	r3, r1
 800cdd4:	3318      	adds	r3, #24
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cdda:	78f9      	ldrb	r1, [r7, #3]
 800cddc:	2300      	movs	r3, #0
 800cdde:	2200      	movs	r2, #0
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f002 f9a2 	bl	800f12a <USBD_LL_Transmit>
 800cde6:	e01f      	b.n	800ce28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	33b0      	adds	r3, #176	; 0xb0
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	4413      	add	r3, r2
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d010      	beq.n	800ce28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	33b0      	adds	r3, #176	; 0xb0
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	4413      	add	r3, r2
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	691b      	ldr	r3, [r3, #16]
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ce1e:	68ba      	ldr	r2, [r7, #8]
 800ce20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ce24:	78fa      	ldrb	r2, [r7, #3]
 800ce26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b084      	sub	sp, #16
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	32b0      	adds	r2, #176	; 0xb0
 800ce48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	32b0      	adds	r2, #176	; 0xb0
 800ce58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d101      	bne.n	800ce64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ce60:	2303      	movs	r3, #3
 800ce62:	e01a      	b.n	800ce9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ce64:	78fb      	ldrb	r3, [r7, #3]
 800ce66:	4619      	mov	r1, r3
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f002 f9a0 	bl	800f1ae <USBD_LL_GetRxDataSize>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	33b0      	adds	r3, #176	; 0xb0
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	4413      	add	r3, r2
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	68fa      	ldr	r2, [r7, #12]
 800ce8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ce8e:	68fa      	ldr	r2, [r7, #12]
 800ce90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ce94:	4611      	mov	r1, r2
 800ce96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b084      	sub	sp, #16
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	32b0      	adds	r2, #176	; 0xb0
 800ceb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d101      	bne.n	800cec4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cec0:	2303      	movs	r3, #3
 800cec2:	e025      	b.n	800cf10 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	33b0      	adds	r3, #176	; 0xb0
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	4413      	add	r3, r2
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d01a      	beq.n	800cf0e <USBD_CDC_EP0_RxReady+0x6c>
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cede:	2bff      	cmp	r3, #255	; 0xff
 800cee0:	d015      	beq.n	800cf0e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	33b0      	adds	r3, #176	; 0xb0
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4413      	add	r3, r2
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	68fa      	ldr	r2, [r7, #12]
 800cef6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800cefa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cf02:	b292      	uxth	r2, r2
 800cf04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	22ff      	movs	r2, #255	; 0xff
 800cf0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cf0e:	2300      	movs	r3, #0
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3710      	adds	r7, #16
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cf20:	2182      	movs	r1, #130	; 0x82
 800cf22:	4818      	ldr	r0, [pc, #96]	; (800cf84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cf24:	f000 fd4f 	bl	800d9c6 <USBD_GetEpDesc>
 800cf28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cf2a:	2101      	movs	r1, #1
 800cf2c:	4815      	ldr	r0, [pc, #84]	; (800cf84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cf2e:	f000 fd4a 	bl	800d9c6 <USBD_GetEpDesc>
 800cf32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cf34:	2181      	movs	r1, #129	; 0x81
 800cf36:	4813      	ldr	r0, [pc, #76]	; (800cf84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cf38:	f000 fd45 	bl	800d9c6 <USBD_GetEpDesc>
 800cf3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	2210      	movs	r2, #16
 800cf48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d006      	beq.n	800cf5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	2200      	movs	r2, #0
 800cf54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf58:	711a      	strb	r2, [r3, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d006      	beq.n	800cf72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf6c:	711a      	strb	r2, [r3, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2243      	movs	r2, #67	; 0x43
 800cf76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cf78:	4b02      	ldr	r3, [pc, #8]	; (800cf84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3718      	adds	r7, #24
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	200000dc 	.word	0x200000dc

0800cf88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b086      	sub	sp, #24
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cf90:	2182      	movs	r1, #130	; 0x82
 800cf92:	4818      	ldr	r0, [pc, #96]	; (800cff4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cf94:	f000 fd17 	bl	800d9c6 <USBD_GetEpDesc>
 800cf98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cf9a:	2101      	movs	r1, #1
 800cf9c:	4815      	ldr	r0, [pc, #84]	; (800cff4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cf9e:	f000 fd12 	bl	800d9c6 <USBD_GetEpDesc>
 800cfa2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cfa4:	2181      	movs	r1, #129	; 0x81
 800cfa6:	4813      	ldr	r0, [pc, #76]	; (800cff4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cfa8:	f000 fd0d 	bl	800d9c6 <USBD_GetEpDesc>
 800cfac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	2210      	movs	r2, #16
 800cfb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d006      	beq.n	800cfce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	711a      	strb	r2, [r3, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	f042 0202 	orr.w	r2, r2, #2
 800cfcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d006      	beq.n	800cfe2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	711a      	strb	r2, [r3, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f042 0202 	orr.w	r2, r2, #2
 800cfe0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2243      	movs	r2, #67	; 0x43
 800cfe6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cfe8:	4b02      	ldr	r3, [pc, #8]	; (800cff4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3718      	adds	r7, #24
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	200000dc 	.word	0x200000dc

0800cff8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b086      	sub	sp, #24
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d000:	2182      	movs	r1, #130	; 0x82
 800d002:	4818      	ldr	r0, [pc, #96]	; (800d064 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d004:	f000 fcdf 	bl	800d9c6 <USBD_GetEpDesc>
 800d008:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d00a:	2101      	movs	r1, #1
 800d00c:	4815      	ldr	r0, [pc, #84]	; (800d064 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d00e:	f000 fcda 	bl	800d9c6 <USBD_GetEpDesc>
 800d012:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d014:	2181      	movs	r1, #129	; 0x81
 800d016:	4813      	ldr	r0, [pc, #76]	; (800d064 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d018:	f000 fcd5 	bl	800d9c6 <USBD_GetEpDesc>
 800d01c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d002      	beq.n	800d02a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	2210      	movs	r2, #16
 800d028:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d006      	beq.n	800d03e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	2200      	movs	r2, #0
 800d034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d038:	711a      	strb	r2, [r3, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d006      	beq.n	800d052 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2200      	movs	r2, #0
 800d048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d04c:	711a      	strb	r2, [r3, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2243      	movs	r2, #67	; 0x43
 800d056:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d058:	4b02      	ldr	r3, [pc, #8]	; (800d064 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3718      	adds	r7, #24
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	200000dc 	.word	0x200000dc

0800d068 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	220a      	movs	r2, #10
 800d074:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d076:	4b03      	ldr	r3, [pc, #12]	; (800d084 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d078:	4618      	mov	r0, r3
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr
 800d084:	20000098 	.word	0x20000098

0800d088 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d101      	bne.n	800d09c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d098:	2303      	movs	r3, #3
 800d09a:	e009      	b.n	800d0b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	33b0      	adds	r3, #176	; 0xb0
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	4413      	add	r3, r2
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b087      	sub	sp, #28
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	32b0      	adds	r2, #176	; 0xb0
 800d0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d101      	bne.n	800d0e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d0de:	2303      	movs	r3, #3
 800d0e0:	e008      	b.n	800d0f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	68ba      	ldr	r2, [r7, #8]
 800d0e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d0f2:	2300      	movs	r3, #0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	371c      	adds	r7, #28
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr

0800d100 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	32b0      	adds	r2, #176	; 0xb0
 800d114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d118:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d101      	bne.n	800d124 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d120:	2303      	movs	r3, #3
 800d122:	e004      	b.n	800d12e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	683a      	ldr	r2, [r7, #0]
 800d128:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3714      	adds	r7, #20
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
	...

0800d13c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	32b0      	adds	r2, #176	; 0xb0
 800d14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d152:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d154:	2301      	movs	r3, #1
 800d156:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d15e:	2303      	movs	r3, #3
 800d160:	e025      	b.n	800d1ae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d11f      	bne.n	800d1ac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	2201      	movs	r2, #1
 800d170:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d174:	4b10      	ldr	r3, [pc, #64]	; (800d1b8 <USBD_CDC_TransmitPacket+0x7c>)
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	f003 020f 	and.w	r2, r3, #15
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	4613      	mov	r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	4413      	add	r3, r2
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	4403      	add	r3, r0
 800d18e:	3318      	adds	r3, #24
 800d190:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d192:	4b09      	ldr	r3, [pc, #36]	; (800d1b8 <USBD_CDC_TransmitPacket+0x7c>)
 800d194:	7819      	ldrb	r1, [r3, #0]
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f001 ffc1 	bl	800f12a <USBD_LL_Transmit>

    ret = USBD_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	2000011f 	.word	0x2000011f

0800d1bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	32b0      	adds	r2, #176	; 0xb0
 800d1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	32b0      	adds	r2, #176	; 0xb0
 800d1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d101      	bne.n	800d1ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d1e6:	2303      	movs	r3, #3
 800d1e8:	e018      	b.n	800d21c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	7c1b      	ldrb	r3, [r3, #16]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d10a      	bne.n	800d208 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d1f2:	4b0c      	ldr	r3, [pc, #48]	; (800d224 <USBD_CDC_ReceivePacket+0x68>)
 800d1f4:	7819      	ldrb	r1, [r3, #0]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d1fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f001 ffb3 	bl	800f16c <USBD_LL_PrepareReceive>
 800d206:	e008      	b.n	800d21a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d208:	4b06      	ldr	r3, [pc, #24]	; (800d224 <USBD_CDC_ReceivePacket+0x68>)
 800d20a:	7819      	ldrb	r1, [r3, #0]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d212:	2340      	movs	r3, #64	; 0x40
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f001 ffa9 	bl	800f16c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d21a:	2300      	movs	r3, #0
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	20000120 	.word	0x20000120

0800d228 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b086      	sub	sp, #24
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	4613      	mov	r3, r2
 800d234:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d101      	bne.n	800d240 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d23c:	2303      	movs	r3, #3
 800d23e:	e01f      	b.n	800d280 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2200      	movs	r2, #0
 800d244:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2200      	movs	r2, #0
 800d24c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2200      	movs	r2, #0
 800d254:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d003      	beq.n	800d266 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	68ba      	ldr	r2, [r7, #8]
 800d262:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2201      	movs	r2, #1
 800d26a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	79fa      	ldrb	r2, [r7, #7]
 800d272:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f001 fe1d 	bl	800eeb4 <USBD_LL_Init>
 800d27a:	4603      	mov	r3, r0
 800d27c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d27e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3718      	adds	r7, #24
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d292:	2300      	movs	r3, #0
 800d294:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d101      	bne.n	800d2a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d29c:	2303      	movs	r3, #3
 800d29e:	e025      	b.n	800d2ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	683a      	ldr	r2, [r7, #0]
 800d2a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	32ae      	adds	r2, #174	; 0xae
 800d2b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00f      	beq.n	800d2dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	32ae      	adds	r2, #174	; 0xae
 800d2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2cc:	f107 020e 	add.w	r2, r7, #14
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	4798      	blx	r3
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d2e2:	1c5a      	adds	r2, r3, #1
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f001 fe2b 	bl	800ef58 <USBD_LL_Start>
 800d302:	4603      	mov	r3, r0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d314:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d316:	4618      	mov	r0, r3
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr

0800d322 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d322:	b580      	push	{r7, lr}
 800d324:	b084      	sub	sp, #16
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
 800d32a:	460b      	mov	r3, r1
 800d32c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d32e:	2300      	movs	r3, #0
 800d330:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d009      	beq.n	800d350 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	78fa      	ldrb	r2, [r7, #3]
 800d346:	4611      	mov	r1, r2
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	4798      	blx	r3
 800d34c:	4603      	mov	r3, r0
 800d34e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d350:	7bfb      	ldrb	r3, [r7, #15]
}
 800d352:	4618      	mov	r0, r3
 800d354:	3710      	adds	r7, #16
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b084      	sub	sp, #16
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
 800d362:	460b      	mov	r3, r1
 800d364:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d366:	2300      	movs	r3, #0
 800d368:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	78fa      	ldrb	r2, [r7, #3]
 800d374:	4611      	mov	r1, r2
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	4798      	blx	r3
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d001      	beq.n	800d384 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d380:	2303      	movs	r3, #3
 800d382:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d384:	7bfb      	ldrb	r3, [r7, #15]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d38e:	b580      	push	{r7, lr}
 800d390:	b084      	sub	sp, #16
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
 800d396:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d39e:	6839      	ldr	r1, [r7, #0]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f001 f90e 	bl	800e5c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d3c2:	f003 031f 	and.w	r3, r3, #31
 800d3c6:	2b02      	cmp	r3, #2
 800d3c8:	d01a      	beq.n	800d400 <USBD_LL_SetupStage+0x72>
 800d3ca:	2b02      	cmp	r3, #2
 800d3cc:	d822      	bhi.n	800d414 <USBD_LL_SetupStage+0x86>
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d002      	beq.n	800d3d8 <USBD_LL_SetupStage+0x4a>
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d00a      	beq.n	800d3ec <USBD_LL_SetupStage+0x5e>
 800d3d6:	e01d      	b.n	800d414 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d3de:	4619      	mov	r1, r3
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 fb65 	bl	800dab0 <USBD_StdDevReq>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	73fb      	strb	r3, [r7, #15]
      break;
 800d3ea:	e020      	b.n	800d42e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 fbcd 	bl	800db94 <USBD_StdItfReq>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	73fb      	strb	r3, [r7, #15]
      break;
 800d3fe:	e016      	b.n	800d42e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d406:	4619      	mov	r1, r3
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 fc2f 	bl	800dc6c <USBD_StdEPReq>
 800d40e:	4603      	mov	r3, r0
 800d410:	73fb      	strb	r3, [r7, #15]
      break;
 800d412:	e00c      	b.n	800d42e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d41a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	4619      	mov	r1, r3
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f001 fdf8 	bl	800f018 <USBD_LL_StallEP>
 800d428:	4603      	mov	r3, r0
 800d42a:	73fb      	strb	r3, [r7, #15]
      break;
 800d42c:	bf00      	nop
  }

  return ret;
 800d42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d430:	4618      	mov	r0, r3
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b086      	sub	sp, #24
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	460b      	mov	r3, r1
 800d442:	607a      	str	r2, [r7, #4]
 800d444:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d446:	2300      	movs	r3, #0
 800d448:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d44a:	7afb      	ldrb	r3, [r7, #11]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d16e      	bne.n	800d52e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d456:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d45e:	2b03      	cmp	r3, #3
 800d460:	f040 8098 	bne.w	800d594 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	689a      	ldr	r2, [r3, #8]
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d913      	bls.n	800d498 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	689a      	ldr	r2, [r3, #8]
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	1ad2      	subs	r2, r2, r3
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	68da      	ldr	r2, [r3, #12]
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	4293      	cmp	r3, r2
 800d488:	bf28      	it	cs
 800d48a:	4613      	movcs	r3, r2
 800d48c:	461a      	mov	r2, r3
 800d48e:	6879      	ldr	r1, [r7, #4]
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f001 f98a 	bl	800e7aa <USBD_CtlContinueRx>
 800d496:	e07d      	b.n	800d594 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d49e:	f003 031f 	and.w	r3, r3, #31
 800d4a2:	2b02      	cmp	r3, #2
 800d4a4:	d014      	beq.n	800d4d0 <USBD_LL_DataOutStage+0x98>
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d81d      	bhi.n	800d4e6 <USBD_LL_DataOutStage+0xae>
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d002      	beq.n	800d4b4 <USBD_LL_DataOutStage+0x7c>
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d003      	beq.n	800d4ba <USBD_LL_DataOutStage+0x82>
 800d4b2:	e018      	b.n	800d4e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	75bb      	strb	r3, [r7, #22]
            break;
 800d4b8:	e018      	b.n	800d4ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d4c0:	b2db      	uxtb	r3, r3
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f000 fa64 	bl	800d992 <USBD_CoreFindIF>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	75bb      	strb	r3, [r7, #22]
            break;
 800d4ce:	e00d      	b.n	800d4ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	4619      	mov	r1, r3
 800d4da:	68f8      	ldr	r0, [r7, #12]
 800d4dc:	f000 fa66 	bl	800d9ac <USBD_CoreFindEP>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	75bb      	strb	r3, [r7, #22]
            break;
 800d4e4:	e002      	b.n	800d4ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	75bb      	strb	r3, [r7, #22]
            break;
 800d4ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d4ec:	7dbb      	ldrb	r3, [r7, #22]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d119      	bne.n	800d526 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4f8:	b2db      	uxtb	r3, r3
 800d4fa:	2b03      	cmp	r3, #3
 800d4fc:	d113      	bne.n	800d526 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d4fe:	7dba      	ldrb	r2, [r7, #22]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	32ae      	adds	r2, #174	; 0xae
 800d504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d508:	691b      	ldr	r3, [r3, #16]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d00b      	beq.n	800d526 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d50e:	7dba      	ldrb	r2, [r7, #22]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d516:	7dba      	ldrb	r2, [r7, #22]
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	32ae      	adds	r2, #174	; 0xae
 800d51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d520:	691b      	ldr	r3, [r3, #16]
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f001 f950 	bl	800e7cc <USBD_CtlSendStatus>
 800d52c:	e032      	b.n	800d594 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d52e:	7afb      	ldrb	r3, [r7, #11]
 800d530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d534:	b2db      	uxtb	r3, r3
 800d536:	4619      	mov	r1, r3
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f000 fa37 	bl	800d9ac <USBD_CoreFindEP>
 800d53e:	4603      	mov	r3, r0
 800d540:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d542:	7dbb      	ldrb	r3, [r7, #22]
 800d544:	2bff      	cmp	r3, #255	; 0xff
 800d546:	d025      	beq.n	800d594 <USBD_LL_DataOutStage+0x15c>
 800d548:	7dbb      	ldrb	r3, [r7, #22]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d122      	bne.n	800d594 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d554:	b2db      	uxtb	r3, r3
 800d556:	2b03      	cmp	r3, #3
 800d558:	d117      	bne.n	800d58a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d55a:	7dba      	ldrb	r2, [r7, #22]
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	32ae      	adds	r2, #174	; 0xae
 800d560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d564:	699b      	ldr	r3, [r3, #24]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00f      	beq.n	800d58a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d56a:	7dba      	ldrb	r2, [r7, #22]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d572:	7dba      	ldrb	r2, [r7, #22]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	32ae      	adds	r2, #174	; 0xae
 800d578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d57c:	699b      	ldr	r3, [r3, #24]
 800d57e:	7afa      	ldrb	r2, [r7, #11]
 800d580:	4611      	mov	r1, r2
 800d582:	68f8      	ldr	r0, [r7, #12]
 800d584:	4798      	blx	r3
 800d586:	4603      	mov	r3, r0
 800d588:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d58a:	7dfb      	ldrb	r3, [r7, #23]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d001      	beq.n	800d594 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d590:	7dfb      	ldrb	r3, [r7, #23]
 800d592:	e000      	b.n	800d596 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3718      	adds	r7, #24
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b086      	sub	sp, #24
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	60f8      	str	r0, [r7, #12]
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	607a      	str	r2, [r7, #4]
 800d5aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d5ac:	7afb      	ldrb	r3, [r7, #11]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d16f      	bne.n	800d692 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	3314      	adds	r3, #20
 800d5b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d5be:	2b02      	cmp	r3, #2
 800d5c0:	d15a      	bne.n	800d678 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	689a      	ldr	r2, [r3, #8]
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d914      	bls.n	800d5f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	689a      	ldr	r2, [r3, #8]
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	1ad2      	subs	r2, r2, r3
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	6879      	ldr	r1, [r7, #4]
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f001 f8b2 	bl	800e74e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f001 fdbb 	bl	800f16c <USBD_LL_PrepareReceive>
 800d5f6:	e03f      	b.n	800d678 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	68da      	ldr	r2, [r3, #12]
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	429a      	cmp	r2, r3
 800d602:	d11c      	bne.n	800d63e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	685a      	ldr	r2, [r3, #4]
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d316      	bcc.n	800d63e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	685a      	ldr	r2, [r3, #4]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d20f      	bcs.n	800d63e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d61e:	2200      	movs	r2, #0
 800d620:	2100      	movs	r1, #0
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f001 f893 	bl	800e74e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d630:	2300      	movs	r3, #0
 800d632:	2200      	movs	r2, #0
 800d634:	2100      	movs	r1, #0
 800d636:	68f8      	ldr	r0, [r7, #12]
 800d638:	f001 fd98 	bl	800f16c <USBD_LL_PrepareReceive>
 800d63c:	e01c      	b.n	800d678 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d644:	b2db      	uxtb	r3, r3
 800d646:	2b03      	cmp	r3, #3
 800d648:	d10f      	bne.n	800d66a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d009      	beq.n	800d66a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2200      	movs	r2, #0
 800d65a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d664:	68db      	ldr	r3, [r3, #12]
 800d666:	68f8      	ldr	r0, [r7, #12]
 800d668:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d66a:	2180      	movs	r1, #128	; 0x80
 800d66c:	68f8      	ldr	r0, [r7, #12]
 800d66e:	f001 fcd3 	bl	800f018 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f001 f8bd 	bl	800e7f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d03a      	beq.n	800d6f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d682:	68f8      	ldr	r0, [r7, #12]
 800d684:	f7ff fe42 	bl	800d30c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2200      	movs	r2, #0
 800d68c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d690:	e032      	b.n	800d6f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d692:	7afb      	ldrb	r3, [r7, #11]
 800d694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	4619      	mov	r1, r3
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	f000 f985 	bl	800d9ac <USBD_CoreFindEP>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6a6:	7dfb      	ldrb	r3, [r7, #23]
 800d6a8:	2bff      	cmp	r3, #255	; 0xff
 800d6aa:	d025      	beq.n	800d6f8 <USBD_LL_DataInStage+0x15a>
 800d6ac:	7dfb      	ldrb	r3, [r7, #23]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d122      	bne.n	800d6f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	2b03      	cmp	r3, #3
 800d6bc:	d11c      	bne.n	800d6f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d6be:	7dfa      	ldrb	r2, [r7, #23]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	32ae      	adds	r2, #174	; 0xae
 800d6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6c8:	695b      	ldr	r3, [r3, #20]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d014      	beq.n	800d6f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d6ce:	7dfa      	ldrb	r2, [r7, #23]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d6d6:	7dfa      	ldrb	r2, [r7, #23]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	32ae      	adds	r2, #174	; 0xae
 800d6dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e0:	695b      	ldr	r3, [r3, #20]
 800d6e2:	7afa      	ldrb	r2, [r7, #11]
 800d6e4:	4611      	mov	r1, r2
 800d6e6:	68f8      	ldr	r0, [r7, #12]
 800d6e8:	4798      	blx	r3
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d6ee:	7dbb      	ldrb	r3, [r7, #22]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d001      	beq.n	800d6f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d6f4:	7dbb      	ldrb	r3, [r7, #22]
 800d6f6:	e000      	b.n	800d6fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3718      	adds	r7, #24
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d702:	b580      	push	{r7, lr}
 800d704:	b084      	sub	sp, #16
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d70a:	2300      	movs	r3, #0
 800d70c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2201      	movs	r2, #1
 800d712:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2200      	movs	r2, #0
 800d71a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d014      	beq.n	800d768 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00e      	beq.n	800d768 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	6852      	ldr	r2, [r2, #4]
 800d756:	b2d2      	uxtb	r2, r2
 800d758:	4611      	mov	r1, r2
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	4798      	blx	r3
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d001      	beq.n	800d768 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d764:	2303      	movs	r3, #3
 800d766:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d768:	2340      	movs	r3, #64	; 0x40
 800d76a:	2200      	movs	r2, #0
 800d76c:	2100      	movs	r1, #0
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f001 fc0d 	bl	800ef8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2201      	movs	r2, #1
 800d778:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2240      	movs	r2, #64	; 0x40
 800d780:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d784:	2340      	movs	r3, #64	; 0x40
 800d786:	2200      	movs	r2, #0
 800d788:	2180      	movs	r1, #128	; 0x80
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f001 fbff 	bl	800ef8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2240      	movs	r2, #64	; 0x40
 800d79a:	621a      	str	r2, [r3, #32]

  return ret;
 800d79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d7a6:	b480      	push	{r7}
 800d7a8:	b083      	sub	sp, #12
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	78fa      	ldrb	r2, [r7, #3]
 800d7b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	370c      	adds	r7, #12
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr

0800d7c6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d7c6:	b480      	push	{r7}
 800d7c8:	b083      	sub	sp, #12
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	2b04      	cmp	r3, #4
 800d7d8:	d006      	beq.n	800d7e8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7e0:	b2da      	uxtb	r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2204      	movs	r2, #4
 800d7ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d7fe:	b480      	push	{r7}
 800d800:	b083      	sub	sp, #12
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	2b04      	cmp	r3, #4
 800d810:	d106      	bne.n	800d820 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d818:	b2da      	uxtb	r2, r3
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d820:	2300      	movs	r3, #0
}
 800d822:	4618      	mov	r0, r3
 800d824:	370c      	adds	r7, #12
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b082      	sub	sp, #8
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	2b03      	cmp	r3, #3
 800d840:	d110      	bne.n	800d864 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00b      	beq.n	800d864 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d852:	69db      	ldr	r3, [r3, #28]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d005      	beq.n	800d864 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d85e:	69db      	ldr	r3, [r3, #28]
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3708      	adds	r7, #8
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b082      	sub	sp, #8
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	460b      	mov	r3, r1
 800d878:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	32ae      	adds	r2, #174	; 0xae
 800d884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d101      	bne.n	800d890 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d88c:	2303      	movs	r3, #3
 800d88e:	e01c      	b.n	800d8ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d896:	b2db      	uxtb	r3, r3
 800d898:	2b03      	cmp	r3, #3
 800d89a:	d115      	bne.n	800d8c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	32ae      	adds	r2, #174	; 0xae
 800d8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8aa:	6a1b      	ldr	r3, [r3, #32]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00b      	beq.n	800d8c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	32ae      	adds	r2, #174	; 0xae
 800d8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8be:	6a1b      	ldr	r3, [r3, #32]
 800d8c0:	78fa      	ldrb	r2, [r7, #3]
 800d8c2:	4611      	mov	r1, r2
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3708      	adds	r7, #8
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b082      	sub	sp, #8
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
 800d8da:	460b      	mov	r3, r1
 800d8dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	32ae      	adds	r2, #174	; 0xae
 800d8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d101      	bne.n	800d8f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d8f0:	2303      	movs	r3, #3
 800d8f2:	e01c      	b.n	800d92e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	2b03      	cmp	r3, #3
 800d8fe:	d115      	bne.n	800d92c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	32ae      	adds	r2, #174	; 0xae
 800d90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00b      	beq.n	800d92c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	32ae      	adds	r2, #174	; 0xae
 800d91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d924:	78fa      	ldrb	r2, [r7, #3]
 800d926:	4611      	mov	r1, r2
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d92c:	2300      	movs	r3, #0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d936:	b480      	push	{r7}
 800d938:	b083      	sub	sp, #12
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d93e:	2300      	movs	r3, #0
}
 800d940:	4618      	mov	r0, r3
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d954:	2300      	movs	r3, #0
 800d956:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2201      	movs	r2, #1
 800d95c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00e      	beq.n	800d988 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	6852      	ldr	r2, [r2, #4]
 800d976:	b2d2      	uxtb	r2, r2
 800d978:	4611      	mov	r1, r2
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	4798      	blx	r3
 800d97e:	4603      	mov	r3, r0
 800d980:	2b00      	cmp	r3, #0
 800d982:	d001      	beq.n	800d988 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d984:	2303      	movs	r3, #3
 800d986:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d988:	7bfb      	ldrb	r3, [r7, #15]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}

0800d992 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d992:	b480      	push	{r7}
 800d994:	b083      	sub	sp, #12
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
 800d99a:	460b      	mov	r3, r1
 800d99c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d99e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d9b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	370c      	adds	r7, #12
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr

0800d9c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b086      	sub	sp, #24
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	885b      	ldrh	r3, [r3, #2]
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d920      	bls.n	800da30 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d9f6:	e013      	b.n	800da20 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d9f8:	f107 030a 	add.w	r3, r7, #10
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	6978      	ldr	r0, [r7, #20]
 800da00:	f000 f81b 	bl	800da3a <USBD_GetNextDesc>
 800da04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	785b      	ldrb	r3, [r3, #1]
 800da0a:	2b05      	cmp	r3, #5
 800da0c:	d108      	bne.n	800da20 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	789b      	ldrb	r3, [r3, #2]
 800da16:	78fa      	ldrb	r2, [r7, #3]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d008      	beq.n	800da2e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800da1c:	2300      	movs	r3, #0
 800da1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	885b      	ldrh	r3, [r3, #2]
 800da24:	b29a      	uxth	r2, r3
 800da26:	897b      	ldrh	r3, [r7, #10]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d8e5      	bhi.n	800d9f8 <USBD_GetEpDesc+0x32>
 800da2c:	e000      	b.n	800da30 <USBD_GetEpDesc+0x6a>
          break;
 800da2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800da30:	693b      	ldr	r3, [r7, #16]
}
 800da32:	4618      	mov	r0, r3
 800da34:	3718      	adds	r7, #24
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800da3a:	b480      	push	{r7}
 800da3c:	b085      	sub	sp, #20
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
 800da42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	881a      	ldrh	r2, [r3, #0]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	b29b      	uxth	r3, r3
 800da52:	4413      	add	r3, r2
 800da54:	b29a      	uxth	r2, r3
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	461a      	mov	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	4413      	add	r3, r2
 800da64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800da66:	68fb      	ldr	r3, [r7, #12]
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3714      	adds	r7, #20
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800da74:	b480      	push	{r7}
 800da76:	b087      	sub	sp, #28
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	3301      	adds	r3, #1
 800da8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800da92:	8a3b      	ldrh	r3, [r7, #16]
 800da94:	021b      	lsls	r3, r3, #8
 800da96:	b21a      	sxth	r2, r3
 800da98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800da9c:	4313      	orrs	r3, r2
 800da9e:	b21b      	sxth	r3, r3
 800daa0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800daa2:	89fb      	ldrh	r3, [r7, #14]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	371c      	adds	r7, #28
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dac6:	2b40      	cmp	r3, #64	; 0x40
 800dac8:	d005      	beq.n	800dad6 <USBD_StdDevReq+0x26>
 800daca:	2b40      	cmp	r3, #64	; 0x40
 800dacc:	d857      	bhi.n	800db7e <USBD_StdDevReq+0xce>
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00f      	beq.n	800daf2 <USBD_StdDevReq+0x42>
 800dad2:	2b20      	cmp	r3, #32
 800dad4:	d153      	bne.n	800db7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	32ae      	adds	r2, #174	; 0xae
 800dae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	6839      	ldr	r1, [r7, #0]
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	4798      	blx	r3
 800daec:	4603      	mov	r3, r0
 800daee:	73fb      	strb	r3, [r7, #15]
      break;
 800daf0:	e04a      	b.n	800db88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	785b      	ldrb	r3, [r3, #1]
 800daf6:	2b09      	cmp	r3, #9
 800daf8:	d83b      	bhi.n	800db72 <USBD_StdDevReq+0xc2>
 800dafa:	a201      	add	r2, pc, #4	; (adr r2, 800db00 <USBD_StdDevReq+0x50>)
 800dafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db00:	0800db55 	.word	0x0800db55
 800db04:	0800db69 	.word	0x0800db69
 800db08:	0800db73 	.word	0x0800db73
 800db0c:	0800db5f 	.word	0x0800db5f
 800db10:	0800db73 	.word	0x0800db73
 800db14:	0800db33 	.word	0x0800db33
 800db18:	0800db29 	.word	0x0800db29
 800db1c:	0800db73 	.word	0x0800db73
 800db20:	0800db4b 	.word	0x0800db4b
 800db24:	0800db3d 	.word	0x0800db3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800db28:	6839      	ldr	r1, [r7, #0]
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 fa3c 	bl	800dfa8 <USBD_GetDescriptor>
          break;
 800db30:	e024      	b.n	800db7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800db32:	6839      	ldr	r1, [r7, #0]
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f000 fba1 	bl	800e27c <USBD_SetAddress>
          break;
 800db3a:	e01f      	b.n	800db7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800db3c:	6839      	ldr	r1, [r7, #0]
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 fbe0 	bl	800e304 <USBD_SetConfig>
 800db44:	4603      	mov	r3, r0
 800db46:	73fb      	strb	r3, [r7, #15]
          break;
 800db48:	e018      	b.n	800db7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800db4a:	6839      	ldr	r1, [r7, #0]
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 fc83 	bl	800e458 <USBD_GetConfig>
          break;
 800db52:	e013      	b.n	800db7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800db54:	6839      	ldr	r1, [r7, #0]
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 fcb4 	bl	800e4c4 <USBD_GetStatus>
          break;
 800db5c:	e00e      	b.n	800db7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800db5e:	6839      	ldr	r1, [r7, #0]
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 fce3 	bl	800e52c <USBD_SetFeature>
          break;
 800db66:	e009      	b.n	800db7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800db68:	6839      	ldr	r1, [r7, #0]
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 fd07 	bl	800e57e <USBD_ClrFeature>
          break;
 800db70:	e004      	b.n	800db7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800db72:	6839      	ldr	r1, [r7, #0]
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f000 fd5e 	bl	800e636 <USBD_CtlError>
          break;
 800db7a:	bf00      	nop
      }
      break;
 800db7c:	e004      	b.n	800db88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800db7e:	6839      	ldr	r1, [r7, #0]
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f000 fd58 	bl	800e636 <USBD_CtlError>
      break;
 800db86:	bf00      	nop
  }

  return ret;
 800db88:	7bfb      	ldrb	r3, [r7, #15]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop

0800db94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db9e:	2300      	movs	r3, #0
 800dba0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dbaa:	2b40      	cmp	r3, #64	; 0x40
 800dbac:	d005      	beq.n	800dbba <USBD_StdItfReq+0x26>
 800dbae:	2b40      	cmp	r3, #64	; 0x40
 800dbb0:	d852      	bhi.n	800dc58 <USBD_StdItfReq+0xc4>
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d001      	beq.n	800dbba <USBD_StdItfReq+0x26>
 800dbb6:	2b20      	cmp	r3, #32
 800dbb8:	d14e      	bne.n	800dc58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	3b01      	subs	r3, #1
 800dbc4:	2b02      	cmp	r3, #2
 800dbc6:	d840      	bhi.n	800dc4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	889b      	ldrh	r3, [r3, #4]
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	d836      	bhi.n	800dc40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	889b      	ldrh	r3, [r3, #4]
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	4619      	mov	r1, r3
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f7ff fed9 	bl	800d992 <USBD_CoreFindIF>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dbe4:	7bbb      	ldrb	r3, [r7, #14]
 800dbe6:	2bff      	cmp	r3, #255	; 0xff
 800dbe8:	d01d      	beq.n	800dc26 <USBD_StdItfReq+0x92>
 800dbea:	7bbb      	ldrb	r3, [r7, #14]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d11a      	bne.n	800dc26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dbf0:	7bba      	ldrb	r2, [r7, #14]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	32ae      	adds	r2, #174	; 0xae
 800dbf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbfa:	689b      	ldr	r3, [r3, #8]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00f      	beq.n	800dc20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dc00:	7bba      	ldrb	r2, [r7, #14]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dc08:	7bba      	ldrb	r2, [r7, #14]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	32ae      	adds	r2, #174	; 0xae
 800dc0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	6839      	ldr	r1, [r7, #0]
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	4798      	blx	r3
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dc1e:	e004      	b.n	800dc2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dc20:	2303      	movs	r3, #3
 800dc22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dc24:	e001      	b.n	800dc2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dc26:	2303      	movs	r3, #3
 800dc28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	88db      	ldrh	r3, [r3, #6]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d110      	bne.n	800dc54 <USBD_StdItfReq+0xc0>
 800dc32:	7bfb      	ldrb	r3, [r7, #15]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d10d      	bne.n	800dc54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 fdc7 	bl	800e7cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dc3e:	e009      	b.n	800dc54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dc40:	6839      	ldr	r1, [r7, #0]
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 fcf7 	bl	800e636 <USBD_CtlError>
          break;
 800dc48:	e004      	b.n	800dc54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dc4a:	6839      	ldr	r1, [r7, #0]
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 fcf2 	bl	800e636 <USBD_CtlError>
          break;
 800dc52:	e000      	b.n	800dc56 <USBD_StdItfReq+0xc2>
          break;
 800dc54:	bf00      	nop
      }
      break;
 800dc56:	e004      	b.n	800dc62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dc58:	6839      	ldr	r1, [r7, #0]
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 fceb 	bl	800e636 <USBD_CtlError>
      break;
 800dc60:	bf00      	nop
  }

  return ret;
 800dc62:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3710      	adds	r7, #16
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc76:	2300      	movs	r3, #0
 800dc78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	889b      	ldrh	r3, [r3, #4]
 800dc7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc88:	2b40      	cmp	r3, #64	; 0x40
 800dc8a:	d007      	beq.n	800dc9c <USBD_StdEPReq+0x30>
 800dc8c:	2b40      	cmp	r3, #64	; 0x40
 800dc8e:	f200 817f 	bhi.w	800df90 <USBD_StdEPReq+0x324>
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d02a      	beq.n	800dcec <USBD_StdEPReq+0x80>
 800dc96:	2b20      	cmp	r3, #32
 800dc98:	f040 817a 	bne.w	800df90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dc9c:	7bbb      	ldrb	r3, [r7, #14]
 800dc9e:	4619      	mov	r1, r3
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f7ff fe83 	bl	800d9ac <USBD_CoreFindEP>
 800dca6:	4603      	mov	r3, r0
 800dca8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dcaa:	7b7b      	ldrb	r3, [r7, #13]
 800dcac:	2bff      	cmp	r3, #255	; 0xff
 800dcae:	f000 8174 	beq.w	800df9a <USBD_StdEPReq+0x32e>
 800dcb2:	7b7b      	ldrb	r3, [r7, #13]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f040 8170 	bne.w	800df9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800dcba:	7b7a      	ldrb	r2, [r7, #13]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800dcc2:	7b7a      	ldrb	r2, [r7, #13]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	32ae      	adds	r2, #174	; 0xae
 800dcc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	f000 8163 	beq.w	800df9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800dcd4:	7b7a      	ldrb	r2, [r7, #13]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	32ae      	adds	r2, #174	; 0xae
 800dcda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	6839      	ldr	r1, [r7, #0]
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	4798      	blx	r3
 800dce6:	4603      	mov	r3, r0
 800dce8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800dcea:	e156      	b.n	800df9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	785b      	ldrb	r3, [r3, #1]
 800dcf0:	2b03      	cmp	r3, #3
 800dcf2:	d008      	beq.n	800dd06 <USBD_StdEPReq+0x9a>
 800dcf4:	2b03      	cmp	r3, #3
 800dcf6:	f300 8145 	bgt.w	800df84 <USBD_StdEPReq+0x318>
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f000 809b 	beq.w	800de36 <USBD_StdEPReq+0x1ca>
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d03c      	beq.n	800dd7e <USBD_StdEPReq+0x112>
 800dd04:	e13e      	b.n	800df84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	2b02      	cmp	r3, #2
 800dd10:	d002      	beq.n	800dd18 <USBD_StdEPReq+0xac>
 800dd12:	2b03      	cmp	r3, #3
 800dd14:	d016      	beq.n	800dd44 <USBD_StdEPReq+0xd8>
 800dd16:	e02c      	b.n	800dd72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd18:	7bbb      	ldrb	r3, [r7, #14]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00d      	beq.n	800dd3a <USBD_StdEPReq+0xce>
 800dd1e:	7bbb      	ldrb	r3, [r7, #14]
 800dd20:	2b80      	cmp	r3, #128	; 0x80
 800dd22:	d00a      	beq.n	800dd3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd24:	7bbb      	ldrb	r3, [r7, #14]
 800dd26:	4619      	mov	r1, r3
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f001 f975 	bl	800f018 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd2e:	2180      	movs	r1, #128	; 0x80
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f001 f971 	bl	800f018 <USBD_LL_StallEP>
 800dd36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dd38:	e020      	b.n	800dd7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dd3a:	6839      	ldr	r1, [r7, #0]
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 fc7a 	bl	800e636 <USBD_CtlError>
              break;
 800dd42:	e01b      	b.n	800dd7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	885b      	ldrh	r3, [r3, #2]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d10e      	bne.n	800dd6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dd4c:	7bbb      	ldrb	r3, [r7, #14]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d00b      	beq.n	800dd6a <USBD_StdEPReq+0xfe>
 800dd52:	7bbb      	ldrb	r3, [r7, #14]
 800dd54:	2b80      	cmp	r3, #128	; 0x80
 800dd56:	d008      	beq.n	800dd6a <USBD_StdEPReq+0xfe>
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	88db      	ldrh	r3, [r3, #6]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d104      	bne.n	800dd6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd60:	7bbb      	ldrb	r3, [r7, #14]
 800dd62:	4619      	mov	r1, r3
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f001 f957 	bl	800f018 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 fd2e 	bl	800e7cc <USBD_CtlSendStatus>

              break;
 800dd70:	e004      	b.n	800dd7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dd72:	6839      	ldr	r1, [r7, #0]
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 fc5e 	bl	800e636 <USBD_CtlError>
              break;
 800dd7a:	bf00      	nop
          }
          break;
 800dd7c:	e107      	b.n	800df8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	2b02      	cmp	r3, #2
 800dd88:	d002      	beq.n	800dd90 <USBD_StdEPReq+0x124>
 800dd8a:	2b03      	cmp	r3, #3
 800dd8c:	d016      	beq.n	800ddbc <USBD_StdEPReq+0x150>
 800dd8e:	e04b      	b.n	800de28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd90:	7bbb      	ldrb	r3, [r7, #14]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00d      	beq.n	800ddb2 <USBD_StdEPReq+0x146>
 800dd96:	7bbb      	ldrb	r3, [r7, #14]
 800dd98:	2b80      	cmp	r3, #128	; 0x80
 800dd9a:	d00a      	beq.n	800ddb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd9c:	7bbb      	ldrb	r3, [r7, #14]
 800dd9e:	4619      	mov	r1, r3
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f001 f939 	bl	800f018 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dda6:	2180      	movs	r1, #128	; 0x80
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f001 f935 	bl	800f018 <USBD_LL_StallEP>
 800ddae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ddb0:	e040      	b.n	800de34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ddb2:	6839      	ldr	r1, [r7, #0]
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f000 fc3e 	bl	800e636 <USBD_CtlError>
              break;
 800ddba:	e03b      	b.n	800de34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	885b      	ldrh	r3, [r3, #2]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d136      	bne.n	800de32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ddc4:	7bbb      	ldrb	r3, [r7, #14]
 800ddc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d004      	beq.n	800ddd8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ddce:	7bbb      	ldrb	r3, [r7, #14]
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f001 f93f 	bl	800f056 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 fcf7 	bl	800e7cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ddde:	7bbb      	ldrb	r3, [r7, #14]
 800dde0:	4619      	mov	r1, r3
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff fde2 	bl	800d9ac <USBD_CoreFindEP>
 800dde8:	4603      	mov	r3, r0
 800ddea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ddec:	7b7b      	ldrb	r3, [r7, #13]
 800ddee:	2bff      	cmp	r3, #255	; 0xff
 800ddf0:	d01f      	beq.n	800de32 <USBD_StdEPReq+0x1c6>
 800ddf2:	7b7b      	ldrb	r3, [r7, #13]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d11c      	bne.n	800de32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ddf8:	7b7a      	ldrb	r2, [r7, #13]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800de00:	7b7a      	ldrb	r2, [r7, #13]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	32ae      	adds	r2, #174	; 0xae
 800de06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de0a:	689b      	ldr	r3, [r3, #8]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d010      	beq.n	800de32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800de10:	7b7a      	ldrb	r2, [r7, #13]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	32ae      	adds	r2, #174	; 0xae
 800de16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de1a:	689b      	ldr	r3, [r3, #8]
 800de1c:	6839      	ldr	r1, [r7, #0]
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	4798      	blx	r3
 800de22:	4603      	mov	r3, r0
 800de24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800de26:	e004      	b.n	800de32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800de28:	6839      	ldr	r1, [r7, #0]
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 fc03 	bl	800e636 <USBD_CtlError>
              break;
 800de30:	e000      	b.n	800de34 <USBD_StdEPReq+0x1c8>
              break;
 800de32:	bf00      	nop
          }
          break;
 800de34:	e0ab      	b.n	800df8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d002      	beq.n	800de48 <USBD_StdEPReq+0x1dc>
 800de42:	2b03      	cmp	r3, #3
 800de44:	d032      	beq.n	800deac <USBD_StdEPReq+0x240>
 800de46:	e097      	b.n	800df78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de48:	7bbb      	ldrb	r3, [r7, #14]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d007      	beq.n	800de5e <USBD_StdEPReq+0x1f2>
 800de4e:	7bbb      	ldrb	r3, [r7, #14]
 800de50:	2b80      	cmp	r3, #128	; 0x80
 800de52:	d004      	beq.n	800de5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800de54:	6839      	ldr	r1, [r7, #0]
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 fbed 	bl	800e636 <USBD_CtlError>
                break;
 800de5c:	e091      	b.n	800df82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de62:	2b00      	cmp	r3, #0
 800de64:	da0b      	bge.n	800de7e <USBD_StdEPReq+0x212>
 800de66:	7bbb      	ldrb	r3, [r7, #14]
 800de68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de6c:	4613      	mov	r3, r2
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	4413      	add	r3, r2
 800de72:	009b      	lsls	r3, r3, #2
 800de74:	3310      	adds	r3, #16
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	4413      	add	r3, r2
 800de7a:	3304      	adds	r3, #4
 800de7c:	e00b      	b.n	800de96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de7e:	7bbb      	ldrb	r3, [r7, #14]
 800de80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de84:	4613      	mov	r3, r2
 800de86:	009b      	lsls	r3, r3, #2
 800de88:	4413      	add	r3, r2
 800de8a:	009b      	lsls	r3, r3, #2
 800de8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	4413      	add	r3, r2
 800de94:	3304      	adds	r3, #4
 800de96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	2200      	movs	r2, #0
 800de9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	2202      	movs	r2, #2
 800dea2:	4619      	mov	r1, r3
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fc37 	bl	800e718 <USBD_CtlSendData>
              break;
 800deaa:	e06a      	b.n	800df82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800deac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	da11      	bge.n	800ded8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800deb4:	7bbb      	ldrb	r3, [r7, #14]
 800deb6:	f003 020f 	and.w	r2, r3, #15
 800deba:	6879      	ldr	r1, [r7, #4]
 800debc:	4613      	mov	r3, r2
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	4413      	add	r3, r2
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	440b      	add	r3, r1
 800dec6:	3324      	adds	r3, #36	; 0x24
 800dec8:	881b      	ldrh	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d117      	bne.n	800defe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dece:	6839      	ldr	r1, [r7, #0]
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 fbb0 	bl	800e636 <USBD_CtlError>
                  break;
 800ded6:	e054      	b.n	800df82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ded8:	7bbb      	ldrb	r3, [r7, #14]
 800deda:	f003 020f 	and.w	r2, r3, #15
 800dede:	6879      	ldr	r1, [r7, #4]
 800dee0:	4613      	mov	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	4413      	add	r3, r2
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	440b      	add	r3, r1
 800deea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800deee:	881b      	ldrh	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d104      	bne.n	800defe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800def4:	6839      	ldr	r1, [r7, #0]
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f000 fb9d 	bl	800e636 <USBD_CtlError>
                  break;
 800defc:	e041      	b.n	800df82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800defe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df02:	2b00      	cmp	r3, #0
 800df04:	da0b      	bge.n	800df1e <USBD_StdEPReq+0x2b2>
 800df06:	7bbb      	ldrb	r3, [r7, #14]
 800df08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df0c:	4613      	mov	r3, r2
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	4413      	add	r3, r2
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	3310      	adds	r3, #16
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	4413      	add	r3, r2
 800df1a:	3304      	adds	r3, #4
 800df1c:	e00b      	b.n	800df36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df1e:	7bbb      	ldrb	r3, [r7, #14]
 800df20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df24:	4613      	mov	r3, r2
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	4413      	add	r3, r2
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	4413      	add	r3, r2
 800df34:	3304      	adds	r3, #4
 800df36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800df38:	7bbb      	ldrb	r3, [r7, #14]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d002      	beq.n	800df44 <USBD_StdEPReq+0x2d8>
 800df3e:	7bbb      	ldrb	r3, [r7, #14]
 800df40:	2b80      	cmp	r3, #128	; 0x80
 800df42:	d103      	bne.n	800df4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	2200      	movs	r2, #0
 800df48:	601a      	str	r2, [r3, #0]
 800df4a:	e00e      	b.n	800df6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800df4c:	7bbb      	ldrb	r3, [r7, #14]
 800df4e:	4619      	mov	r1, r3
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f001 f89f 	bl	800f094 <USBD_LL_IsStallEP>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d003      	beq.n	800df64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	2201      	movs	r2, #1
 800df60:	601a      	str	r2, [r3, #0]
 800df62:	e002      	b.n	800df6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	2200      	movs	r2, #0
 800df68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	2202      	movs	r2, #2
 800df6e:	4619      	mov	r1, r3
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f000 fbd1 	bl	800e718 <USBD_CtlSendData>
              break;
 800df76:	e004      	b.n	800df82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800df78:	6839      	ldr	r1, [r7, #0]
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 fb5b 	bl	800e636 <USBD_CtlError>
              break;
 800df80:	bf00      	nop
          }
          break;
 800df82:	e004      	b.n	800df8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800df84:	6839      	ldr	r1, [r7, #0]
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 fb55 	bl	800e636 <USBD_CtlError>
          break;
 800df8c:	bf00      	nop
      }
      break;
 800df8e:	e005      	b.n	800df9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800df90:	6839      	ldr	r1, [r7, #0]
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 fb4f 	bl	800e636 <USBD_CtlError>
      break;
 800df98:	e000      	b.n	800df9c <USBD_StdEPReq+0x330>
      break;
 800df9a:	bf00      	nop
  }

  return ret;
 800df9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3710      	adds	r7, #16
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
	...

0800dfa8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b084      	sub	sp, #16
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	885b      	ldrh	r3, [r3, #2]
 800dfc2:	0a1b      	lsrs	r3, r3, #8
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	3b01      	subs	r3, #1
 800dfc8:	2b06      	cmp	r3, #6
 800dfca:	f200 8128 	bhi.w	800e21e <USBD_GetDescriptor+0x276>
 800dfce:	a201      	add	r2, pc, #4	; (adr r2, 800dfd4 <USBD_GetDescriptor+0x2c>)
 800dfd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd4:	0800dff1 	.word	0x0800dff1
 800dfd8:	0800e009 	.word	0x0800e009
 800dfdc:	0800e049 	.word	0x0800e049
 800dfe0:	0800e21f 	.word	0x0800e21f
 800dfe4:	0800e21f 	.word	0x0800e21f
 800dfe8:	0800e1bf 	.word	0x0800e1bf
 800dfec:	0800e1eb 	.word	0x0800e1eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	7c12      	ldrb	r2, [r2, #16]
 800dffc:	f107 0108 	add.w	r1, r7, #8
 800e000:	4610      	mov	r0, r2
 800e002:	4798      	blx	r3
 800e004:	60f8      	str	r0, [r7, #12]
      break;
 800e006:	e112      	b.n	800e22e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	7c1b      	ldrb	r3, [r3, #16]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d10d      	bne.n	800e02c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e018:	f107 0208 	add.w	r2, r7, #8
 800e01c:	4610      	mov	r0, r2
 800e01e:	4798      	blx	r3
 800e020:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	3301      	adds	r3, #1
 800e026:	2202      	movs	r2, #2
 800e028:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e02a:	e100      	b.n	800e22e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e034:	f107 0208 	add.w	r2, r7, #8
 800e038:	4610      	mov	r0, r2
 800e03a:	4798      	blx	r3
 800e03c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	3301      	adds	r3, #1
 800e042:	2202      	movs	r2, #2
 800e044:	701a      	strb	r2, [r3, #0]
      break;
 800e046:	e0f2      	b.n	800e22e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	885b      	ldrh	r3, [r3, #2]
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	2b05      	cmp	r3, #5
 800e050:	f200 80ac 	bhi.w	800e1ac <USBD_GetDescriptor+0x204>
 800e054:	a201      	add	r2, pc, #4	; (adr r2, 800e05c <USBD_GetDescriptor+0xb4>)
 800e056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e05a:	bf00      	nop
 800e05c:	0800e075 	.word	0x0800e075
 800e060:	0800e0a9 	.word	0x0800e0a9
 800e064:	0800e0dd 	.word	0x0800e0dd
 800e068:	0800e111 	.word	0x0800e111
 800e06c:	0800e145 	.word	0x0800e145
 800e070:	0800e179 	.word	0x0800e179
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00b      	beq.n	800e098 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	7c12      	ldrb	r2, [r2, #16]
 800e08c:	f107 0108 	add.w	r1, r7, #8
 800e090:	4610      	mov	r0, r2
 800e092:	4798      	blx	r3
 800e094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e096:	e091      	b.n	800e1bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e098:	6839      	ldr	r1, [r7, #0]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 facb 	bl	800e636 <USBD_CtlError>
            err++;
 800e0a0:	7afb      	ldrb	r3, [r7, #11]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	72fb      	strb	r3, [r7, #11]
          break;
 800e0a6:	e089      	b.n	800e1bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ae:	689b      	ldr	r3, [r3, #8]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d00b      	beq.n	800e0cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	7c12      	ldrb	r2, [r2, #16]
 800e0c0:	f107 0108 	add.w	r1, r7, #8
 800e0c4:	4610      	mov	r0, r2
 800e0c6:	4798      	blx	r3
 800e0c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0ca:	e077      	b.n	800e1bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e0cc:	6839      	ldr	r1, [r7, #0]
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 fab1 	bl	800e636 <USBD_CtlError>
            err++;
 800e0d4:	7afb      	ldrb	r3, [r7, #11]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	72fb      	strb	r3, [r7, #11]
          break;
 800e0da:	e06f      	b.n	800e1bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0e2:	68db      	ldr	r3, [r3, #12]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d00b      	beq.n	800e100 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	7c12      	ldrb	r2, [r2, #16]
 800e0f4:	f107 0108 	add.w	r1, r7, #8
 800e0f8:	4610      	mov	r0, r2
 800e0fa:	4798      	blx	r3
 800e0fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0fe:	e05d      	b.n	800e1bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e100:	6839      	ldr	r1, [r7, #0]
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 fa97 	bl	800e636 <USBD_CtlError>
            err++;
 800e108:	7afb      	ldrb	r3, [r7, #11]
 800e10a:	3301      	adds	r3, #1
 800e10c:	72fb      	strb	r3, [r7, #11]
          break;
 800e10e:	e055      	b.n	800e1bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e116:	691b      	ldr	r3, [r3, #16]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d00b      	beq.n	800e134 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e122:	691b      	ldr	r3, [r3, #16]
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	7c12      	ldrb	r2, [r2, #16]
 800e128:	f107 0108 	add.w	r1, r7, #8
 800e12c:	4610      	mov	r0, r2
 800e12e:	4798      	blx	r3
 800e130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e132:	e043      	b.n	800e1bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e134:	6839      	ldr	r1, [r7, #0]
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 fa7d 	bl	800e636 <USBD_CtlError>
            err++;
 800e13c:	7afb      	ldrb	r3, [r7, #11]
 800e13e:	3301      	adds	r3, #1
 800e140:	72fb      	strb	r3, [r7, #11]
          break;
 800e142:	e03b      	b.n	800e1bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e14a:	695b      	ldr	r3, [r3, #20]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00b      	beq.n	800e168 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e156:	695b      	ldr	r3, [r3, #20]
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	7c12      	ldrb	r2, [r2, #16]
 800e15c:	f107 0108 	add.w	r1, r7, #8
 800e160:	4610      	mov	r0, r2
 800e162:	4798      	blx	r3
 800e164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e166:	e029      	b.n	800e1bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e168:	6839      	ldr	r1, [r7, #0]
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 fa63 	bl	800e636 <USBD_CtlError>
            err++;
 800e170:	7afb      	ldrb	r3, [r7, #11]
 800e172:	3301      	adds	r3, #1
 800e174:	72fb      	strb	r3, [r7, #11]
          break;
 800e176:	e021      	b.n	800e1bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e17e:	699b      	ldr	r3, [r3, #24]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d00b      	beq.n	800e19c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e18a:	699b      	ldr	r3, [r3, #24]
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	7c12      	ldrb	r2, [r2, #16]
 800e190:	f107 0108 	add.w	r1, r7, #8
 800e194:	4610      	mov	r0, r2
 800e196:	4798      	blx	r3
 800e198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e19a:	e00f      	b.n	800e1bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e19c:	6839      	ldr	r1, [r7, #0]
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f000 fa49 	bl	800e636 <USBD_CtlError>
            err++;
 800e1a4:	7afb      	ldrb	r3, [r7, #11]
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e1aa:	e007      	b.n	800e1bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e1ac:	6839      	ldr	r1, [r7, #0]
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 fa41 	bl	800e636 <USBD_CtlError>
          err++;
 800e1b4:	7afb      	ldrb	r3, [r7, #11]
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e1ba:	bf00      	nop
      }
      break;
 800e1bc:	e037      	b.n	800e22e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	7c1b      	ldrb	r3, [r3, #16]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d109      	bne.n	800e1da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ce:	f107 0208 	add.w	r2, r7, #8
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	4798      	blx	r3
 800e1d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1d8:	e029      	b.n	800e22e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 fa2a 	bl	800e636 <USBD_CtlError>
        err++;
 800e1e2:	7afb      	ldrb	r3, [r7, #11]
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	72fb      	strb	r3, [r7, #11]
      break;
 800e1e8:	e021      	b.n	800e22e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	7c1b      	ldrb	r3, [r3, #16]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d10d      	bne.n	800e20e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1fa:	f107 0208 	add.w	r2, r7, #8
 800e1fe:	4610      	mov	r0, r2
 800e200:	4798      	blx	r3
 800e202:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	3301      	adds	r3, #1
 800e208:	2207      	movs	r2, #7
 800e20a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e20c:	e00f      	b.n	800e22e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e20e:	6839      	ldr	r1, [r7, #0]
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 fa10 	bl	800e636 <USBD_CtlError>
        err++;
 800e216:	7afb      	ldrb	r3, [r7, #11]
 800e218:	3301      	adds	r3, #1
 800e21a:	72fb      	strb	r3, [r7, #11]
      break;
 800e21c:	e007      	b.n	800e22e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e21e:	6839      	ldr	r1, [r7, #0]
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f000 fa08 	bl	800e636 <USBD_CtlError>
      err++;
 800e226:	7afb      	ldrb	r3, [r7, #11]
 800e228:	3301      	adds	r3, #1
 800e22a:	72fb      	strb	r3, [r7, #11]
      break;
 800e22c:	bf00      	nop
  }

  if (err != 0U)
 800e22e:	7afb      	ldrb	r3, [r7, #11]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d11e      	bne.n	800e272 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	88db      	ldrh	r3, [r3, #6]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d016      	beq.n	800e26a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e23c:	893b      	ldrh	r3, [r7, #8]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d00e      	beq.n	800e260 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	88da      	ldrh	r2, [r3, #6]
 800e246:	893b      	ldrh	r3, [r7, #8]
 800e248:	4293      	cmp	r3, r2
 800e24a:	bf28      	it	cs
 800e24c:	4613      	movcs	r3, r2
 800e24e:	b29b      	uxth	r3, r3
 800e250:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e252:	893b      	ldrh	r3, [r7, #8]
 800e254:	461a      	mov	r2, r3
 800e256:	68f9      	ldr	r1, [r7, #12]
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f000 fa5d 	bl	800e718 <USBD_CtlSendData>
 800e25e:	e009      	b.n	800e274 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 f9e7 	bl	800e636 <USBD_CtlError>
 800e268:	e004      	b.n	800e274 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f000 faae 	bl	800e7cc <USBD_CtlSendStatus>
 800e270:	e000      	b.n	800e274 <USBD_GetDescriptor+0x2cc>
    return;
 800e272:	bf00      	nop
  }
}
 800e274:	3710      	adds	r7, #16
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop

0800e27c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	889b      	ldrh	r3, [r3, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d131      	bne.n	800e2f2 <USBD_SetAddress+0x76>
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	88db      	ldrh	r3, [r3, #6]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d12d      	bne.n	800e2f2 <USBD_SetAddress+0x76>
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	885b      	ldrh	r3, [r3, #2]
 800e29a:	2b7f      	cmp	r3, #127	; 0x7f
 800e29c:	d829      	bhi.n	800e2f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	885b      	ldrh	r3, [r3, #2]
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	2b03      	cmp	r3, #3
 800e2b4:	d104      	bne.n	800e2c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e2b6:	6839      	ldr	r1, [r7, #0]
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 f9bc 	bl	800e636 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2be:	e01d      	b.n	800e2fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	7bfa      	ldrb	r2, [r7, #15]
 800e2c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e2c8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 ff0d 	bl	800f0ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 fa7a 	bl	800e7cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e2d8:	7bfb      	ldrb	r3, [r7, #15]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d004      	beq.n	800e2e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2202      	movs	r2, #2
 800e2e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2e6:	e009      	b.n	800e2fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2f0:	e004      	b.n	800e2fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e2f2:	6839      	ldr	r1, [r7, #0]
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f000 f99e 	bl	800e636 <USBD_CtlError>
  }
}
 800e2fa:	bf00      	nop
 800e2fc:	bf00      	nop
 800e2fe:	3710      	adds	r7, #16
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e30e:	2300      	movs	r3, #0
 800e310:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	885b      	ldrh	r3, [r3, #2]
 800e316:	b2da      	uxtb	r2, r3
 800e318:	4b4e      	ldr	r3, [pc, #312]	; (800e454 <USBD_SetConfig+0x150>)
 800e31a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e31c:	4b4d      	ldr	r3, [pc, #308]	; (800e454 <USBD_SetConfig+0x150>)
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	2b01      	cmp	r3, #1
 800e322:	d905      	bls.n	800e330 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e324:	6839      	ldr	r1, [r7, #0]
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f000 f985 	bl	800e636 <USBD_CtlError>
    return USBD_FAIL;
 800e32c:	2303      	movs	r3, #3
 800e32e:	e08c      	b.n	800e44a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e336:	b2db      	uxtb	r3, r3
 800e338:	2b02      	cmp	r3, #2
 800e33a:	d002      	beq.n	800e342 <USBD_SetConfig+0x3e>
 800e33c:	2b03      	cmp	r3, #3
 800e33e:	d029      	beq.n	800e394 <USBD_SetConfig+0x90>
 800e340:	e075      	b.n	800e42e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e342:	4b44      	ldr	r3, [pc, #272]	; (800e454 <USBD_SetConfig+0x150>)
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d020      	beq.n	800e38c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e34a:	4b42      	ldr	r3, [pc, #264]	; (800e454 <USBD_SetConfig+0x150>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	461a      	mov	r2, r3
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e354:	4b3f      	ldr	r3, [pc, #252]	; (800e454 <USBD_SetConfig+0x150>)
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	4619      	mov	r1, r3
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f7fe ffe1 	bl	800d322 <USBD_SetClassConfig>
 800e360:	4603      	mov	r3, r0
 800e362:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e364:	7bfb      	ldrb	r3, [r7, #15]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d008      	beq.n	800e37c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e36a:	6839      	ldr	r1, [r7, #0]
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f000 f962 	bl	800e636 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2202      	movs	r2, #2
 800e376:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e37a:	e065      	b.n	800e448 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 fa25 	bl	800e7cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2203      	movs	r2, #3
 800e386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e38a:	e05d      	b.n	800e448 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 fa1d 	bl	800e7cc <USBD_CtlSendStatus>
      break;
 800e392:	e059      	b.n	800e448 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e394:	4b2f      	ldr	r3, [pc, #188]	; (800e454 <USBD_SetConfig+0x150>)
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d112      	bne.n	800e3c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2202      	movs	r2, #2
 800e3a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e3a4:	4b2b      	ldr	r3, [pc, #172]	; (800e454 <USBD_SetConfig+0x150>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e3ae:	4b29      	ldr	r3, [pc, #164]	; (800e454 <USBD_SetConfig+0x150>)
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f7fe ffd0 	bl	800d35a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 fa06 	bl	800e7cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e3c0:	e042      	b.n	800e448 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e3c2:	4b24      	ldr	r3, [pc, #144]	; (800e454 <USBD_SetConfig+0x150>)
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d02a      	beq.n	800e426 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f7fe ffbe 	bl	800d35a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e3de:	4b1d      	ldr	r3, [pc, #116]	; (800e454 <USBD_SetConfig+0x150>)
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e3e8:	4b1a      	ldr	r3, [pc, #104]	; (800e454 <USBD_SetConfig+0x150>)
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7fe ff97 	bl	800d322 <USBD_SetClassConfig>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e3f8:	7bfb      	ldrb	r3, [r7, #15]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00f      	beq.n	800e41e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e3fe:	6839      	ldr	r1, [r7, #0]
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 f918 	bl	800e636 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	4619      	mov	r1, r3
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f7fe ffa3 	bl	800d35a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2202      	movs	r2, #2
 800e418:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e41c:	e014      	b.n	800e448 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 f9d4 	bl	800e7cc <USBD_CtlSendStatus>
      break;
 800e424:	e010      	b.n	800e448 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 f9d0 	bl	800e7cc <USBD_CtlSendStatus>
      break;
 800e42c:	e00c      	b.n	800e448 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e42e:	6839      	ldr	r1, [r7, #0]
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 f900 	bl	800e636 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e436:	4b07      	ldr	r3, [pc, #28]	; (800e454 <USBD_SetConfig+0x150>)
 800e438:	781b      	ldrb	r3, [r3, #0]
 800e43a:	4619      	mov	r1, r3
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7fe ff8c 	bl	800d35a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e442:	2303      	movs	r3, #3
 800e444:	73fb      	strb	r3, [r7, #15]
      break;
 800e446:	bf00      	nop
  }

  return ret;
 800e448:	7bfb      	ldrb	r3, [r7, #15]
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	20004574 	.word	0x20004574

0800e458 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	88db      	ldrh	r3, [r3, #6]
 800e466:	2b01      	cmp	r3, #1
 800e468:	d004      	beq.n	800e474 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e46a:	6839      	ldr	r1, [r7, #0]
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 f8e2 	bl	800e636 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e472:	e023      	b.n	800e4bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	dc02      	bgt.n	800e486 <USBD_GetConfig+0x2e>
 800e480:	2b00      	cmp	r3, #0
 800e482:	dc03      	bgt.n	800e48c <USBD_GetConfig+0x34>
 800e484:	e015      	b.n	800e4b2 <USBD_GetConfig+0x5a>
 800e486:	2b03      	cmp	r3, #3
 800e488:	d00b      	beq.n	800e4a2 <USBD_GetConfig+0x4a>
 800e48a:	e012      	b.n	800e4b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2200      	movs	r2, #0
 800e490:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	3308      	adds	r3, #8
 800e496:	2201      	movs	r2, #1
 800e498:	4619      	mov	r1, r3
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 f93c 	bl	800e718 <USBD_CtlSendData>
        break;
 800e4a0:	e00c      	b.n	800e4bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	3304      	adds	r3, #4
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 f934 	bl	800e718 <USBD_CtlSendData>
        break;
 800e4b0:	e004      	b.n	800e4bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e4b2:	6839      	ldr	r1, [r7, #0]
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f000 f8be 	bl	800e636 <USBD_CtlError>
        break;
 800e4ba:	bf00      	nop
}
 800e4bc:	bf00      	nop
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	3b01      	subs	r3, #1
 800e4d8:	2b02      	cmp	r3, #2
 800e4da:	d81e      	bhi.n	800e51a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	88db      	ldrh	r3, [r3, #6]
 800e4e0:	2b02      	cmp	r3, #2
 800e4e2:	d004      	beq.n	800e4ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e4e4:	6839      	ldr	r1, [r7, #0]
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 f8a5 	bl	800e636 <USBD_CtlError>
        break;
 800e4ec:	e01a      	b.n	800e524 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d005      	beq.n	800e50a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	f043 0202 	orr.w	r2, r3, #2
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	330c      	adds	r3, #12
 800e50e:	2202      	movs	r2, #2
 800e510:	4619      	mov	r1, r3
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 f900 	bl	800e718 <USBD_CtlSendData>
      break;
 800e518:	e004      	b.n	800e524 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e51a:	6839      	ldr	r1, [r7, #0]
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 f88a 	bl	800e636 <USBD_CtlError>
      break;
 800e522:	bf00      	nop
  }
}
 800e524:	bf00      	nop
 800e526:	3708      	adds	r7, #8
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	885b      	ldrh	r3, [r3, #2]
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	d107      	bne.n	800e54e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2201      	movs	r2, #1
 800e542:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 f940 	bl	800e7cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e54c:	e013      	b.n	800e576 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	885b      	ldrh	r3, [r3, #2]
 800e552:	2b02      	cmp	r3, #2
 800e554:	d10b      	bne.n	800e56e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	889b      	ldrh	r3, [r3, #4]
 800e55a:	0a1b      	lsrs	r3, r3, #8
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	b2da      	uxtb	r2, r3
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 f930 	bl	800e7cc <USBD_CtlSendStatus>
}
 800e56c:	e003      	b.n	800e576 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e56e:	6839      	ldr	r1, [r7, #0]
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f000 f860 	bl	800e636 <USBD_CtlError>
}
 800e576:	bf00      	nop
 800e578:	3708      	adds	r7, #8
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e57e:	b580      	push	{r7, lr}
 800e580:	b082      	sub	sp, #8
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
 800e586:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	3b01      	subs	r3, #1
 800e592:	2b02      	cmp	r3, #2
 800e594:	d80b      	bhi.n	800e5ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	885b      	ldrh	r3, [r3, #2]
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d10c      	bne.n	800e5b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 f910 	bl	800e7cc <USBD_CtlSendStatus>
      }
      break;
 800e5ac:	e004      	b.n	800e5b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e5ae:	6839      	ldr	r1, [r7, #0]
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f000 f840 	bl	800e636 <USBD_CtlError>
      break;
 800e5b6:	e000      	b.n	800e5ba <USBD_ClrFeature+0x3c>
      break;
 800e5b8:	bf00      	nop
  }
}
 800e5ba:	bf00      	nop
 800e5bc:	3708      	adds	r7, #8
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}

0800e5c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e5c2:	b580      	push	{r7, lr}
 800e5c4:	b084      	sub	sp, #16
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
 800e5ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	781a      	ldrb	r2, [r3, #0]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	781a      	ldrb	r2, [r3, #0]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e5ec:	68f8      	ldr	r0, [r7, #12]
 800e5ee:	f7ff fa41 	bl	800da74 <SWAPBYTE>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	3301      	adds	r3, #1
 800e604:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e606:	68f8      	ldr	r0, [r7, #12]
 800e608:	f7ff fa34 	bl	800da74 <SWAPBYTE>
 800e60c:	4603      	mov	r3, r0
 800e60e:	461a      	mov	r2, r3
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	3301      	adds	r3, #1
 800e618:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	3301      	adds	r3, #1
 800e61e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e620:	68f8      	ldr	r0, [r7, #12]
 800e622:	f7ff fa27 	bl	800da74 <SWAPBYTE>
 800e626:	4603      	mov	r3, r0
 800e628:	461a      	mov	r2, r3
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	80da      	strh	r2, [r3, #6]
}
 800e62e:	bf00      	nop
 800e630:	3710      	adds	r7, #16
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e636:	b580      	push	{r7, lr}
 800e638:	b082      	sub	sp, #8
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e640:	2180      	movs	r1, #128	; 0x80
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 fce8 	bl	800f018 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e648:	2100      	movs	r1, #0
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 fce4 	bl	800f018 <USBD_LL_StallEP>
}
 800e650:	bf00      	nop
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b086      	sub	sp, #24
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e664:	2300      	movs	r3, #0
 800e666:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d036      	beq.n	800e6dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e672:	6938      	ldr	r0, [r7, #16]
 800e674:	f000 f836 	bl	800e6e4 <USBD_GetLen>
 800e678:	4603      	mov	r3, r0
 800e67a:	3301      	adds	r3, #1
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	005b      	lsls	r3, r3, #1
 800e680:	b29a      	uxth	r2, r3
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e686:	7dfb      	ldrb	r3, [r7, #23]
 800e688:	68ba      	ldr	r2, [r7, #8]
 800e68a:	4413      	add	r3, r2
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	7812      	ldrb	r2, [r2, #0]
 800e690:	701a      	strb	r2, [r3, #0]
  idx++;
 800e692:	7dfb      	ldrb	r3, [r7, #23]
 800e694:	3301      	adds	r3, #1
 800e696:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e698:	7dfb      	ldrb	r3, [r7, #23]
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	4413      	add	r3, r2
 800e69e:	2203      	movs	r2, #3
 800e6a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e6a2:	7dfb      	ldrb	r3, [r7, #23]
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e6a8:	e013      	b.n	800e6d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e6aa:	7dfb      	ldrb	r3, [r7, #23]
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	693a      	ldr	r2, [r7, #16]
 800e6b2:	7812      	ldrb	r2, [r2, #0]
 800e6b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	613b      	str	r3, [r7, #16]
    idx++;
 800e6bc:	7dfb      	ldrb	r3, [r7, #23]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e6c2:	7dfb      	ldrb	r3, [r7, #23]
 800e6c4:	68ba      	ldr	r2, [r7, #8]
 800e6c6:	4413      	add	r3, r2
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	701a      	strb	r2, [r3, #0]
    idx++;
 800e6cc:	7dfb      	ldrb	r3, [r7, #23]
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d1e7      	bne.n	800e6aa <USBD_GetString+0x52>
 800e6da:	e000      	b.n	800e6de <USBD_GetString+0x86>
    return;
 800e6dc:	bf00      	nop
  }
}
 800e6de:	3718      	adds	r7, #24
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b085      	sub	sp, #20
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e6f4:	e005      	b.n	800e702 <USBD_GetLen+0x1e>
  {
    len++;
 800e6f6:	7bfb      	ldrb	r3, [r7, #15]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	3301      	adds	r3, #1
 800e700:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d1f5      	bne.n	800e6f6 <USBD_GetLen+0x12>
  }

  return len;
 800e70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3714      	adds	r7, #20
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b084      	sub	sp, #16
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2202      	movs	r2, #2
 800e728:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	687a      	ldr	r2, [r7, #4]
 800e736:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	68ba      	ldr	r2, [r7, #8]
 800e73c:	2100      	movs	r1, #0
 800e73e:	68f8      	ldr	r0, [r7, #12]
 800e740:	f000 fcf3 	bl	800f12a <USBD_LL_Transmit>

  return USBD_OK;
 800e744:	2300      	movs	r3, #0
}
 800e746:	4618      	mov	r0, r3
 800e748:	3710      	adds	r7, #16
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}

0800e74e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e74e:	b580      	push	{r7, lr}
 800e750:	b084      	sub	sp, #16
 800e752:	af00      	add	r7, sp, #0
 800e754:	60f8      	str	r0, [r7, #12]
 800e756:	60b9      	str	r1, [r7, #8]
 800e758:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	2100      	movs	r1, #0
 800e760:	68f8      	ldr	r0, [r7, #12]
 800e762:	f000 fce2 	bl	800f12a <USBD_LL_Transmit>

  return USBD_OK;
 800e766:	2300      	movs	r3, #0
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3710      	adds	r7, #16
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}

0800e770 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	60f8      	str	r0, [r7, #12]
 800e778:	60b9      	str	r1, [r7, #8]
 800e77a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2203      	movs	r2, #3
 800e780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	687a      	ldr	r2, [r7, #4]
 800e788:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	68ba      	ldr	r2, [r7, #8]
 800e798:	2100      	movs	r1, #0
 800e79a:	68f8      	ldr	r0, [r7, #12]
 800e79c:	f000 fce6 	bl	800f16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3710      	adds	r7, #16
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b084      	sub	sp, #16
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	60f8      	str	r0, [r7, #12]
 800e7b2:	60b9      	str	r1, [r7, #8]
 800e7b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	68ba      	ldr	r2, [r7, #8]
 800e7ba:	2100      	movs	r1, #0
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f000 fcd5 	bl	800f16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7c2:	2300      	movs	r3, #0
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3710      	adds	r7, #16
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2204      	movs	r2, #4
 800e7d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e7dc:	2300      	movs	r3, #0
 800e7de:	2200      	movs	r2, #0
 800e7e0:	2100      	movs	r1, #0
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 fca1 	bl	800f12a <USBD_LL_Transmit>

  return USBD_OK;
 800e7e8:	2300      	movs	r3, #0
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b082      	sub	sp, #8
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2205      	movs	r2, #5
 800e7fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e802:	2300      	movs	r3, #0
 800e804:	2200      	movs	r2, #0
 800e806:	2100      	movs	r1, #0
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 fcaf 	bl	800f16c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e80e:	2300      	movs	r3, #0
}
 800e810:	4618      	mov	r0, r3
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800e81c:	2201      	movs	r2, #1
 800e81e:	4912      	ldr	r1, [pc, #72]	; (800e868 <MX_USB_DEVICE_Init+0x50>)
 800e820:	4812      	ldr	r0, [pc, #72]	; (800e86c <MX_USB_DEVICE_Init+0x54>)
 800e822:	f7fe fd01 	bl	800d228 <USBD_Init>
 800e826:	4603      	mov	r3, r0
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d001      	beq.n	800e830 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e82c:	f7f2 febe 	bl	80015ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800e830:	490f      	ldr	r1, [pc, #60]	; (800e870 <MX_USB_DEVICE_Init+0x58>)
 800e832:	480e      	ldr	r0, [pc, #56]	; (800e86c <MX_USB_DEVICE_Init+0x54>)
 800e834:	f7fe fd28 	bl	800d288 <USBD_RegisterClass>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d001      	beq.n	800e842 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e83e:	f7f2 feb5 	bl	80015ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800e842:	490c      	ldr	r1, [pc, #48]	; (800e874 <MX_USB_DEVICE_Init+0x5c>)
 800e844:	4809      	ldr	r0, [pc, #36]	; (800e86c <MX_USB_DEVICE_Init+0x54>)
 800e846:	f7fe fc1f 	bl	800d088 <USBD_CDC_RegisterInterface>
 800e84a:	4603      	mov	r3, r0
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d001      	beq.n	800e854 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e850:	f7f2 feac 	bl	80015ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800e854:	4805      	ldr	r0, [pc, #20]	; (800e86c <MX_USB_DEVICE_Init+0x54>)
 800e856:	f7fe fd4d 	bl	800d2f4 <USBD_Start>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d001      	beq.n	800e864 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e860:	f7f2 fea4 	bl	80015ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e864:	bf00      	nop
 800e866:	bd80      	pop	{r7, pc}
 800e868:	20000138 	.word	0x20000138
 800e86c:	20004578 	.word	0x20004578
 800e870:	200000a4 	.word	0x200000a4
 800e874:	20000124 	.word	0x20000124

0800e878 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800e87c:	2200      	movs	r2, #0
 800e87e:	4905      	ldr	r1, [pc, #20]	; (800e894 <CDC_Init_HS+0x1c>)
 800e880:	4805      	ldr	r0, [pc, #20]	; (800e898 <CDC_Init_HS+0x20>)
 800e882:	f7fe fc1b 	bl	800d0bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800e886:	4905      	ldr	r1, [pc, #20]	; (800e89c <CDC_Init_HS+0x24>)
 800e888:	4803      	ldr	r0, [pc, #12]	; (800e898 <CDC_Init_HS+0x20>)
 800e88a:	f7fe fc39 	bl	800d100 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e88e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e890:	4618      	mov	r0, r3
 800e892:	bd80      	pop	{r7, pc}
 800e894:	20005054 	.word	0x20005054
 800e898:	20004578 	.word	0x20004578
 800e89c:	20004854 	.word	0x20004854

0800e8a0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800e8a4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	6039      	str	r1, [r7, #0]
 800e8ba:	71fb      	strb	r3, [r7, #7]
 800e8bc:	4613      	mov	r3, r2
 800e8be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800e8c0:	79fb      	ldrb	r3, [r7, #7]
 800e8c2:	2b23      	cmp	r3, #35	; 0x23
 800e8c4:	d84a      	bhi.n	800e95c <CDC_Control_HS+0xac>
 800e8c6:	a201      	add	r2, pc, #4	; (adr r2, 800e8cc <CDC_Control_HS+0x1c>)
 800e8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8cc:	0800e95d 	.word	0x0800e95d
 800e8d0:	0800e95d 	.word	0x0800e95d
 800e8d4:	0800e95d 	.word	0x0800e95d
 800e8d8:	0800e95d 	.word	0x0800e95d
 800e8dc:	0800e95d 	.word	0x0800e95d
 800e8e0:	0800e95d 	.word	0x0800e95d
 800e8e4:	0800e95d 	.word	0x0800e95d
 800e8e8:	0800e95d 	.word	0x0800e95d
 800e8ec:	0800e95d 	.word	0x0800e95d
 800e8f0:	0800e95d 	.word	0x0800e95d
 800e8f4:	0800e95d 	.word	0x0800e95d
 800e8f8:	0800e95d 	.word	0x0800e95d
 800e8fc:	0800e95d 	.word	0x0800e95d
 800e900:	0800e95d 	.word	0x0800e95d
 800e904:	0800e95d 	.word	0x0800e95d
 800e908:	0800e95d 	.word	0x0800e95d
 800e90c:	0800e95d 	.word	0x0800e95d
 800e910:	0800e95d 	.word	0x0800e95d
 800e914:	0800e95d 	.word	0x0800e95d
 800e918:	0800e95d 	.word	0x0800e95d
 800e91c:	0800e95d 	.word	0x0800e95d
 800e920:	0800e95d 	.word	0x0800e95d
 800e924:	0800e95d 	.word	0x0800e95d
 800e928:	0800e95d 	.word	0x0800e95d
 800e92c:	0800e95d 	.word	0x0800e95d
 800e930:	0800e95d 	.word	0x0800e95d
 800e934:	0800e95d 	.word	0x0800e95d
 800e938:	0800e95d 	.word	0x0800e95d
 800e93c:	0800e95d 	.word	0x0800e95d
 800e940:	0800e95d 	.word	0x0800e95d
 800e944:	0800e95d 	.word	0x0800e95d
 800e948:	0800e95d 	.word	0x0800e95d
 800e94c:	0800e95d 	.word	0x0800e95d
 800e950:	0800e95d 	.word	0x0800e95d
 800e954:	0800e95d 	.word	0x0800e95d
 800e958:	0800e95d 	.word	0x0800e95d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e95c:	bf00      	nop
  }

  return (USBD_OK);
 800e95e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800e960:	4618      	mov	r0, r3
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800e976:	6879      	ldr	r1, [r7, #4]
 800e978:	4808      	ldr	r0, [pc, #32]	; (800e99c <CDC_Receive_HS+0x30>)
 800e97a:	f7fe fbc1 	bl	800d100 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800e97e:	4807      	ldr	r0, [pc, #28]	; (800e99c <CDC_Receive_HS+0x30>)
 800e980:	f7fe fc1c 	bl	800d1bc <USBD_CDC_ReceivePacket>
  CDC_Transmit_HS(Buf,*Len);
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	b29b      	uxth	r3, r3
 800e98a:	4619      	mov	r1, r3
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f000 f807 	bl	800e9a0 <CDC_Transmit_HS>
  return (USBD_OK);
 800e992:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800e994:	4618      	mov	r0, r3
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	20004578 	.word	0x20004578

0800e9a0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800e9b0:	4b0d      	ldr	r3, [pc, #52]	; (800e9e8 <CDC_Transmit_HS+0x48>)
 800e9b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d001      	beq.n	800e9c6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e00b      	b.n	800e9de <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800e9c6:	887b      	ldrh	r3, [r7, #2]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	6879      	ldr	r1, [r7, #4]
 800e9cc:	4806      	ldr	r0, [pc, #24]	; (800e9e8 <CDC_Transmit_HS+0x48>)
 800e9ce:	f7fe fb75 	bl	800d0bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800e9d2:	4805      	ldr	r0, [pc, #20]	; (800e9e8 <CDC_Transmit_HS+0x48>)
 800e9d4:	f7fe fbb2 	bl	800d13c <USBD_CDC_TransmitPacket>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800e9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	20004578 	.word	0x20004578

0800e9ec <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b087      	sub	sp, #28
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	60b9      	str	r1, [r7, #8]
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800e9fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	371c      	adds	r7, #28
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr
	...

0800ea10 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	4603      	mov	r3, r0
 800ea18:	6039      	str	r1, [r7, #0]
 800ea1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	2212      	movs	r2, #18
 800ea20:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800ea22:	4b03      	ldr	r3, [pc, #12]	; (800ea30 <USBD_HS_DeviceDescriptor+0x20>)
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	370c      	adds	r7, #12
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr
 800ea30:	20000154 	.word	0x20000154

0800ea34 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b083      	sub	sp, #12
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	6039      	str	r1, [r7, #0]
 800ea3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	2204      	movs	r2, #4
 800ea44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ea46:	4b03      	ldr	r3, [pc, #12]	; (800ea54 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr
 800ea54:	20000168 	.word	0x20000168

0800ea58 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	4603      	mov	r3, r0
 800ea60:	6039      	str	r1, [r7, #0]
 800ea62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ea64:	79fb      	ldrb	r3, [r7, #7]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d105      	bne.n	800ea76 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ea6a:	683a      	ldr	r2, [r7, #0]
 800ea6c:	4907      	ldr	r1, [pc, #28]	; (800ea8c <USBD_HS_ProductStrDescriptor+0x34>)
 800ea6e:	4808      	ldr	r0, [pc, #32]	; (800ea90 <USBD_HS_ProductStrDescriptor+0x38>)
 800ea70:	f7ff fdf2 	bl	800e658 <USBD_GetString>
 800ea74:	e004      	b.n	800ea80 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ea76:	683a      	ldr	r2, [r7, #0]
 800ea78:	4904      	ldr	r1, [pc, #16]	; (800ea8c <USBD_HS_ProductStrDescriptor+0x34>)
 800ea7a:	4805      	ldr	r0, [pc, #20]	; (800ea90 <USBD_HS_ProductStrDescriptor+0x38>)
 800ea7c:	f7ff fdec 	bl	800e658 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea80:	4b02      	ldr	r3, [pc, #8]	; (800ea8c <USBD_HS_ProductStrDescriptor+0x34>)
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3708      	adds	r7, #8
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	20005854 	.word	0x20005854
 800ea90:	0800fd78 	.word	0x0800fd78

0800ea94 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b082      	sub	sp, #8
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	6039      	str	r1, [r7, #0]
 800ea9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eaa0:	683a      	ldr	r2, [r7, #0]
 800eaa2:	4904      	ldr	r1, [pc, #16]	; (800eab4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800eaa4:	4804      	ldr	r0, [pc, #16]	; (800eab8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800eaa6:	f7ff fdd7 	bl	800e658 <USBD_GetString>
  return USBD_StrDesc;
 800eaaa:	4b02      	ldr	r3, [pc, #8]	; (800eab4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	20005854 	.word	0x20005854
 800eab8:	0800fd90 	.word	0x0800fd90

0800eabc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	4603      	mov	r3, r0
 800eac4:	6039      	str	r1, [r7, #0]
 800eac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	221a      	movs	r2, #26
 800eacc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eace:	f000 f843 	bl	800eb58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ead2:	4b02      	ldr	r3, [pc, #8]	; (800eadc <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3708      	adds	r7, #8
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	2000016c 	.word	0x2000016c

0800eae0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	4603      	mov	r3, r0
 800eae8:	6039      	str	r1, [r7, #0]
 800eaea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eaec:	79fb      	ldrb	r3, [r7, #7]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d105      	bne.n	800eafe <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	4907      	ldr	r1, [pc, #28]	; (800eb14 <USBD_HS_ConfigStrDescriptor+0x34>)
 800eaf6:	4808      	ldr	r0, [pc, #32]	; (800eb18 <USBD_HS_ConfigStrDescriptor+0x38>)
 800eaf8:	f7ff fdae 	bl	800e658 <USBD_GetString>
 800eafc:	e004      	b.n	800eb08 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800eafe:	683a      	ldr	r2, [r7, #0]
 800eb00:	4904      	ldr	r1, [pc, #16]	; (800eb14 <USBD_HS_ConfigStrDescriptor+0x34>)
 800eb02:	4805      	ldr	r0, [pc, #20]	; (800eb18 <USBD_HS_ConfigStrDescriptor+0x38>)
 800eb04:	f7ff fda8 	bl	800e658 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb08:	4b02      	ldr	r3, [pc, #8]	; (800eb14 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	20005854 	.word	0x20005854
 800eb18:	0800fda4 	.word	0x0800fda4

0800eb1c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	4603      	mov	r3, r0
 800eb24:	6039      	str	r1, [r7, #0]
 800eb26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb28:	79fb      	ldrb	r3, [r7, #7]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d105      	bne.n	800eb3a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800eb2e:	683a      	ldr	r2, [r7, #0]
 800eb30:	4907      	ldr	r1, [pc, #28]	; (800eb50 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800eb32:	4808      	ldr	r0, [pc, #32]	; (800eb54 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800eb34:	f7ff fd90 	bl	800e658 <USBD_GetString>
 800eb38:	e004      	b.n	800eb44 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800eb3a:	683a      	ldr	r2, [r7, #0]
 800eb3c:	4904      	ldr	r1, [pc, #16]	; (800eb50 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800eb3e:	4805      	ldr	r0, [pc, #20]	; (800eb54 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800eb40:	f7ff fd8a 	bl	800e658 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb44:	4b02      	ldr	r3, [pc, #8]	; (800eb50 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	20005854 	.word	0x20005854
 800eb54:	0800fdb0 	.word	0x0800fdb0

0800eb58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800eb5e:	4b0f      	ldr	r3, [pc, #60]	; (800eb9c <Get_SerialNum+0x44>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800eb64:	4b0e      	ldr	r3, [pc, #56]	; (800eba0 <Get_SerialNum+0x48>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800eb6a:	4b0e      	ldr	r3, [pc, #56]	; (800eba4 <Get_SerialNum+0x4c>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800eb70:	68fa      	ldr	r2, [r7, #12]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	4413      	add	r3, r2
 800eb76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d009      	beq.n	800eb92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800eb7e:	2208      	movs	r2, #8
 800eb80:	4909      	ldr	r1, [pc, #36]	; (800eba8 <Get_SerialNum+0x50>)
 800eb82:	68f8      	ldr	r0, [r7, #12]
 800eb84:	f000 f814 	bl	800ebb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800eb88:	2204      	movs	r2, #4
 800eb8a:	4908      	ldr	r1, [pc, #32]	; (800ebac <Get_SerialNum+0x54>)
 800eb8c:	68b8      	ldr	r0, [r7, #8]
 800eb8e:	f000 f80f 	bl	800ebb0 <IntToUnicode>
  }
}
 800eb92:	bf00      	nop
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	1fff7a10 	.word	0x1fff7a10
 800eba0:	1fff7a14 	.word	0x1fff7a14
 800eba4:	1fff7a18 	.word	0x1fff7a18
 800eba8:	2000016e 	.word	0x2000016e
 800ebac:	2000017e 	.word	0x2000017e

0800ebb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b087      	sub	sp, #28
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	4613      	mov	r3, r2
 800ebbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	75fb      	strb	r3, [r7, #23]
 800ebc6:	e027      	b.n	800ec18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	0f1b      	lsrs	r3, r3, #28
 800ebcc:	2b09      	cmp	r3, #9
 800ebce:	d80b      	bhi.n	800ebe8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	0f1b      	lsrs	r3, r3, #28
 800ebd4:	b2da      	uxtb	r2, r3
 800ebd6:	7dfb      	ldrb	r3, [r7, #23]
 800ebd8:	005b      	lsls	r3, r3, #1
 800ebda:	4619      	mov	r1, r3
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	440b      	add	r3, r1
 800ebe0:	3230      	adds	r2, #48	; 0x30
 800ebe2:	b2d2      	uxtb	r2, r2
 800ebe4:	701a      	strb	r2, [r3, #0]
 800ebe6:	e00a      	b.n	800ebfe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	0f1b      	lsrs	r3, r3, #28
 800ebec:	b2da      	uxtb	r2, r3
 800ebee:	7dfb      	ldrb	r3, [r7, #23]
 800ebf0:	005b      	lsls	r3, r3, #1
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	440b      	add	r3, r1
 800ebf8:	3237      	adds	r2, #55	; 0x37
 800ebfa:	b2d2      	uxtb	r2, r2
 800ebfc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	011b      	lsls	r3, r3, #4
 800ec02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ec04:	7dfb      	ldrb	r3, [r7, #23]
 800ec06:	005b      	lsls	r3, r3, #1
 800ec08:	3301      	adds	r3, #1
 800ec0a:	68ba      	ldr	r2, [r7, #8]
 800ec0c:	4413      	add	r3, r2
 800ec0e:	2200      	movs	r2, #0
 800ec10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ec12:	7dfb      	ldrb	r3, [r7, #23]
 800ec14:	3301      	adds	r3, #1
 800ec16:	75fb      	strb	r3, [r7, #23]
 800ec18:	7dfa      	ldrb	r2, [r7, #23]
 800ec1a:	79fb      	ldrb	r3, [r7, #7]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d3d3      	bcc.n	800ebc8 <IntToUnicode+0x18>
  }
}
 800ec20:	bf00      	nop
 800ec22:	bf00      	nop
 800ec24:	371c      	adds	r7, #28
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr
	...

0800ec30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b08a      	sub	sp, #40	; 0x28
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec38:	f107 0314 	add.w	r3, r7, #20
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	601a      	str	r2, [r3, #0]
 800ec40:	605a      	str	r2, [r3, #4]
 800ec42:	609a      	str	r2, [r3, #8]
 800ec44:	60da      	str	r2, [r3, #12]
 800ec46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	4a1d      	ldr	r2, [pc, #116]	; (800ecc4 <HAL_PCD_MspInit+0x94>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d134      	bne.n	800ecbc <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ec52:	2300      	movs	r3, #0
 800ec54:	613b      	str	r3, [r7, #16]
 800ec56:	4b1c      	ldr	r3, [pc, #112]	; (800ecc8 <HAL_PCD_MspInit+0x98>)
 800ec58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec5a:	4a1b      	ldr	r2, [pc, #108]	; (800ecc8 <HAL_PCD_MspInit+0x98>)
 800ec5c:	f043 0302 	orr.w	r3, r3, #2
 800ec60:	6313      	str	r3, [r2, #48]	; 0x30
 800ec62:	4b19      	ldr	r3, [pc, #100]	; (800ecc8 <HAL_PCD_MspInit+0x98>)
 800ec64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec66:	f003 0302 	and.w	r3, r3, #2
 800ec6a:	613b      	str	r3, [r7, #16]
 800ec6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800ec6e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800ec72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec74:	2302      	movs	r3, #2
 800ec76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec7c:	2303      	movs	r3, #3
 800ec7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ec80:	230c      	movs	r3, #12
 800ec82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ec84:	f107 0314 	add.w	r3, r7, #20
 800ec88:	4619      	mov	r1, r3
 800ec8a:	4810      	ldr	r0, [pc, #64]	; (800eccc <HAL_PCD_MspInit+0x9c>)
 800ec8c:	f7f5 fb10 	bl	80042b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ec90:	2300      	movs	r3, #0
 800ec92:	60fb      	str	r3, [r7, #12]
 800ec94:	4b0c      	ldr	r3, [pc, #48]	; (800ecc8 <HAL_PCD_MspInit+0x98>)
 800ec96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec98:	4a0b      	ldr	r2, [pc, #44]	; (800ecc8 <HAL_PCD_MspInit+0x98>)
 800ec9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ec9e:	6313      	str	r3, [r2, #48]	; 0x30
 800eca0:	4b09      	ldr	r3, [pc, #36]	; (800ecc8 <HAL_PCD_MspInit+0x98>)
 800eca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eca4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eca8:	60fb      	str	r3, [r7, #12]
 800ecaa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800ecac:	2200      	movs	r2, #0
 800ecae:	2105      	movs	r1, #5
 800ecb0:	204d      	movs	r0, #77	; 0x4d
 800ecb2:	f7f4 fe4f 	bl	8003954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ecb6:	204d      	movs	r0, #77	; 0x4d
 800ecb8:	f7f4 fe68 	bl	800398c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ecbc:	bf00      	nop
 800ecbe:	3728      	adds	r7, #40	; 0x28
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	40040000 	.word	0x40040000
 800ecc8:	40023800 	.word	0x40023800
 800eccc:	40020400 	.word	0x40020400

0800ecd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800ece4:	4619      	mov	r1, r3
 800ece6:	4610      	mov	r0, r2
 800ece8:	f7fe fb51 	bl	800d38e <USBD_LL_SetupStage>
}
 800ecec:	bf00      	nop
 800ecee:	3708      	adds	r7, #8
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800ed06:	78fa      	ldrb	r2, [r7, #3]
 800ed08:	6879      	ldr	r1, [r7, #4]
 800ed0a:	4613      	mov	r3, r2
 800ed0c:	00db      	lsls	r3, r3, #3
 800ed0e:	4413      	add	r3, r2
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	440b      	add	r3, r1
 800ed14:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	78fb      	ldrb	r3, [r7, #3]
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	f7fe fb8b 	bl	800d438 <USBD_LL_DataOutStage>
}
 800ed22:	bf00      	nop
 800ed24:	3708      	adds	r7, #8
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b082      	sub	sp, #8
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
 800ed32:	460b      	mov	r3, r1
 800ed34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800ed3c:	78fa      	ldrb	r2, [r7, #3]
 800ed3e:	6879      	ldr	r1, [r7, #4]
 800ed40:	4613      	mov	r3, r2
 800ed42:	00db      	lsls	r3, r3, #3
 800ed44:	4413      	add	r3, r2
 800ed46:	009b      	lsls	r3, r3, #2
 800ed48:	440b      	add	r3, r1
 800ed4a:	3320      	adds	r3, #32
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	78fb      	ldrb	r3, [r7, #3]
 800ed50:	4619      	mov	r1, r3
 800ed52:	f7fe fc24 	bl	800d59e <USBD_LL_DataInStage>
}
 800ed56:	bf00      	nop
 800ed58:	3708      	adds	r7, #8
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b082      	sub	sp, #8
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7fe fd5e 	bl	800d82e <USBD_LL_SOF>
}
 800ed72:	bf00      	nop
 800ed74:	3708      	adds	r7, #8
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}

0800ed7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed7a:	b580      	push	{r7, lr}
 800ed7c:	b084      	sub	sp, #16
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ed82:	2301      	movs	r3, #1
 800ed84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	79db      	ldrb	r3, [r3, #7]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d102      	bne.n	800ed94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	73fb      	strb	r3, [r7, #15]
 800ed92:	e008      	b.n	800eda6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	79db      	ldrb	r3, [r3, #7]
 800ed98:	2b02      	cmp	r3, #2
 800ed9a:	d102      	bne.n	800eda2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	73fb      	strb	r3, [r7, #15]
 800eda0:	e001      	b.n	800eda6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800eda2:	f7f2 fc03 	bl	80015ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800edac:	7bfa      	ldrb	r2, [r7, #15]
 800edae:	4611      	mov	r1, r2
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7fe fcf8 	bl	800d7a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7fe fca0 	bl	800d702 <USBD_LL_Reset>
}
 800edc2:	bf00      	nop
 800edc4:	3710      	adds	r7, #16
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
	...

0800edcc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fe fcf3 	bl	800d7c6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	6812      	ldr	r2, [r2, #0]
 800edee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800edf2:	f043 0301 	orr.w	r3, r3, #1
 800edf6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	7adb      	ldrb	r3, [r3, #11]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d005      	beq.n	800ee0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee00:	4b04      	ldr	r3, [pc, #16]	; (800ee14 <HAL_PCD_SuspendCallback+0x48>)
 800ee02:	691b      	ldr	r3, [r3, #16]
 800ee04:	4a03      	ldr	r2, [pc, #12]	; (800ee14 <HAL_PCD_SuspendCallback+0x48>)
 800ee06:	f043 0306 	orr.w	r3, r3, #6
 800ee0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ee0c:	bf00      	nop
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	e000ed00 	.word	0xe000ed00

0800ee18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7fe fce9 	bl	800d7fe <USBD_LL_Resume>
}
 800ee2c:	bf00      	nop
 800ee2e:	3708      	adds	r7, #8
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ee46:	78fa      	ldrb	r2, [r7, #3]
 800ee48:	4611      	mov	r1, r2
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7fe fd41 	bl	800d8d2 <USBD_LL_IsoOUTIncomplete>
}
 800ee50:	bf00      	nop
 800ee52:	3708      	adds	r7, #8
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	460b      	mov	r3, r1
 800ee62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ee6a:	78fa      	ldrb	r2, [r7, #3]
 800ee6c:	4611      	mov	r1, r2
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fe fcfd 	bl	800d86e <USBD_LL_IsoINIncomplete>
}
 800ee74:	bf00      	nop
 800ee76:	3708      	adds	r7, #8
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fe fd53 	bl	800d936 <USBD_LL_DevConnected>
}
 800ee90:	bf00      	nop
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fe fd50 	bl	800d94c <USBD_LL_DevDisconnected>
}
 800eeac:	bf00      	nop
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d140      	bne.n	800ef46 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800eec4:	4a22      	ldr	r2, [pc, #136]	; (800ef50 <USBD_LL_Init+0x9c>)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4a20      	ldr	r2, [pc, #128]	; (800ef50 <USBD_LL_Init+0x9c>)
 800eed0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800eed4:	4b1e      	ldr	r3, [pc, #120]	; (800ef50 <USBD_LL_Init+0x9c>)
 800eed6:	4a1f      	ldr	r2, [pc, #124]	; (800ef54 <USBD_LL_Init+0xa0>)
 800eed8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800eeda:	4b1d      	ldr	r3, [pc, #116]	; (800ef50 <USBD_LL_Init+0x9c>)
 800eedc:	2206      	movs	r2, #6
 800eede:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800eee0:	4b1b      	ldr	r3, [pc, #108]	; (800ef50 <USBD_LL_Init+0x9c>)
 800eee2:	2202      	movs	r2, #2
 800eee4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800eee6:	4b1a      	ldr	r3, [pc, #104]	; (800ef50 <USBD_LL_Init+0x9c>)
 800eee8:	2200      	movs	r2, #0
 800eeea:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800eeec:	4b18      	ldr	r3, [pc, #96]	; (800ef50 <USBD_LL_Init+0x9c>)
 800eeee:	2202      	movs	r2, #2
 800eef0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800eef2:	4b17      	ldr	r3, [pc, #92]	; (800ef50 <USBD_LL_Init+0x9c>)
 800eef4:	2200      	movs	r2, #0
 800eef6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800eef8:	4b15      	ldr	r3, [pc, #84]	; (800ef50 <USBD_LL_Init+0x9c>)
 800eefa:	2200      	movs	r2, #0
 800eefc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800eefe:	4b14      	ldr	r3, [pc, #80]	; (800ef50 <USBD_LL_Init+0x9c>)
 800ef00:	2200      	movs	r2, #0
 800ef02:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ef04:	4b12      	ldr	r3, [pc, #72]	; (800ef50 <USBD_LL_Init+0x9c>)
 800ef06:	2200      	movs	r2, #0
 800ef08:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800ef0a:	4b11      	ldr	r3, [pc, #68]	; (800ef50 <USBD_LL_Init+0x9c>)
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ef10:	4b0f      	ldr	r3, [pc, #60]	; (800ef50 <USBD_LL_Init+0x9c>)
 800ef12:	2200      	movs	r2, #0
 800ef14:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800ef16:	480e      	ldr	r0, [pc, #56]	; (800ef50 <USBD_LL_Init+0x9c>)
 800ef18:	f7f5 ff75 	bl	8004e06 <HAL_PCD_Init>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d001      	beq.n	800ef26 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ef22:	f7f2 fb43 	bl	80015ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800ef26:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ef2a:	4809      	ldr	r0, [pc, #36]	; (800ef50 <USBD_LL_Init+0x9c>)
 800ef2c:	f7f7 f99f 	bl	800626e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800ef30:	2280      	movs	r2, #128	; 0x80
 800ef32:	2100      	movs	r1, #0
 800ef34:	4806      	ldr	r0, [pc, #24]	; (800ef50 <USBD_LL_Init+0x9c>)
 800ef36:	f7f7 f953 	bl	80061e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800ef3a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800ef3e:	2101      	movs	r1, #1
 800ef40:	4803      	ldr	r0, [pc, #12]	; (800ef50 <USBD_LL_Init+0x9c>)
 800ef42:	f7f7 f94d 	bl	80061e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ef46:	2300      	movs	r3, #0
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	20005a54 	.word	0x20005a54
 800ef54:	40040000 	.word	0x40040000

0800ef58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef60:	2300      	movs	r3, #0
 800ef62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef64:	2300      	movs	r3, #0
 800ef66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7f6 f858 	bl	8005024 <HAL_PCD_Start>
 800ef74:	4603      	mov	r3, r0
 800ef76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef78:	7bfb      	ldrb	r3, [r7, #15]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f000 f942 	bl	800f204 <USBD_Get_USB_Status>
 800ef80:	4603      	mov	r3, r0
 800ef82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3710      	adds	r7, #16
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ef8e:	b580      	push	{r7, lr}
 800ef90:	b084      	sub	sp, #16
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
 800ef96:	4608      	mov	r0, r1
 800ef98:	4611      	mov	r1, r2
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	70fb      	strb	r3, [r7, #3]
 800efa0:	460b      	mov	r3, r1
 800efa2:	70bb      	strb	r3, [r7, #2]
 800efa4:	4613      	mov	r3, r2
 800efa6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efa8:	2300      	movs	r3, #0
 800efaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efac:	2300      	movs	r3, #0
 800efae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800efb6:	78bb      	ldrb	r3, [r7, #2]
 800efb8:	883a      	ldrh	r2, [r7, #0]
 800efba:	78f9      	ldrb	r1, [r7, #3]
 800efbc:	f7f6 fd2c 	bl	8005a18 <HAL_PCD_EP_Open>
 800efc0:	4603      	mov	r3, r0
 800efc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efc4:	7bfb      	ldrb	r3, [r7, #15]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f000 f91c 	bl	800f204 <USBD_Get_USB_Status>
 800efcc:	4603      	mov	r3, r0
 800efce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3710      	adds	r7, #16
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}

0800efda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efda:	b580      	push	{r7, lr}
 800efdc:	b084      	sub	sp, #16
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
 800efe2:	460b      	mov	r3, r1
 800efe4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efe6:	2300      	movs	r3, #0
 800efe8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efea:	2300      	movs	r3, #0
 800efec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eff4:	78fa      	ldrb	r2, [r7, #3]
 800eff6:	4611      	mov	r1, r2
 800eff8:	4618      	mov	r0, r3
 800effa:	f7f6 fd75 	bl	8005ae8 <HAL_PCD_EP_Close>
 800effe:	4603      	mov	r3, r0
 800f000:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f002:	7bfb      	ldrb	r3, [r7, #15]
 800f004:	4618      	mov	r0, r3
 800f006:	f000 f8fd 	bl	800f204 <USBD_Get_USB_Status>
 800f00a:	4603      	mov	r3, r0
 800f00c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f00e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f010:	4618      	mov	r0, r3
 800f012:	3710      	adds	r7, #16
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	460b      	mov	r3, r1
 800f022:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f024:	2300      	movs	r3, #0
 800f026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f028:	2300      	movs	r3, #0
 800f02a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f032:	78fa      	ldrb	r2, [r7, #3]
 800f034:	4611      	mov	r1, r2
 800f036:	4618      	mov	r0, r3
 800f038:	f7f6 fe2d 	bl	8005c96 <HAL_PCD_EP_SetStall>
 800f03c:	4603      	mov	r3, r0
 800f03e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f040:	7bfb      	ldrb	r3, [r7, #15]
 800f042:	4618      	mov	r0, r3
 800f044:	f000 f8de 	bl	800f204 <USBD_Get_USB_Status>
 800f048:	4603      	mov	r3, r0
 800f04a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f04c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3710      	adds	r7, #16
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f056:	b580      	push	{r7, lr}
 800f058:	b084      	sub	sp, #16
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
 800f05e:	460b      	mov	r3, r1
 800f060:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f062:	2300      	movs	r3, #0
 800f064:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f066:	2300      	movs	r3, #0
 800f068:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f070:	78fa      	ldrb	r2, [r7, #3]
 800f072:	4611      	mov	r1, r2
 800f074:	4618      	mov	r0, r3
 800f076:	f7f6 fe71 	bl	8005d5c <HAL_PCD_EP_ClrStall>
 800f07a:	4603      	mov	r3, r0
 800f07c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f07e:	7bfb      	ldrb	r3, [r7, #15]
 800f080:	4618      	mov	r0, r3
 800f082:	f000 f8bf 	bl	800f204 <USBD_Get_USB_Status>
 800f086:	4603      	mov	r3, r0
 800f088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f08a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3710      	adds	r7, #16
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f094:	b480      	push	{r7}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	460b      	mov	r3, r1
 800f09e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f0a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	da0b      	bge.n	800f0c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f0b0:	78fb      	ldrb	r3, [r7, #3]
 800f0b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f0b6:	68f9      	ldr	r1, [r7, #12]
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	00db      	lsls	r3, r3, #3
 800f0bc:	4413      	add	r3, r2
 800f0be:	009b      	lsls	r3, r3, #2
 800f0c0:	440b      	add	r3, r1
 800f0c2:	3316      	adds	r3, #22
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	e00b      	b.n	800f0e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f0c8:	78fb      	ldrb	r3, [r7, #3]
 800f0ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f0ce:	68f9      	ldr	r1, [r7, #12]
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	00db      	lsls	r3, r3, #3
 800f0d4:	4413      	add	r3, r2
 800f0d6:	009b      	lsls	r3, r3, #2
 800f0d8:	440b      	add	r3, r1
 800f0da:	f203 2356 	addw	r3, r3, #598	; 0x256
 800f0de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3714      	adds	r7, #20
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr

0800f0ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f106:	78fa      	ldrb	r2, [r7, #3]
 800f108:	4611      	mov	r1, r2
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7f6 fc60 	bl	80059d0 <HAL_PCD_SetAddress>
 800f110:	4603      	mov	r3, r0
 800f112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f114:	7bfb      	ldrb	r3, [r7, #15]
 800f116:	4618      	mov	r0, r3
 800f118:	f000 f874 	bl	800f204 <USBD_Get_USB_Status>
 800f11c:	4603      	mov	r3, r0
 800f11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f120:	7bbb      	ldrb	r3, [r7, #14]
}
 800f122:	4618      	mov	r0, r3
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}

0800f12a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b086      	sub	sp, #24
 800f12e:	af00      	add	r7, sp, #0
 800f130:	60f8      	str	r0, [r7, #12]
 800f132:	607a      	str	r2, [r7, #4]
 800f134:	603b      	str	r3, [r7, #0]
 800f136:	460b      	mov	r3, r1
 800f138:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f13a:	2300      	movs	r3, #0
 800f13c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f13e:	2300      	movs	r3, #0
 800f140:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f148:	7af9      	ldrb	r1, [r7, #11]
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	f7f6 fd68 	bl	8005c22 <HAL_PCD_EP_Transmit>
 800f152:	4603      	mov	r3, r0
 800f154:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f156:	7dfb      	ldrb	r3, [r7, #23]
 800f158:	4618      	mov	r0, r3
 800f15a:	f000 f853 	bl	800f204 <USBD_Get_USB_Status>
 800f15e:	4603      	mov	r3, r0
 800f160:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f162:	7dbb      	ldrb	r3, [r7, #22]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3718      	adds	r7, #24
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b086      	sub	sp, #24
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	607a      	str	r2, [r7, #4]
 800f176:	603b      	str	r3, [r7, #0]
 800f178:	460b      	mov	r3, r1
 800f17a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f17c:	2300      	movs	r3, #0
 800f17e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f180:	2300      	movs	r3, #0
 800f182:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f18a:	7af9      	ldrb	r1, [r7, #11]
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	687a      	ldr	r2, [r7, #4]
 800f190:	f7f6 fcf4 	bl	8005b7c <HAL_PCD_EP_Receive>
 800f194:	4603      	mov	r3, r0
 800f196:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f198:	7dfb      	ldrb	r3, [r7, #23]
 800f19a:	4618      	mov	r0, r3
 800f19c:	f000 f832 	bl	800f204 <USBD_Get_USB_Status>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f1a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3718      	adds	r7, #24
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b082      	sub	sp, #8
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	6078      	str	r0, [r7, #4]
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1c0:	78fa      	ldrb	r2, [r7, #3]
 800f1c2:	4611      	mov	r1, r2
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7f6 fd14 	bl	8005bf2 <HAL_PCD_EP_GetRxCount>
 800f1ca:	4603      	mov	r3, r0
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3708      	adds	r7, #8
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f1dc:	4b03      	ldr	r3, [pc, #12]	; (800f1ec <USBD_static_malloc+0x18>)
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	370c      	adds	r7, #12
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop
 800f1ec:	20005f38 	.word	0x20005f38

0800f1f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]

}
 800f1f8:	bf00      	nop
 800f1fa:	370c      	adds	r7, #12
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f204:	b480      	push	{r7}
 800f206:	b085      	sub	sp, #20
 800f208:	af00      	add	r7, sp, #0
 800f20a:	4603      	mov	r3, r0
 800f20c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f20e:	2300      	movs	r3, #0
 800f210:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f212:	79fb      	ldrb	r3, [r7, #7]
 800f214:	2b03      	cmp	r3, #3
 800f216:	d817      	bhi.n	800f248 <USBD_Get_USB_Status+0x44>
 800f218:	a201      	add	r2, pc, #4	; (adr r2, 800f220 <USBD_Get_USB_Status+0x1c>)
 800f21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f21e:	bf00      	nop
 800f220:	0800f231 	.word	0x0800f231
 800f224:	0800f237 	.word	0x0800f237
 800f228:	0800f23d 	.word	0x0800f23d
 800f22c:	0800f243 	.word	0x0800f243
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f230:	2300      	movs	r3, #0
 800f232:	73fb      	strb	r3, [r7, #15]
    break;
 800f234:	e00b      	b.n	800f24e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f236:	2303      	movs	r3, #3
 800f238:	73fb      	strb	r3, [r7, #15]
    break;
 800f23a:	e008      	b.n	800f24e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f23c:	2301      	movs	r3, #1
 800f23e:	73fb      	strb	r3, [r7, #15]
    break;
 800f240:	e005      	b.n	800f24e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f242:	2303      	movs	r3, #3
 800f244:	73fb      	strb	r3, [r7, #15]
    break;
 800f246:	e002      	b.n	800f24e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f248:	2303      	movs	r3, #3
 800f24a:	73fb      	strb	r3, [r7, #15]
    break;
 800f24c:	bf00      	nop
  }
  return usb_status;
 800f24e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f250:	4618      	mov	r0, r3
 800f252:	3714      	adds	r7, #20
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr

0800f25c <siprintf>:
 800f25c:	b40e      	push	{r1, r2, r3}
 800f25e:	b500      	push	{lr}
 800f260:	b09c      	sub	sp, #112	; 0x70
 800f262:	ab1d      	add	r3, sp, #116	; 0x74
 800f264:	9002      	str	r0, [sp, #8]
 800f266:	9006      	str	r0, [sp, #24]
 800f268:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f26c:	4809      	ldr	r0, [pc, #36]	; (800f294 <siprintf+0x38>)
 800f26e:	9107      	str	r1, [sp, #28]
 800f270:	9104      	str	r1, [sp, #16]
 800f272:	4909      	ldr	r1, [pc, #36]	; (800f298 <siprintf+0x3c>)
 800f274:	f853 2b04 	ldr.w	r2, [r3], #4
 800f278:	9105      	str	r1, [sp, #20]
 800f27a:	6800      	ldr	r0, [r0, #0]
 800f27c:	9301      	str	r3, [sp, #4]
 800f27e:	a902      	add	r1, sp, #8
 800f280:	f000 f9f6 	bl	800f670 <_svfiprintf_r>
 800f284:	9b02      	ldr	r3, [sp, #8]
 800f286:	2200      	movs	r2, #0
 800f288:	701a      	strb	r2, [r3, #0]
 800f28a:	b01c      	add	sp, #112	; 0x70
 800f28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f290:	b003      	add	sp, #12
 800f292:	4770      	bx	lr
 800f294:	200001d4 	.word	0x200001d4
 800f298:	ffff0208 	.word	0xffff0208

0800f29c <memset>:
 800f29c:	4402      	add	r2, r0
 800f29e:	4603      	mov	r3, r0
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d100      	bne.n	800f2a6 <memset+0xa>
 800f2a4:	4770      	bx	lr
 800f2a6:	f803 1b01 	strb.w	r1, [r3], #1
 800f2aa:	e7f9      	b.n	800f2a0 <memset+0x4>

0800f2ac <_reclaim_reent>:
 800f2ac:	4b29      	ldr	r3, [pc, #164]	; (800f354 <_reclaim_reent+0xa8>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	4283      	cmp	r3, r0
 800f2b2:	b570      	push	{r4, r5, r6, lr}
 800f2b4:	4604      	mov	r4, r0
 800f2b6:	d04b      	beq.n	800f350 <_reclaim_reent+0xa4>
 800f2b8:	69c3      	ldr	r3, [r0, #28]
 800f2ba:	b143      	cbz	r3, 800f2ce <_reclaim_reent+0x22>
 800f2bc:	68db      	ldr	r3, [r3, #12]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d144      	bne.n	800f34c <_reclaim_reent+0xa0>
 800f2c2:	69e3      	ldr	r3, [r4, #28]
 800f2c4:	6819      	ldr	r1, [r3, #0]
 800f2c6:	b111      	cbz	r1, 800f2ce <_reclaim_reent+0x22>
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f000 f87f 	bl	800f3cc <_free_r>
 800f2ce:	6961      	ldr	r1, [r4, #20]
 800f2d0:	b111      	cbz	r1, 800f2d8 <_reclaim_reent+0x2c>
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	f000 f87a 	bl	800f3cc <_free_r>
 800f2d8:	69e1      	ldr	r1, [r4, #28]
 800f2da:	b111      	cbz	r1, 800f2e2 <_reclaim_reent+0x36>
 800f2dc:	4620      	mov	r0, r4
 800f2de:	f000 f875 	bl	800f3cc <_free_r>
 800f2e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f2e4:	b111      	cbz	r1, 800f2ec <_reclaim_reent+0x40>
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f000 f870 	bl	800f3cc <_free_r>
 800f2ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2ee:	b111      	cbz	r1, 800f2f6 <_reclaim_reent+0x4a>
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	f000 f86b 	bl	800f3cc <_free_r>
 800f2f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f2f8:	b111      	cbz	r1, 800f300 <_reclaim_reent+0x54>
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f000 f866 	bl	800f3cc <_free_r>
 800f300:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f302:	b111      	cbz	r1, 800f30a <_reclaim_reent+0x5e>
 800f304:	4620      	mov	r0, r4
 800f306:	f000 f861 	bl	800f3cc <_free_r>
 800f30a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f30c:	b111      	cbz	r1, 800f314 <_reclaim_reent+0x68>
 800f30e:	4620      	mov	r0, r4
 800f310:	f000 f85c 	bl	800f3cc <_free_r>
 800f314:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f316:	b111      	cbz	r1, 800f31e <_reclaim_reent+0x72>
 800f318:	4620      	mov	r0, r4
 800f31a:	f000 f857 	bl	800f3cc <_free_r>
 800f31e:	6a23      	ldr	r3, [r4, #32]
 800f320:	b1b3      	cbz	r3, 800f350 <_reclaim_reent+0xa4>
 800f322:	4620      	mov	r0, r4
 800f324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f328:	4718      	bx	r3
 800f32a:	5949      	ldr	r1, [r1, r5]
 800f32c:	b941      	cbnz	r1, 800f340 <_reclaim_reent+0x94>
 800f32e:	3504      	adds	r5, #4
 800f330:	69e3      	ldr	r3, [r4, #28]
 800f332:	2d80      	cmp	r5, #128	; 0x80
 800f334:	68d9      	ldr	r1, [r3, #12]
 800f336:	d1f8      	bne.n	800f32a <_reclaim_reent+0x7e>
 800f338:	4620      	mov	r0, r4
 800f33a:	f000 f847 	bl	800f3cc <_free_r>
 800f33e:	e7c0      	b.n	800f2c2 <_reclaim_reent+0x16>
 800f340:	680e      	ldr	r6, [r1, #0]
 800f342:	4620      	mov	r0, r4
 800f344:	f000 f842 	bl	800f3cc <_free_r>
 800f348:	4631      	mov	r1, r6
 800f34a:	e7ef      	b.n	800f32c <_reclaim_reent+0x80>
 800f34c:	2500      	movs	r5, #0
 800f34e:	e7ef      	b.n	800f330 <_reclaim_reent+0x84>
 800f350:	bd70      	pop	{r4, r5, r6, pc}
 800f352:	bf00      	nop
 800f354:	200001d4 	.word	0x200001d4

0800f358 <__errno>:
 800f358:	4b01      	ldr	r3, [pc, #4]	; (800f360 <__errno+0x8>)
 800f35a:	6818      	ldr	r0, [r3, #0]
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	200001d4 	.word	0x200001d4

0800f364 <__libc_init_array>:
 800f364:	b570      	push	{r4, r5, r6, lr}
 800f366:	4d0d      	ldr	r5, [pc, #52]	; (800f39c <__libc_init_array+0x38>)
 800f368:	4c0d      	ldr	r4, [pc, #52]	; (800f3a0 <__libc_init_array+0x3c>)
 800f36a:	1b64      	subs	r4, r4, r5
 800f36c:	10a4      	asrs	r4, r4, #2
 800f36e:	2600      	movs	r6, #0
 800f370:	42a6      	cmp	r6, r4
 800f372:	d109      	bne.n	800f388 <__libc_init_array+0x24>
 800f374:	4d0b      	ldr	r5, [pc, #44]	; (800f3a4 <__libc_init_array+0x40>)
 800f376:	4c0c      	ldr	r4, [pc, #48]	; (800f3a8 <__libc_init_array+0x44>)
 800f378:	f000 fc6a 	bl	800fc50 <_init>
 800f37c:	1b64      	subs	r4, r4, r5
 800f37e:	10a4      	asrs	r4, r4, #2
 800f380:	2600      	movs	r6, #0
 800f382:	42a6      	cmp	r6, r4
 800f384:	d105      	bne.n	800f392 <__libc_init_array+0x2e>
 800f386:	bd70      	pop	{r4, r5, r6, pc}
 800f388:	f855 3b04 	ldr.w	r3, [r5], #4
 800f38c:	4798      	blx	r3
 800f38e:	3601      	adds	r6, #1
 800f390:	e7ee      	b.n	800f370 <__libc_init_array+0xc>
 800f392:	f855 3b04 	ldr.w	r3, [r5], #4
 800f396:	4798      	blx	r3
 800f398:	3601      	adds	r6, #1
 800f39a:	e7f2      	b.n	800f382 <__libc_init_array+0x1e>
 800f39c:	080118d4 	.word	0x080118d4
 800f3a0:	080118d4 	.word	0x080118d4
 800f3a4:	080118d4 	.word	0x080118d4
 800f3a8:	080118d8 	.word	0x080118d8

0800f3ac <__retarget_lock_acquire_recursive>:
 800f3ac:	4770      	bx	lr

0800f3ae <__retarget_lock_release_recursive>:
 800f3ae:	4770      	bx	lr

0800f3b0 <memcpy>:
 800f3b0:	440a      	add	r2, r1
 800f3b2:	4291      	cmp	r1, r2
 800f3b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3b8:	d100      	bne.n	800f3bc <memcpy+0xc>
 800f3ba:	4770      	bx	lr
 800f3bc:	b510      	push	{r4, lr}
 800f3be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3c6:	4291      	cmp	r1, r2
 800f3c8:	d1f9      	bne.n	800f3be <memcpy+0xe>
 800f3ca:	bd10      	pop	{r4, pc}

0800f3cc <_free_r>:
 800f3cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3ce:	2900      	cmp	r1, #0
 800f3d0:	d044      	beq.n	800f45c <_free_r+0x90>
 800f3d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3d6:	9001      	str	r0, [sp, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	f1a1 0404 	sub.w	r4, r1, #4
 800f3de:	bfb8      	it	lt
 800f3e0:	18e4      	addlt	r4, r4, r3
 800f3e2:	f000 f8df 	bl	800f5a4 <__malloc_lock>
 800f3e6:	4a1e      	ldr	r2, [pc, #120]	; (800f460 <_free_r+0x94>)
 800f3e8:	9801      	ldr	r0, [sp, #4]
 800f3ea:	6813      	ldr	r3, [r2, #0]
 800f3ec:	b933      	cbnz	r3, 800f3fc <_free_r+0x30>
 800f3ee:	6063      	str	r3, [r4, #4]
 800f3f0:	6014      	str	r4, [r2, #0]
 800f3f2:	b003      	add	sp, #12
 800f3f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3f8:	f000 b8da 	b.w	800f5b0 <__malloc_unlock>
 800f3fc:	42a3      	cmp	r3, r4
 800f3fe:	d908      	bls.n	800f412 <_free_r+0x46>
 800f400:	6825      	ldr	r5, [r4, #0]
 800f402:	1961      	adds	r1, r4, r5
 800f404:	428b      	cmp	r3, r1
 800f406:	bf01      	itttt	eq
 800f408:	6819      	ldreq	r1, [r3, #0]
 800f40a:	685b      	ldreq	r3, [r3, #4]
 800f40c:	1949      	addeq	r1, r1, r5
 800f40e:	6021      	streq	r1, [r4, #0]
 800f410:	e7ed      	b.n	800f3ee <_free_r+0x22>
 800f412:	461a      	mov	r2, r3
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	b10b      	cbz	r3, 800f41c <_free_r+0x50>
 800f418:	42a3      	cmp	r3, r4
 800f41a:	d9fa      	bls.n	800f412 <_free_r+0x46>
 800f41c:	6811      	ldr	r1, [r2, #0]
 800f41e:	1855      	adds	r5, r2, r1
 800f420:	42a5      	cmp	r5, r4
 800f422:	d10b      	bne.n	800f43c <_free_r+0x70>
 800f424:	6824      	ldr	r4, [r4, #0]
 800f426:	4421      	add	r1, r4
 800f428:	1854      	adds	r4, r2, r1
 800f42a:	42a3      	cmp	r3, r4
 800f42c:	6011      	str	r1, [r2, #0]
 800f42e:	d1e0      	bne.n	800f3f2 <_free_r+0x26>
 800f430:	681c      	ldr	r4, [r3, #0]
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	6053      	str	r3, [r2, #4]
 800f436:	440c      	add	r4, r1
 800f438:	6014      	str	r4, [r2, #0]
 800f43a:	e7da      	b.n	800f3f2 <_free_r+0x26>
 800f43c:	d902      	bls.n	800f444 <_free_r+0x78>
 800f43e:	230c      	movs	r3, #12
 800f440:	6003      	str	r3, [r0, #0]
 800f442:	e7d6      	b.n	800f3f2 <_free_r+0x26>
 800f444:	6825      	ldr	r5, [r4, #0]
 800f446:	1961      	adds	r1, r4, r5
 800f448:	428b      	cmp	r3, r1
 800f44a:	bf04      	itt	eq
 800f44c:	6819      	ldreq	r1, [r3, #0]
 800f44e:	685b      	ldreq	r3, [r3, #4]
 800f450:	6063      	str	r3, [r4, #4]
 800f452:	bf04      	itt	eq
 800f454:	1949      	addeq	r1, r1, r5
 800f456:	6021      	streq	r1, [r4, #0]
 800f458:	6054      	str	r4, [r2, #4]
 800f45a:	e7ca      	b.n	800f3f2 <_free_r+0x26>
 800f45c:	b003      	add	sp, #12
 800f45e:	bd30      	pop	{r4, r5, pc}
 800f460:	20006298 	.word	0x20006298

0800f464 <sbrk_aligned>:
 800f464:	b570      	push	{r4, r5, r6, lr}
 800f466:	4e0e      	ldr	r6, [pc, #56]	; (800f4a0 <sbrk_aligned+0x3c>)
 800f468:	460c      	mov	r4, r1
 800f46a:	6831      	ldr	r1, [r6, #0]
 800f46c:	4605      	mov	r5, r0
 800f46e:	b911      	cbnz	r1, 800f476 <sbrk_aligned+0x12>
 800f470:	f000 fba6 	bl	800fbc0 <_sbrk_r>
 800f474:	6030      	str	r0, [r6, #0]
 800f476:	4621      	mov	r1, r4
 800f478:	4628      	mov	r0, r5
 800f47a:	f000 fba1 	bl	800fbc0 <_sbrk_r>
 800f47e:	1c43      	adds	r3, r0, #1
 800f480:	d00a      	beq.n	800f498 <sbrk_aligned+0x34>
 800f482:	1cc4      	adds	r4, r0, #3
 800f484:	f024 0403 	bic.w	r4, r4, #3
 800f488:	42a0      	cmp	r0, r4
 800f48a:	d007      	beq.n	800f49c <sbrk_aligned+0x38>
 800f48c:	1a21      	subs	r1, r4, r0
 800f48e:	4628      	mov	r0, r5
 800f490:	f000 fb96 	bl	800fbc0 <_sbrk_r>
 800f494:	3001      	adds	r0, #1
 800f496:	d101      	bne.n	800f49c <sbrk_aligned+0x38>
 800f498:	f04f 34ff 	mov.w	r4, #4294967295
 800f49c:	4620      	mov	r0, r4
 800f49e:	bd70      	pop	{r4, r5, r6, pc}
 800f4a0:	2000629c 	.word	0x2000629c

0800f4a4 <_malloc_r>:
 800f4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4a8:	1ccd      	adds	r5, r1, #3
 800f4aa:	f025 0503 	bic.w	r5, r5, #3
 800f4ae:	3508      	adds	r5, #8
 800f4b0:	2d0c      	cmp	r5, #12
 800f4b2:	bf38      	it	cc
 800f4b4:	250c      	movcc	r5, #12
 800f4b6:	2d00      	cmp	r5, #0
 800f4b8:	4607      	mov	r7, r0
 800f4ba:	db01      	blt.n	800f4c0 <_malloc_r+0x1c>
 800f4bc:	42a9      	cmp	r1, r5
 800f4be:	d905      	bls.n	800f4cc <_malloc_r+0x28>
 800f4c0:	230c      	movs	r3, #12
 800f4c2:	603b      	str	r3, [r7, #0]
 800f4c4:	2600      	movs	r6, #0
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f5a0 <_malloc_r+0xfc>
 800f4d0:	f000 f868 	bl	800f5a4 <__malloc_lock>
 800f4d4:	f8d8 3000 	ldr.w	r3, [r8]
 800f4d8:	461c      	mov	r4, r3
 800f4da:	bb5c      	cbnz	r4, 800f534 <_malloc_r+0x90>
 800f4dc:	4629      	mov	r1, r5
 800f4de:	4638      	mov	r0, r7
 800f4e0:	f7ff ffc0 	bl	800f464 <sbrk_aligned>
 800f4e4:	1c43      	adds	r3, r0, #1
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	d155      	bne.n	800f596 <_malloc_r+0xf2>
 800f4ea:	f8d8 4000 	ldr.w	r4, [r8]
 800f4ee:	4626      	mov	r6, r4
 800f4f0:	2e00      	cmp	r6, #0
 800f4f2:	d145      	bne.n	800f580 <_malloc_r+0xdc>
 800f4f4:	2c00      	cmp	r4, #0
 800f4f6:	d048      	beq.n	800f58a <_malloc_r+0xe6>
 800f4f8:	6823      	ldr	r3, [r4, #0]
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	4638      	mov	r0, r7
 800f4fe:	eb04 0903 	add.w	r9, r4, r3
 800f502:	f000 fb5d 	bl	800fbc0 <_sbrk_r>
 800f506:	4581      	cmp	r9, r0
 800f508:	d13f      	bne.n	800f58a <_malloc_r+0xe6>
 800f50a:	6821      	ldr	r1, [r4, #0]
 800f50c:	1a6d      	subs	r5, r5, r1
 800f50e:	4629      	mov	r1, r5
 800f510:	4638      	mov	r0, r7
 800f512:	f7ff ffa7 	bl	800f464 <sbrk_aligned>
 800f516:	3001      	adds	r0, #1
 800f518:	d037      	beq.n	800f58a <_malloc_r+0xe6>
 800f51a:	6823      	ldr	r3, [r4, #0]
 800f51c:	442b      	add	r3, r5
 800f51e:	6023      	str	r3, [r4, #0]
 800f520:	f8d8 3000 	ldr.w	r3, [r8]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d038      	beq.n	800f59a <_malloc_r+0xf6>
 800f528:	685a      	ldr	r2, [r3, #4]
 800f52a:	42a2      	cmp	r2, r4
 800f52c:	d12b      	bne.n	800f586 <_malloc_r+0xe2>
 800f52e:	2200      	movs	r2, #0
 800f530:	605a      	str	r2, [r3, #4]
 800f532:	e00f      	b.n	800f554 <_malloc_r+0xb0>
 800f534:	6822      	ldr	r2, [r4, #0]
 800f536:	1b52      	subs	r2, r2, r5
 800f538:	d41f      	bmi.n	800f57a <_malloc_r+0xd6>
 800f53a:	2a0b      	cmp	r2, #11
 800f53c:	d917      	bls.n	800f56e <_malloc_r+0xca>
 800f53e:	1961      	adds	r1, r4, r5
 800f540:	42a3      	cmp	r3, r4
 800f542:	6025      	str	r5, [r4, #0]
 800f544:	bf18      	it	ne
 800f546:	6059      	strne	r1, [r3, #4]
 800f548:	6863      	ldr	r3, [r4, #4]
 800f54a:	bf08      	it	eq
 800f54c:	f8c8 1000 	streq.w	r1, [r8]
 800f550:	5162      	str	r2, [r4, r5]
 800f552:	604b      	str	r3, [r1, #4]
 800f554:	4638      	mov	r0, r7
 800f556:	f104 060b 	add.w	r6, r4, #11
 800f55a:	f000 f829 	bl	800f5b0 <__malloc_unlock>
 800f55e:	f026 0607 	bic.w	r6, r6, #7
 800f562:	1d23      	adds	r3, r4, #4
 800f564:	1af2      	subs	r2, r6, r3
 800f566:	d0ae      	beq.n	800f4c6 <_malloc_r+0x22>
 800f568:	1b9b      	subs	r3, r3, r6
 800f56a:	50a3      	str	r3, [r4, r2]
 800f56c:	e7ab      	b.n	800f4c6 <_malloc_r+0x22>
 800f56e:	42a3      	cmp	r3, r4
 800f570:	6862      	ldr	r2, [r4, #4]
 800f572:	d1dd      	bne.n	800f530 <_malloc_r+0x8c>
 800f574:	f8c8 2000 	str.w	r2, [r8]
 800f578:	e7ec      	b.n	800f554 <_malloc_r+0xb0>
 800f57a:	4623      	mov	r3, r4
 800f57c:	6864      	ldr	r4, [r4, #4]
 800f57e:	e7ac      	b.n	800f4da <_malloc_r+0x36>
 800f580:	4634      	mov	r4, r6
 800f582:	6876      	ldr	r6, [r6, #4]
 800f584:	e7b4      	b.n	800f4f0 <_malloc_r+0x4c>
 800f586:	4613      	mov	r3, r2
 800f588:	e7cc      	b.n	800f524 <_malloc_r+0x80>
 800f58a:	230c      	movs	r3, #12
 800f58c:	603b      	str	r3, [r7, #0]
 800f58e:	4638      	mov	r0, r7
 800f590:	f000 f80e 	bl	800f5b0 <__malloc_unlock>
 800f594:	e797      	b.n	800f4c6 <_malloc_r+0x22>
 800f596:	6025      	str	r5, [r4, #0]
 800f598:	e7dc      	b.n	800f554 <_malloc_r+0xb0>
 800f59a:	605b      	str	r3, [r3, #4]
 800f59c:	deff      	udf	#255	; 0xff
 800f59e:	bf00      	nop
 800f5a0:	20006298 	.word	0x20006298

0800f5a4 <__malloc_lock>:
 800f5a4:	4801      	ldr	r0, [pc, #4]	; (800f5ac <__malloc_lock+0x8>)
 800f5a6:	f7ff bf01 	b.w	800f3ac <__retarget_lock_acquire_recursive>
 800f5aa:	bf00      	nop
 800f5ac:	20006294 	.word	0x20006294

0800f5b0 <__malloc_unlock>:
 800f5b0:	4801      	ldr	r0, [pc, #4]	; (800f5b8 <__malloc_unlock+0x8>)
 800f5b2:	f7ff befc 	b.w	800f3ae <__retarget_lock_release_recursive>
 800f5b6:	bf00      	nop
 800f5b8:	20006294 	.word	0x20006294

0800f5bc <__ssputs_r>:
 800f5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5c0:	688e      	ldr	r6, [r1, #8]
 800f5c2:	461f      	mov	r7, r3
 800f5c4:	42be      	cmp	r6, r7
 800f5c6:	680b      	ldr	r3, [r1, #0]
 800f5c8:	4682      	mov	sl, r0
 800f5ca:	460c      	mov	r4, r1
 800f5cc:	4690      	mov	r8, r2
 800f5ce:	d82c      	bhi.n	800f62a <__ssputs_r+0x6e>
 800f5d0:	898a      	ldrh	r2, [r1, #12]
 800f5d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f5d6:	d026      	beq.n	800f626 <__ssputs_r+0x6a>
 800f5d8:	6965      	ldr	r5, [r4, #20]
 800f5da:	6909      	ldr	r1, [r1, #16]
 800f5dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5e0:	eba3 0901 	sub.w	r9, r3, r1
 800f5e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5e8:	1c7b      	adds	r3, r7, #1
 800f5ea:	444b      	add	r3, r9
 800f5ec:	106d      	asrs	r5, r5, #1
 800f5ee:	429d      	cmp	r5, r3
 800f5f0:	bf38      	it	cc
 800f5f2:	461d      	movcc	r5, r3
 800f5f4:	0553      	lsls	r3, r2, #21
 800f5f6:	d527      	bpl.n	800f648 <__ssputs_r+0x8c>
 800f5f8:	4629      	mov	r1, r5
 800f5fa:	f7ff ff53 	bl	800f4a4 <_malloc_r>
 800f5fe:	4606      	mov	r6, r0
 800f600:	b360      	cbz	r0, 800f65c <__ssputs_r+0xa0>
 800f602:	6921      	ldr	r1, [r4, #16]
 800f604:	464a      	mov	r2, r9
 800f606:	f7ff fed3 	bl	800f3b0 <memcpy>
 800f60a:	89a3      	ldrh	r3, [r4, #12]
 800f60c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f614:	81a3      	strh	r3, [r4, #12]
 800f616:	6126      	str	r6, [r4, #16]
 800f618:	6165      	str	r5, [r4, #20]
 800f61a:	444e      	add	r6, r9
 800f61c:	eba5 0509 	sub.w	r5, r5, r9
 800f620:	6026      	str	r6, [r4, #0]
 800f622:	60a5      	str	r5, [r4, #8]
 800f624:	463e      	mov	r6, r7
 800f626:	42be      	cmp	r6, r7
 800f628:	d900      	bls.n	800f62c <__ssputs_r+0x70>
 800f62a:	463e      	mov	r6, r7
 800f62c:	6820      	ldr	r0, [r4, #0]
 800f62e:	4632      	mov	r2, r6
 800f630:	4641      	mov	r1, r8
 800f632:	f000 faab 	bl	800fb8c <memmove>
 800f636:	68a3      	ldr	r3, [r4, #8]
 800f638:	1b9b      	subs	r3, r3, r6
 800f63a:	60a3      	str	r3, [r4, #8]
 800f63c:	6823      	ldr	r3, [r4, #0]
 800f63e:	4433      	add	r3, r6
 800f640:	6023      	str	r3, [r4, #0]
 800f642:	2000      	movs	r0, #0
 800f644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f648:	462a      	mov	r2, r5
 800f64a:	f000 fac9 	bl	800fbe0 <_realloc_r>
 800f64e:	4606      	mov	r6, r0
 800f650:	2800      	cmp	r0, #0
 800f652:	d1e0      	bne.n	800f616 <__ssputs_r+0x5a>
 800f654:	6921      	ldr	r1, [r4, #16]
 800f656:	4650      	mov	r0, sl
 800f658:	f7ff feb8 	bl	800f3cc <_free_r>
 800f65c:	230c      	movs	r3, #12
 800f65e:	f8ca 3000 	str.w	r3, [sl]
 800f662:	89a3      	ldrh	r3, [r4, #12]
 800f664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f668:	81a3      	strh	r3, [r4, #12]
 800f66a:	f04f 30ff 	mov.w	r0, #4294967295
 800f66e:	e7e9      	b.n	800f644 <__ssputs_r+0x88>

0800f670 <_svfiprintf_r>:
 800f670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f674:	4698      	mov	r8, r3
 800f676:	898b      	ldrh	r3, [r1, #12]
 800f678:	061b      	lsls	r3, r3, #24
 800f67a:	b09d      	sub	sp, #116	; 0x74
 800f67c:	4607      	mov	r7, r0
 800f67e:	460d      	mov	r5, r1
 800f680:	4614      	mov	r4, r2
 800f682:	d50e      	bpl.n	800f6a2 <_svfiprintf_r+0x32>
 800f684:	690b      	ldr	r3, [r1, #16]
 800f686:	b963      	cbnz	r3, 800f6a2 <_svfiprintf_r+0x32>
 800f688:	2140      	movs	r1, #64	; 0x40
 800f68a:	f7ff ff0b 	bl	800f4a4 <_malloc_r>
 800f68e:	6028      	str	r0, [r5, #0]
 800f690:	6128      	str	r0, [r5, #16]
 800f692:	b920      	cbnz	r0, 800f69e <_svfiprintf_r+0x2e>
 800f694:	230c      	movs	r3, #12
 800f696:	603b      	str	r3, [r7, #0]
 800f698:	f04f 30ff 	mov.w	r0, #4294967295
 800f69c:	e0d0      	b.n	800f840 <_svfiprintf_r+0x1d0>
 800f69e:	2340      	movs	r3, #64	; 0x40
 800f6a0:	616b      	str	r3, [r5, #20]
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f6a6:	2320      	movs	r3, #32
 800f6a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6b0:	2330      	movs	r3, #48	; 0x30
 800f6b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f858 <_svfiprintf_r+0x1e8>
 800f6b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6ba:	f04f 0901 	mov.w	r9, #1
 800f6be:	4623      	mov	r3, r4
 800f6c0:	469a      	mov	sl, r3
 800f6c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6c6:	b10a      	cbz	r2, 800f6cc <_svfiprintf_r+0x5c>
 800f6c8:	2a25      	cmp	r2, #37	; 0x25
 800f6ca:	d1f9      	bne.n	800f6c0 <_svfiprintf_r+0x50>
 800f6cc:	ebba 0b04 	subs.w	fp, sl, r4
 800f6d0:	d00b      	beq.n	800f6ea <_svfiprintf_r+0x7a>
 800f6d2:	465b      	mov	r3, fp
 800f6d4:	4622      	mov	r2, r4
 800f6d6:	4629      	mov	r1, r5
 800f6d8:	4638      	mov	r0, r7
 800f6da:	f7ff ff6f 	bl	800f5bc <__ssputs_r>
 800f6de:	3001      	adds	r0, #1
 800f6e0:	f000 80a9 	beq.w	800f836 <_svfiprintf_r+0x1c6>
 800f6e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6e6:	445a      	add	r2, fp
 800f6e8:	9209      	str	r2, [sp, #36]	; 0x24
 800f6ea:	f89a 3000 	ldrb.w	r3, [sl]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	f000 80a1 	beq.w	800f836 <_svfiprintf_r+0x1c6>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f6fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6fe:	f10a 0a01 	add.w	sl, sl, #1
 800f702:	9304      	str	r3, [sp, #16]
 800f704:	9307      	str	r3, [sp, #28]
 800f706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f70a:	931a      	str	r3, [sp, #104]	; 0x68
 800f70c:	4654      	mov	r4, sl
 800f70e:	2205      	movs	r2, #5
 800f710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f714:	4850      	ldr	r0, [pc, #320]	; (800f858 <_svfiprintf_r+0x1e8>)
 800f716:	f7f0 fd73 	bl	8000200 <memchr>
 800f71a:	9a04      	ldr	r2, [sp, #16]
 800f71c:	b9d8      	cbnz	r0, 800f756 <_svfiprintf_r+0xe6>
 800f71e:	06d0      	lsls	r0, r2, #27
 800f720:	bf44      	itt	mi
 800f722:	2320      	movmi	r3, #32
 800f724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f728:	0711      	lsls	r1, r2, #28
 800f72a:	bf44      	itt	mi
 800f72c:	232b      	movmi	r3, #43	; 0x2b
 800f72e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f732:	f89a 3000 	ldrb.w	r3, [sl]
 800f736:	2b2a      	cmp	r3, #42	; 0x2a
 800f738:	d015      	beq.n	800f766 <_svfiprintf_r+0xf6>
 800f73a:	9a07      	ldr	r2, [sp, #28]
 800f73c:	4654      	mov	r4, sl
 800f73e:	2000      	movs	r0, #0
 800f740:	f04f 0c0a 	mov.w	ip, #10
 800f744:	4621      	mov	r1, r4
 800f746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f74a:	3b30      	subs	r3, #48	; 0x30
 800f74c:	2b09      	cmp	r3, #9
 800f74e:	d94d      	bls.n	800f7ec <_svfiprintf_r+0x17c>
 800f750:	b1b0      	cbz	r0, 800f780 <_svfiprintf_r+0x110>
 800f752:	9207      	str	r2, [sp, #28]
 800f754:	e014      	b.n	800f780 <_svfiprintf_r+0x110>
 800f756:	eba0 0308 	sub.w	r3, r0, r8
 800f75a:	fa09 f303 	lsl.w	r3, r9, r3
 800f75e:	4313      	orrs	r3, r2
 800f760:	9304      	str	r3, [sp, #16]
 800f762:	46a2      	mov	sl, r4
 800f764:	e7d2      	b.n	800f70c <_svfiprintf_r+0x9c>
 800f766:	9b03      	ldr	r3, [sp, #12]
 800f768:	1d19      	adds	r1, r3, #4
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	9103      	str	r1, [sp, #12]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	bfbb      	ittet	lt
 800f772:	425b      	neglt	r3, r3
 800f774:	f042 0202 	orrlt.w	r2, r2, #2
 800f778:	9307      	strge	r3, [sp, #28]
 800f77a:	9307      	strlt	r3, [sp, #28]
 800f77c:	bfb8      	it	lt
 800f77e:	9204      	strlt	r2, [sp, #16]
 800f780:	7823      	ldrb	r3, [r4, #0]
 800f782:	2b2e      	cmp	r3, #46	; 0x2e
 800f784:	d10c      	bne.n	800f7a0 <_svfiprintf_r+0x130>
 800f786:	7863      	ldrb	r3, [r4, #1]
 800f788:	2b2a      	cmp	r3, #42	; 0x2a
 800f78a:	d134      	bne.n	800f7f6 <_svfiprintf_r+0x186>
 800f78c:	9b03      	ldr	r3, [sp, #12]
 800f78e:	1d1a      	adds	r2, r3, #4
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	9203      	str	r2, [sp, #12]
 800f794:	2b00      	cmp	r3, #0
 800f796:	bfb8      	it	lt
 800f798:	f04f 33ff 	movlt.w	r3, #4294967295
 800f79c:	3402      	adds	r4, #2
 800f79e:	9305      	str	r3, [sp, #20]
 800f7a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f868 <_svfiprintf_r+0x1f8>
 800f7a4:	7821      	ldrb	r1, [r4, #0]
 800f7a6:	2203      	movs	r2, #3
 800f7a8:	4650      	mov	r0, sl
 800f7aa:	f7f0 fd29 	bl	8000200 <memchr>
 800f7ae:	b138      	cbz	r0, 800f7c0 <_svfiprintf_r+0x150>
 800f7b0:	9b04      	ldr	r3, [sp, #16]
 800f7b2:	eba0 000a 	sub.w	r0, r0, sl
 800f7b6:	2240      	movs	r2, #64	; 0x40
 800f7b8:	4082      	lsls	r2, r0
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	3401      	adds	r4, #1
 800f7be:	9304      	str	r3, [sp, #16]
 800f7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7c4:	4825      	ldr	r0, [pc, #148]	; (800f85c <_svfiprintf_r+0x1ec>)
 800f7c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7ca:	2206      	movs	r2, #6
 800f7cc:	f7f0 fd18 	bl	8000200 <memchr>
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	d038      	beq.n	800f846 <_svfiprintf_r+0x1d6>
 800f7d4:	4b22      	ldr	r3, [pc, #136]	; (800f860 <_svfiprintf_r+0x1f0>)
 800f7d6:	bb1b      	cbnz	r3, 800f820 <_svfiprintf_r+0x1b0>
 800f7d8:	9b03      	ldr	r3, [sp, #12]
 800f7da:	3307      	adds	r3, #7
 800f7dc:	f023 0307 	bic.w	r3, r3, #7
 800f7e0:	3308      	adds	r3, #8
 800f7e2:	9303      	str	r3, [sp, #12]
 800f7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7e6:	4433      	add	r3, r6
 800f7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7ea:	e768      	b.n	800f6be <_svfiprintf_r+0x4e>
 800f7ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7f0:	460c      	mov	r4, r1
 800f7f2:	2001      	movs	r0, #1
 800f7f4:	e7a6      	b.n	800f744 <_svfiprintf_r+0xd4>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	3401      	adds	r4, #1
 800f7fa:	9305      	str	r3, [sp, #20]
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	f04f 0c0a 	mov.w	ip, #10
 800f802:	4620      	mov	r0, r4
 800f804:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f808:	3a30      	subs	r2, #48	; 0x30
 800f80a:	2a09      	cmp	r2, #9
 800f80c:	d903      	bls.n	800f816 <_svfiprintf_r+0x1a6>
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d0c6      	beq.n	800f7a0 <_svfiprintf_r+0x130>
 800f812:	9105      	str	r1, [sp, #20]
 800f814:	e7c4      	b.n	800f7a0 <_svfiprintf_r+0x130>
 800f816:	fb0c 2101 	mla	r1, ip, r1, r2
 800f81a:	4604      	mov	r4, r0
 800f81c:	2301      	movs	r3, #1
 800f81e:	e7f0      	b.n	800f802 <_svfiprintf_r+0x192>
 800f820:	ab03      	add	r3, sp, #12
 800f822:	9300      	str	r3, [sp, #0]
 800f824:	462a      	mov	r2, r5
 800f826:	4b0f      	ldr	r3, [pc, #60]	; (800f864 <_svfiprintf_r+0x1f4>)
 800f828:	a904      	add	r1, sp, #16
 800f82a:	4638      	mov	r0, r7
 800f82c:	f3af 8000 	nop.w
 800f830:	1c42      	adds	r2, r0, #1
 800f832:	4606      	mov	r6, r0
 800f834:	d1d6      	bne.n	800f7e4 <_svfiprintf_r+0x174>
 800f836:	89ab      	ldrh	r3, [r5, #12]
 800f838:	065b      	lsls	r3, r3, #25
 800f83a:	f53f af2d 	bmi.w	800f698 <_svfiprintf_r+0x28>
 800f83e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f840:	b01d      	add	sp, #116	; 0x74
 800f842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f846:	ab03      	add	r3, sp, #12
 800f848:	9300      	str	r3, [sp, #0]
 800f84a:	462a      	mov	r2, r5
 800f84c:	4b05      	ldr	r3, [pc, #20]	; (800f864 <_svfiprintf_r+0x1f4>)
 800f84e:	a904      	add	r1, sp, #16
 800f850:	4638      	mov	r0, r7
 800f852:	f000 f879 	bl	800f948 <_printf_i>
 800f856:	e7eb      	b.n	800f830 <_svfiprintf_r+0x1c0>
 800f858:	08011898 	.word	0x08011898
 800f85c:	080118a2 	.word	0x080118a2
 800f860:	00000000 	.word	0x00000000
 800f864:	0800f5bd 	.word	0x0800f5bd
 800f868:	0801189e 	.word	0x0801189e

0800f86c <_printf_common>:
 800f86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f870:	4616      	mov	r6, r2
 800f872:	4699      	mov	r9, r3
 800f874:	688a      	ldr	r2, [r1, #8]
 800f876:	690b      	ldr	r3, [r1, #16]
 800f878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f87c:	4293      	cmp	r3, r2
 800f87e:	bfb8      	it	lt
 800f880:	4613      	movlt	r3, r2
 800f882:	6033      	str	r3, [r6, #0]
 800f884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f888:	4607      	mov	r7, r0
 800f88a:	460c      	mov	r4, r1
 800f88c:	b10a      	cbz	r2, 800f892 <_printf_common+0x26>
 800f88e:	3301      	adds	r3, #1
 800f890:	6033      	str	r3, [r6, #0]
 800f892:	6823      	ldr	r3, [r4, #0]
 800f894:	0699      	lsls	r1, r3, #26
 800f896:	bf42      	ittt	mi
 800f898:	6833      	ldrmi	r3, [r6, #0]
 800f89a:	3302      	addmi	r3, #2
 800f89c:	6033      	strmi	r3, [r6, #0]
 800f89e:	6825      	ldr	r5, [r4, #0]
 800f8a0:	f015 0506 	ands.w	r5, r5, #6
 800f8a4:	d106      	bne.n	800f8b4 <_printf_common+0x48>
 800f8a6:	f104 0a19 	add.w	sl, r4, #25
 800f8aa:	68e3      	ldr	r3, [r4, #12]
 800f8ac:	6832      	ldr	r2, [r6, #0]
 800f8ae:	1a9b      	subs	r3, r3, r2
 800f8b0:	42ab      	cmp	r3, r5
 800f8b2:	dc26      	bgt.n	800f902 <_printf_common+0x96>
 800f8b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f8b8:	1e13      	subs	r3, r2, #0
 800f8ba:	6822      	ldr	r2, [r4, #0]
 800f8bc:	bf18      	it	ne
 800f8be:	2301      	movne	r3, #1
 800f8c0:	0692      	lsls	r2, r2, #26
 800f8c2:	d42b      	bmi.n	800f91c <_printf_common+0xb0>
 800f8c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8c8:	4649      	mov	r1, r9
 800f8ca:	4638      	mov	r0, r7
 800f8cc:	47c0      	blx	r8
 800f8ce:	3001      	adds	r0, #1
 800f8d0:	d01e      	beq.n	800f910 <_printf_common+0xa4>
 800f8d2:	6823      	ldr	r3, [r4, #0]
 800f8d4:	6922      	ldr	r2, [r4, #16]
 800f8d6:	f003 0306 	and.w	r3, r3, #6
 800f8da:	2b04      	cmp	r3, #4
 800f8dc:	bf02      	ittt	eq
 800f8de:	68e5      	ldreq	r5, [r4, #12]
 800f8e0:	6833      	ldreq	r3, [r6, #0]
 800f8e2:	1aed      	subeq	r5, r5, r3
 800f8e4:	68a3      	ldr	r3, [r4, #8]
 800f8e6:	bf0c      	ite	eq
 800f8e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8ec:	2500      	movne	r5, #0
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	bfc4      	itt	gt
 800f8f2:	1a9b      	subgt	r3, r3, r2
 800f8f4:	18ed      	addgt	r5, r5, r3
 800f8f6:	2600      	movs	r6, #0
 800f8f8:	341a      	adds	r4, #26
 800f8fa:	42b5      	cmp	r5, r6
 800f8fc:	d11a      	bne.n	800f934 <_printf_common+0xc8>
 800f8fe:	2000      	movs	r0, #0
 800f900:	e008      	b.n	800f914 <_printf_common+0xa8>
 800f902:	2301      	movs	r3, #1
 800f904:	4652      	mov	r2, sl
 800f906:	4649      	mov	r1, r9
 800f908:	4638      	mov	r0, r7
 800f90a:	47c0      	blx	r8
 800f90c:	3001      	adds	r0, #1
 800f90e:	d103      	bne.n	800f918 <_printf_common+0xac>
 800f910:	f04f 30ff 	mov.w	r0, #4294967295
 800f914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f918:	3501      	adds	r5, #1
 800f91a:	e7c6      	b.n	800f8aa <_printf_common+0x3e>
 800f91c:	18e1      	adds	r1, r4, r3
 800f91e:	1c5a      	adds	r2, r3, #1
 800f920:	2030      	movs	r0, #48	; 0x30
 800f922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f926:	4422      	add	r2, r4
 800f928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f92c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f930:	3302      	adds	r3, #2
 800f932:	e7c7      	b.n	800f8c4 <_printf_common+0x58>
 800f934:	2301      	movs	r3, #1
 800f936:	4622      	mov	r2, r4
 800f938:	4649      	mov	r1, r9
 800f93a:	4638      	mov	r0, r7
 800f93c:	47c0      	blx	r8
 800f93e:	3001      	adds	r0, #1
 800f940:	d0e6      	beq.n	800f910 <_printf_common+0xa4>
 800f942:	3601      	adds	r6, #1
 800f944:	e7d9      	b.n	800f8fa <_printf_common+0x8e>
	...

0800f948 <_printf_i>:
 800f948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f94c:	7e0f      	ldrb	r7, [r1, #24]
 800f94e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f950:	2f78      	cmp	r7, #120	; 0x78
 800f952:	4691      	mov	r9, r2
 800f954:	4680      	mov	r8, r0
 800f956:	460c      	mov	r4, r1
 800f958:	469a      	mov	sl, r3
 800f95a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f95e:	d807      	bhi.n	800f970 <_printf_i+0x28>
 800f960:	2f62      	cmp	r7, #98	; 0x62
 800f962:	d80a      	bhi.n	800f97a <_printf_i+0x32>
 800f964:	2f00      	cmp	r7, #0
 800f966:	f000 80d4 	beq.w	800fb12 <_printf_i+0x1ca>
 800f96a:	2f58      	cmp	r7, #88	; 0x58
 800f96c:	f000 80c0 	beq.w	800faf0 <_printf_i+0x1a8>
 800f970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f978:	e03a      	b.n	800f9f0 <_printf_i+0xa8>
 800f97a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f97e:	2b15      	cmp	r3, #21
 800f980:	d8f6      	bhi.n	800f970 <_printf_i+0x28>
 800f982:	a101      	add	r1, pc, #4	; (adr r1, 800f988 <_printf_i+0x40>)
 800f984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f988:	0800f9e1 	.word	0x0800f9e1
 800f98c:	0800f9f5 	.word	0x0800f9f5
 800f990:	0800f971 	.word	0x0800f971
 800f994:	0800f971 	.word	0x0800f971
 800f998:	0800f971 	.word	0x0800f971
 800f99c:	0800f971 	.word	0x0800f971
 800f9a0:	0800f9f5 	.word	0x0800f9f5
 800f9a4:	0800f971 	.word	0x0800f971
 800f9a8:	0800f971 	.word	0x0800f971
 800f9ac:	0800f971 	.word	0x0800f971
 800f9b0:	0800f971 	.word	0x0800f971
 800f9b4:	0800faf9 	.word	0x0800faf9
 800f9b8:	0800fa21 	.word	0x0800fa21
 800f9bc:	0800fab3 	.word	0x0800fab3
 800f9c0:	0800f971 	.word	0x0800f971
 800f9c4:	0800f971 	.word	0x0800f971
 800f9c8:	0800fb1b 	.word	0x0800fb1b
 800f9cc:	0800f971 	.word	0x0800f971
 800f9d0:	0800fa21 	.word	0x0800fa21
 800f9d4:	0800f971 	.word	0x0800f971
 800f9d8:	0800f971 	.word	0x0800f971
 800f9dc:	0800fabb 	.word	0x0800fabb
 800f9e0:	682b      	ldr	r3, [r5, #0]
 800f9e2:	1d1a      	adds	r2, r3, #4
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	602a      	str	r2, [r5, #0]
 800f9e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	e09f      	b.n	800fb34 <_printf_i+0x1ec>
 800f9f4:	6820      	ldr	r0, [r4, #0]
 800f9f6:	682b      	ldr	r3, [r5, #0]
 800f9f8:	0607      	lsls	r7, r0, #24
 800f9fa:	f103 0104 	add.w	r1, r3, #4
 800f9fe:	6029      	str	r1, [r5, #0]
 800fa00:	d501      	bpl.n	800fa06 <_printf_i+0xbe>
 800fa02:	681e      	ldr	r6, [r3, #0]
 800fa04:	e003      	b.n	800fa0e <_printf_i+0xc6>
 800fa06:	0646      	lsls	r6, r0, #25
 800fa08:	d5fb      	bpl.n	800fa02 <_printf_i+0xba>
 800fa0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fa0e:	2e00      	cmp	r6, #0
 800fa10:	da03      	bge.n	800fa1a <_printf_i+0xd2>
 800fa12:	232d      	movs	r3, #45	; 0x2d
 800fa14:	4276      	negs	r6, r6
 800fa16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa1a:	485a      	ldr	r0, [pc, #360]	; (800fb84 <_printf_i+0x23c>)
 800fa1c:	230a      	movs	r3, #10
 800fa1e:	e012      	b.n	800fa46 <_printf_i+0xfe>
 800fa20:	682b      	ldr	r3, [r5, #0]
 800fa22:	6820      	ldr	r0, [r4, #0]
 800fa24:	1d19      	adds	r1, r3, #4
 800fa26:	6029      	str	r1, [r5, #0]
 800fa28:	0605      	lsls	r5, r0, #24
 800fa2a:	d501      	bpl.n	800fa30 <_printf_i+0xe8>
 800fa2c:	681e      	ldr	r6, [r3, #0]
 800fa2e:	e002      	b.n	800fa36 <_printf_i+0xee>
 800fa30:	0641      	lsls	r1, r0, #25
 800fa32:	d5fb      	bpl.n	800fa2c <_printf_i+0xe4>
 800fa34:	881e      	ldrh	r6, [r3, #0]
 800fa36:	4853      	ldr	r0, [pc, #332]	; (800fb84 <_printf_i+0x23c>)
 800fa38:	2f6f      	cmp	r7, #111	; 0x6f
 800fa3a:	bf0c      	ite	eq
 800fa3c:	2308      	moveq	r3, #8
 800fa3e:	230a      	movne	r3, #10
 800fa40:	2100      	movs	r1, #0
 800fa42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa46:	6865      	ldr	r5, [r4, #4]
 800fa48:	60a5      	str	r5, [r4, #8]
 800fa4a:	2d00      	cmp	r5, #0
 800fa4c:	bfa2      	ittt	ge
 800fa4e:	6821      	ldrge	r1, [r4, #0]
 800fa50:	f021 0104 	bicge.w	r1, r1, #4
 800fa54:	6021      	strge	r1, [r4, #0]
 800fa56:	b90e      	cbnz	r6, 800fa5c <_printf_i+0x114>
 800fa58:	2d00      	cmp	r5, #0
 800fa5a:	d04b      	beq.n	800faf4 <_printf_i+0x1ac>
 800fa5c:	4615      	mov	r5, r2
 800fa5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fa62:	fb03 6711 	mls	r7, r3, r1, r6
 800fa66:	5dc7      	ldrb	r7, [r0, r7]
 800fa68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fa6c:	4637      	mov	r7, r6
 800fa6e:	42bb      	cmp	r3, r7
 800fa70:	460e      	mov	r6, r1
 800fa72:	d9f4      	bls.n	800fa5e <_printf_i+0x116>
 800fa74:	2b08      	cmp	r3, #8
 800fa76:	d10b      	bne.n	800fa90 <_printf_i+0x148>
 800fa78:	6823      	ldr	r3, [r4, #0]
 800fa7a:	07de      	lsls	r6, r3, #31
 800fa7c:	d508      	bpl.n	800fa90 <_printf_i+0x148>
 800fa7e:	6923      	ldr	r3, [r4, #16]
 800fa80:	6861      	ldr	r1, [r4, #4]
 800fa82:	4299      	cmp	r1, r3
 800fa84:	bfde      	ittt	le
 800fa86:	2330      	movle	r3, #48	; 0x30
 800fa88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fa8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fa90:	1b52      	subs	r2, r2, r5
 800fa92:	6122      	str	r2, [r4, #16]
 800fa94:	f8cd a000 	str.w	sl, [sp]
 800fa98:	464b      	mov	r3, r9
 800fa9a:	aa03      	add	r2, sp, #12
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	4640      	mov	r0, r8
 800faa0:	f7ff fee4 	bl	800f86c <_printf_common>
 800faa4:	3001      	adds	r0, #1
 800faa6:	d14a      	bne.n	800fb3e <_printf_i+0x1f6>
 800faa8:	f04f 30ff 	mov.w	r0, #4294967295
 800faac:	b004      	add	sp, #16
 800faae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fab2:	6823      	ldr	r3, [r4, #0]
 800fab4:	f043 0320 	orr.w	r3, r3, #32
 800fab8:	6023      	str	r3, [r4, #0]
 800faba:	4833      	ldr	r0, [pc, #204]	; (800fb88 <_printf_i+0x240>)
 800fabc:	2778      	movs	r7, #120	; 0x78
 800fabe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fac2:	6823      	ldr	r3, [r4, #0]
 800fac4:	6829      	ldr	r1, [r5, #0]
 800fac6:	061f      	lsls	r7, r3, #24
 800fac8:	f851 6b04 	ldr.w	r6, [r1], #4
 800facc:	d402      	bmi.n	800fad4 <_printf_i+0x18c>
 800face:	065f      	lsls	r7, r3, #25
 800fad0:	bf48      	it	mi
 800fad2:	b2b6      	uxthmi	r6, r6
 800fad4:	07df      	lsls	r7, r3, #31
 800fad6:	bf48      	it	mi
 800fad8:	f043 0320 	orrmi.w	r3, r3, #32
 800fadc:	6029      	str	r1, [r5, #0]
 800fade:	bf48      	it	mi
 800fae0:	6023      	strmi	r3, [r4, #0]
 800fae2:	b91e      	cbnz	r6, 800faec <_printf_i+0x1a4>
 800fae4:	6823      	ldr	r3, [r4, #0]
 800fae6:	f023 0320 	bic.w	r3, r3, #32
 800faea:	6023      	str	r3, [r4, #0]
 800faec:	2310      	movs	r3, #16
 800faee:	e7a7      	b.n	800fa40 <_printf_i+0xf8>
 800faf0:	4824      	ldr	r0, [pc, #144]	; (800fb84 <_printf_i+0x23c>)
 800faf2:	e7e4      	b.n	800fabe <_printf_i+0x176>
 800faf4:	4615      	mov	r5, r2
 800faf6:	e7bd      	b.n	800fa74 <_printf_i+0x12c>
 800faf8:	682b      	ldr	r3, [r5, #0]
 800fafa:	6826      	ldr	r6, [r4, #0]
 800fafc:	6961      	ldr	r1, [r4, #20]
 800fafe:	1d18      	adds	r0, r3, #4
 800fb00:	6028      	str	r0, [r5, #0]
 800fb02:	0635      	lsls	r5, r6, #24
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	d501      	bpl.n	800fb0c <_printf_i+0x1c4>
 800fb08:	6019      	str	r1, [r3, #0]
 800fb0a:	e002      	b.n	800fb12 <_printf_i+0x1ca>
 800fb0c:	0670      	lsls	r0, r6, #25
 800fb0e:	d5fb      	bpl.n	800fb08 <_printf_i+0x1c0>
 800fb10:	8019      	strh	r1, [r3, #0]
 800fb12:	2300      	movs	r3, #0
 800fb14:	6123      	str	r3, [r4, #16]
 800fb16:	4615      	mov	r5, r2
 800fb18:	e7bc      	b.n	800fa94 <_printf_i+0x14c>
 800fb1a:	682b      	ldr	r3, [r5, #0]
 800fb1c:	1d1a      	adds	r2, r3, #4
 800fb1e:	602a      	str	r2, [r5, #0]
 800fb20:	681d      	ldr	r5, [r3, #0]
 800fb22:	6862      	ldr	r2, [r4, #4]
 800fb24:	2100      	movs	r1, #0
 800fb26:	4628      	mov	r0, r5
 800fb28:	f7f0 fb6a 	bl	8000200 <memchr>
 800fb2c:	b108      	cbz	r0, 800fb32 <_printf_i+0x1ea>
 800fb2e:	1b40      	subs	r0, r0, r5
 800fb30:	6060      	str	r0, [r4, #4]
 800fb32:	6863      	ldr	r3, [r4, #4]
 800fb34:	6123      	str	r3, [r4, #16]
 800fb36:	2300      	movs	r3, #0
 800fb38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb3c:	e7aa      	b.n	800fa94 <_printf_i+0x14c>
 800fb3e:	6923      	ldr	r3, [r4, #16]
 800fb40:	462a      	mov	r2, r5
 800fb42:	4649      	mov	r1, r9
 800fb44:	4640      	mov	r0, r8
 800fb46:	47d0      	blx	sl
 800fb48:	3001      	adds	r0, #1
 800fb4a:	d0ad      	beq.n	800faa8 <_printf_i+0x160>
 800fb4c:	6823      	ldr	r3, [r4, #0]
 800fb4e:	079b      	lsls	r3, r3, #30
 800fb50:	d413      	bmi.n	800fb7a <_printf_i+0x232>
 800fb52:	68e0      	ldr	r0, [r4, #12]
 800fb54:	9b03      	ldr	r3, [sp, #12]
 800fb56:	4298      	cmp	r0, r3
 800fb58:	bfb8      	it	lt
 800fb5a:	4618      	movlt	r0, r3
 800fb5c:	e7a6      	b.n	800faac <_printf_i+0x164>
 800fb5e:	2301      	movs	r3, #1
 800fb60:	4632      	mov	r2, r6
 800fb62:	4649      	mov	r1, r9
 800fb64:	4640      	mov	r0, r8
 800fb66:	47d0      	blx	sl
 800fb68:	3001      	adds	r0, #1
 800fb6a:	d09d      	beq.n	800faa8 <_printf_i+0x160>
 800fb6c:	3501      	adds	r5, #1
 800fb6e:	68e3      	ldr	r3, [r4, #12]
 800fb70:	9903      	ldr	r1, [sp, #12]
 800fb72:	1a5b      	subs	r3, r3, r1
 800fb74:	42ab      	cmp	r3, r5
 800fb76:	dcf2      	bgt.n	800fb5e <_printf_i+0x216>
 800fb78:	e7eb      	b.n	800fb52 <_printf_i+0x20a>
 800fb7a:	2500      	movs	r5, #0
 800fb7c:	f104 0619 	add.w	r6, r4, #25
 800fb80:	e7f5      	b.n	800fb6e <_printf_i+0x226>
 800fb82:	bf00      	nop
 800fb84:	080118a9 	.word	0x080118a9
 800fb88:	080118ba 	.word	0x080118ba

0800fb8c <memmove>:
 800fb8c:	4288      	cmp	r0, r1
 800fb8e:	b510      	push	{r4, lr}
 800fb90:	eb01 0402 	add.w	r4, r1, r2
 800fb94:	d902      	bls.n	800fb9c <memmove+0x10>
 800fb96:	4284      	cmp	r4, r0
 800fb98:	4623      	mov	r3, r4
 800fb9a:	d807      	bhi.n	800fbac <memmove+0x20>
 800fb9c:	1e43      	subs	r3, r0, #1
 800fb9e:	42a1      	cmp	r1, r4
 800fba0:	d008      	beq.n	800fbb4 <memmove+0x28>
 800fba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fbaa:	e7f8      	b.n	800fb9e <memmove+0x12>
 800fbac:	4402      	add	r2, r0
 800fbae:	4601      	mov	r1, r0
 800fbb0:	428a      	cmp	r2, r1
 800fbb2:	d100      	bne.n	800fbb6 <memmove+0x2a>
 800fbb4:	bd10      	pop	{r4, pc}
 800fbb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fbba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fbbe:	e7f7      	b.n	800fbb0 <memmove+0x24>

0800fbc0 <_sbrk_r>:
 800fbc0:	b538      	push	{r3, r4, r5, lr}
 800fbc2:	4d06      	ldr	r5, [pc, #24]	; (800fbdc <_sbrk_r+0x1c>)
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	4604      	mov	r4, r0
 800fbc8:	4608      	mov	r0, r1
 800fbca:	602b      	str	r3, [r5, #0]
 800fbcc:	f7f1 fe42 	bl	8001854 <_sbrk>
 800fbd0:	1c43      	adds	r3, r0, #1
 800fbd2:	d102      	bne.n	800fbda <_sbrk_r+0x1a>
 800fbd4:	682b      	ldr	r3, [r5, #0]
 800fbd6:	b103      	cbz	r3, 800fbda <_sbrk_r+0x1a>
 800fbd8:	6023      	str	r3, [r4, #0]
 800fbda:	bd38      	pop	{r3, r4, r5, pc}
 800fbdc:	20006290 	.word	0x20006290

0800fbe0 <_realloc_r>:
 800fbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe4:	4680      	mov	r8, r0
 800fbe6:	4614      	mov	r4, r2
 800fbe8:	460e      	mov	r6, r1
 800fbea:	b921      	cbnz	r1, 800fbf6 <_realloc_r+0x16>
 800fbec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf0:	4611      	mov	r1, r2
 800fbf2:	f7ff bc57 	b.w	800f4a4 <_malloc_r>
 800fbf6:	b92a      	cbnz	r2, 800fc04 <_realloc_r+0x24>
 800fbf8:	f7ff fbe8 	bl	800f3cc <_free_r>
 800fbfc:	4625      	mov	r5, r4
 800fbfe:	4628      	mov	r0, r5
 800fc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc04:	f000 f81b 	bl	800fc3e <_malloc_usable_size_r>
 800fc08:	4284      	cmp	r4, r0
 800fc0a:	4607      	mov	r7, r0
 800fc0c:	d802      	bhi.n	800fc14 <_realloc_r+0x34>
 800fc0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fc12:	d812      	bhi.n	800fc3a <_realloc_r+0x5a>
 800fc14:	4621      	mov	r1, r4
 800fc16:	4640      	mov	r0, r8
 800fc18:	f7ff fc44 	bl	800f4a4 <_malloc_r>
 800fc1c:	4605      	mov	r5, r0
 800fc1e:	2800      	cmp	r0, #0
 800fc20:	d0ed      	beq.n	800fbfe <_realloc_r+0x1e>
 800fc22:	42bc      	cmp	r4, r7
 800fc24:	4622      	mov	r2, r4
 800fc26:	4631      	mov	r1, r6
 800fc28:	bf28      	it	cs
 800fc2a:	463a      	movcs	r2, r7
 800fc2c:	f7ff fbc0 	bl	800f3b0 <memcpy>
 800fc30:	4631      	mov	r1, r6
 800fc32:	4640      	mov	r0, r8
 800fc34:	f7ff fbca 	bl	800f3cc <_free_r>
 800fc38:	e7e1      	b.n	800fbfe <_realloc_r+0x1e>
 800fc3a:	4635      	mov	r5, r6
 800fc3c:	e7df      	b.n	800fbfe <_realloc_r+0x1e>

0800fc3e <_malloc_usable_size_r>:
 800fc3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc42:	1f18      	subs	r0, r3, #4
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	bfbc      	itt	lt
 800fc48:	580b      	ldrlt	r3, [r1, r0]
 800fc4a:	18c0      	addlt	r0, r0, r3
 800fc4c:	4770      	bx	lr
	...

0800fc50 <_init>:
 800fc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc52:	bf00      	nop
 800fc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc56:	bc08      	pop	{r3}
 800fc58:	469e      	mov	lr, r3
 800fc5a:	4770      	bx	lr

0800fc5c <_fini>:
 800fc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc5e:	bf00      	nop
 800fc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc62:	bc08      	pop	{r3}
 800fc64:	469e      	mov	lr, r3
 800fc66:	4770      	bx	lr
